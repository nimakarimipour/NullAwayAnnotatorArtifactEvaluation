{
    "PROJECTS": [
        {
            "name": "PhotoView",
            "size": 5,
            "errors": [
                {
                    "url": "https://github.com/nimakarimipour/PhotoView/blob/d2a1173d74816e96560f4d60115d5fcc30f86b47/photoview/src/main/java/com/github/chrisbanes/photoview/PhotoView.java#L39",
                    "position": "this(context, null);",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/PhotoView/blob/d2a1173d74816e96560f4d60115d5fcc30f86b47/photoview/src/main/java/com/github/chrisbanes/photoview/CustomGestureDetector.java#L154",
                    "position": "mVelocityTracker = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/PhotoView/blob/d2a1173d74816e96560f4d60115d5fcc30f86b47/photoview/src/main/java/com/github/chrisbanes/photoview/PhotoViewAttacher.java#L718",
                    "position": "mCurrentFlingRunnable = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/PhotoView/blob/d2a1173d74816e96560f4d60115d5fcc30f86b47/photoview/src/main/java/com/github/chrisbanes/photoview/CustomGestureDetector.java#L183",
                    "position": "mVelocityTracker = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/PhotoView/blob/d2a1173d74816e96560f4d60115d5fcc30f86b47/photoview/src/main/java/com/github/chrisbanes/photoview/PhotoViewAttacher.java#L588",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                }
            ]
        },
        {
            "name": "MPAndroid",
            "size": 5,
            "errors": [
                {
                    "url": "https://github.com/nimakarimipour/MPAndroidChart/blob/d76d1229c403e8c0f9aca47ae3a0464e232b0da5/MPChartLib/src/main/java/com/github/mikephil/charting/charts/BarLineChartBase.java#L1645",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/MPAndroidChart/blob/d76d1229c403e8c0f9aca47ae3a0464e232b0da5/MPChartLib/src/main/java/com/github/mikephil/charting/data/BaseDataSet.java#L29",
                    "position": "protected List<Integer> mColors = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/MPAndroidChart/blob/d76d1229c403e8c0f9aca47ae3a0464e232b0da5/MPChartLib/src/main/java/com/github/mikephil/charting/data/PieData.java#L76",
                    "position": "return ignorecase ? label.equalsIgnoreCase(mDataSets.get(0).getLabel()) ? mDataSets.get(0)",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/MPAndroidChart/blob/d76d1229c403e8c0f9aca47ae3a0464e232b0da5/MPChartLib/src/main/java/com/github/mikephil/charting/renderer/LegendRenderer.java#L116",
                    "position": "label,",
                    "message": " (Covered) passing @Nullable parameter 'label' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/MPAndroidChart/blob/d76d1229c403e8c0f9aca47ae3a0464e232b0da5/MPChartLib/src/main/java/com/github/mikephil/charting/highlight/CombinedHighlighter.java#L24",
                    "position": "public CombinedHighlighter(CombinedDataProvider chart, BarDataProvider barChart) {",
                    "message": " (Covered) initializer method does not guarantee @NonNull field barHighlighter (line 22) is initialized along all control-flow paths (remember to check for exceptions or early returns)."
                }
            ]
        },
        {
            "name": "Mockito",
            "size": 7,
            "errors": [
                {
                    "url": "https://github.com/nimakarimipour/mockito/blob/70633c4876572343a57b5f718fae8967dae27108/src/main/java/org/mockito/internal/progress/MockingProgressImpl.java#L91",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/mockito/blob/70633c4876572343a57b5f718fae8967dae27108/src/main/java/org/mockito/internal/creation/bytebuddy/SubclassBytecodeGenerator.java#L65",
                    "position": "this(loader, null, any());",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/mockito/blob/70633c4876572343a57b5f718fae8967dae27108/src/main/java/org/mockito/internal/util/JavaEightUtil.java#L21",
                    "position": "private static Object emptyOptionalInt;",
                    "message": " (Covered) @NonNull static field emptyOptionalInt not initialized"
                },
                {
                    "url": "https://github.com/nimakarimipour/mockito/blob/70633c4876572343a57b5f718fae8967dae27108/src/main/java/org/mockito/internal/framework/DefaultMockitoSession.java#L65",
                    "position": "finishMocking(null);",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/mockito/blob/70633c4876572343a57b5f718fae8967dae27108/src/main/java/org/mockito/internal/exceptions/Reporter.java#L831",
                    "position": "return details.getMessage();",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/mockito/blob/70633c4876572343a57b5f718fae8967dae27108/src/main/java/org/mockito/internal/handler/MockHandlerImpl.java#L54",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/mockito/blob/70633c4876572343a57b5f718fae8967dae27108/src/main/java/org/mockito/internal/util/JavaEightUtil.java#L23",
                    "position": "private static Object emptyDuration;",
                    "message": " (Covered) @NonNull static field emptyDuration not initialized"
                }
            ]
        },
        {
            "name": "Conductor",
            "size": 5,
            "errors": [
                {
                    "url": "https://github.com/nimakarimipour/conductor/blob/74ab3f3c08dc64d2ae3b1a240a338a0065b18f1d/core/src/main/java/com/netflix/conductor/service/MetadataServiceImpl.java#L54",
                    "position": "taskDefinition.setUpdatedBy(null);",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/conductor/blob/74ab3f3c08dc64d2ae3b1a240a338a0065b18f1d/core/src/main/java/com/netflix/conductor/core/orchestration/ExecutionDAOFacade.java#L422",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/conductor/blob/74ab3f3c08dc64d2ae3b1a240a338a0065b18f1d/core/src/main/java/com/netflix/conductor/core/execution/tasks/SubWorkflow.java#L87",
                    "position": "null,",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/conductor/blob/74ab3f3c08dc64d2ae3b1a240a338a0065b18f1d/core/src/main/java/com/netflix/conductor/core/execution/WorkflowExecutor.java#L813",
                    "position": "deciderService.updateWorkflowOutput(workflow, null);",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/conductor/blob/74ab3f3c08dc64d2ae3b1a240a338a0065b18f1d/core/src/main/java/com/netflix/conductor/service/TaskServiceImpl.java#L158",
                    "position": "}, null, null, 3, ackTaskDesc, ackTaskOperation);",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                }
            ]
        },
        {
            "name": "LitiEngine",
            "size": 17,
            "errors": [
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/entities/Entity.java#L512",
                    "position": "this.environment = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/environment/tilemap/xml/ImageLayer.java#L16",
                    "position": "private MapImage image;",
                    "message": " (Covered) @NonNull field image not initialized"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/environment/tilemap/MapUtilities.java#L193",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/environment/tilemap/xml/Text.java#L22",
                    "position": "private Integer pixelsize;",
                    "message": " (Covered) @NonNull field pixelsize not initialized"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/entities/SoundSource.java#L43",
                    "position": "public SoundSource(Sound sound) {",
                    "message": " (Covered) initializer method does not guarantee @NonNull fields sound (line 27), playback (line 28) are initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/environment/tilemap/xml/CustomPropertyProvider.java#L55",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/environment/tilemap/xml/Text.java#L38",
                    "position": "private Integer underline;",
                    "message": " (Covered) @NonNull field underline not initialized"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/environment/GameWorld.java#L62",
                    "position": "public GameWorld() {",
                    "message": " (Covered) initializer method does not guarantee @NonNull fields environment (line 51), camera (line 52) are initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/util/io/URLAdapter.java#L44",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/entities/Entity.java#L318",
                    "position": "this.boundingBox = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/environment/tilemap/xml/TileLayer.java#L38",
                    "position": "public TileLayer(TileData data) {",
                    "message": " (Covered) initializer method does not guarantee @NonNull fields tileList (line 21), tiles (line 23) are initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/resources/Sounds.java#L44",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/resources/SpritesheetResource.java#L35",
                    "position": "public SpritesheetResource() {",
                    "message": " (Covered) initializer method does not guarantee @NonNull fields imageformat (line 26), image (line 29), keyframes (line 32) are initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/resources/Resources.java#L321",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/gui/GuiProperties.java#L16",
                    "position": "private static Font defaultFont;",
                    "message": " (Covered) @NonNull static field defaultFont not initialized"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/resources/Strings.java#L56",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/util/geom/GeometricUtilities.java#L251",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                }
            ]
        },
        {
            "name": "NullAway",
            "size": 5,
            "errors": [
                {
                    "url": "https://github.com/nimakarimipour/NullAway/blob/docker/nullaway/src/main/java/com/uber/nullaway/AbstractConfig.java#L63",
                    "position": "protected Pattern fieldAnnotPattern;",
                    "message": " (Covered) @NonNull field fieldAnnotPattern not initialized"
                },
                {
                    "url": "https://github.com/nimakarimipour/NullAway/blob/docker/nullaway/src/main/java/com/uber/nullaway/handlers/contract/ContractHandler.java#L110",
                    "position": "clause, node.getTree(), analysis, state, callee, node.getArguments().size());",
                    "message": " (Covered) passing @Nullable parameter 'analysis' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/NullAway/blob/docker/nullaway/src/main/java/com/uber/nullaway/dataflow/DataFlow.java#L288",
                    "position": "private ProcessingEnvironment environment;",
                    "message": " (Covered) @NonNull field DataFlow$CfgParams.environment not initialized"
                },
                {
                    "url": "https://github.com/nimakarimipour/NullAway/blob/docker/nullaway/src/main/java/com/uber/nullaway/AbstractConfig.java#L99",
                    "position": "protected String autofixSuppressionComment;",
                    "message": " (Covered) @NonNull field autofixSuppressionComment not initialized"
                },
                {
                    "url": "https://github.com/nimakarimipour/NullAway/blob/docker/nullaway/src/main/java/com/uber/nullaway/dataflow/DataFlow.java#L269",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                }
            ]
        },
        {
            "name": "EventBus",
            "size": 5,
            "errors": [
                {
                    "url": "https://github.com/nimakarimipour/EventBus/blob/docker/src/org/greenrobot/eventbus/EventBus.java#L417",
                    "position": "postingState.event = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/EventBus/blob/docker/src/org/greenrobot/eventbus/util/ErrorDialogManager.java#L191",
                    "position": "attachTo(activity, false, null);",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/EventBus/blob/docker/src/org/greenrobot/eventbus/EventBus.java#L418",
                    "position": "postingState.subscription = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/EventBus/blob/docker/src/org/greenrobot/eventbus/PendingPost.java#L49",
                    "position": "pendingPost.subscription = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/EventBus/blob/docker/src/org/greenrobot/eventbus/SubscriberMethodFinder.java#L226",
                    "position": "subscriberInfo = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                }
            ]
        },
        {
            "name": "Gson",
            "size": 5,
            "errors": [
                {
                    "url": "https://github.com/nimakarimipour/gson/blob/docker/gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java#L186",
                    "position": "return key != null ? find((K) key, false) : null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/gson/blob/docker/gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java#L49",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/gson/blob/docker/gson/src/main/java/com/google/gson/internal/Excluder.java#L119",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/gson/blob/docker/gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java#L672",
                    "position": "private Node<K, V> stack;",
                    "message": " (Covered) @NonNull field LinkedHashTreeMap$AvlBuilder.stack not initialized"
                },
                {
                    "url": "https://github.com/nimakarimipour/gson/blob/docker/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java#L453",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                }
            ]
        },
        {
            "name": "Jadx",
            "size": 21,
            "errors": [
                {
                    "url": "https://github.com/nimakarimipour/jadx/blob/docker/jadx-core/src/main/java/jadx/core/dex/nodes/parser/SignatureParser.java#L51",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/jadx/blob/docker/jadx-core/src/main/java/jadx/core/utils/InsnUtils.java#L119",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/jadx/blob/docker/jadx-core/src/main/java/jadx/api/JavaClass.java#L32",
                    "position": "this.parent = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/jadx/blob/docker/jadx-core/src/main/java/jadx/core/dex/instructions/args/ArgType.java#L604",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/jadx/blob/docker/jadx-core/src/main/java/jadx/core/dex/info/ClassInfo.java#L228",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/jadx/blob/docker/jadx-core/src/main/java/jadx/api/ResourceFile.java#L47",
                    "position": "protected ResourceFile(JadxDecompiler decompiler, String name, ResourceType type) {",
                    "message": " (Covered) initializer method does not guarantee @NonNull fields zipRef (line 37), deobfName (line 38) are initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/jadx/blob/docker/jadx-core/src/main/java/jadx/api/JadxDecompiler.java#L351",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/jadx/blob/docker/jadx-core/src/main/java/jadx/core/dex/nodes/InsnNode.java#L136",
                    "position": "InsnRemover.unbindArgUsage(null, arg);",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/jadx/blob/docker/jadx-core/src/main/java/jadx/core/dex/visitors/SimplifyVisitor.java#L571",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/jadx/blob/docker/jadx-core/src/main/java/jadx/core/dex/visitors/ReSugarCode.java#L277",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/jadx/blob/docker/jadx-core/src/main/java/jadx/core/xmlgen/entry/ValuesParser.java#L21",
                    "position": "private static Map<Integer, String> androidResMap;",
                    "message": " (Covered) @NonNull static field androidResMap not initialized"
                },
                {
                    "url": "https://github.com/nimakarimipour/jadx/blob/docker/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java#L768",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/jadx/blob/docker/jadx-core/src/main/java/jadx/core/dex/visitors/regions/IfMakerHelper.java#L67",
                    "position": "IfInfo ifInfo = new IfInfo(info, null, null);",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/jadx/blob/docker/jadx-core/src/main/java/jadx/core/dex/visitors/MarkFinallyVisitor.java#L303",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/jadx/blob/docker/jadx-core/src/main/java/jadx/core/utils/BlockUtils.java#L503",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/jadx/blob/docker/jadx-core/src/main/java/jadx/core/utils/kotlin/KotlinMetadataUtils.java#L31",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/jadx/blob/docker/jadx-core/src/main/java/jadx/core/dex/nodes/RootNode.java#L276",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/jadx/blob/docker/jadx-core/src/main/java/jadx/api/JadxDecompiler.java#L90",
                    "position": "public JadxDecompiler(JadxArgs args) {",
                    "message": " (Covered) initializer method does not guarantee @NonNull fields root (line 76), classes (line 77), resources (line 78), xmlParser (line 80) are initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/jadx/blob/docker/jadx-core/src/main/java/jadx/core/dex/instructions/ArithNode.java#L75",
                    "position": "ArithNode insn = new ArithNode(op, null, res, a);",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/jadx/blob/docker/jadx-core/src/main/java/jadx/core/dex/nodes/MethodNode.java#L363",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/jadx/blob/docker/jadx-core/src/main/java/jadx/core/dex/visitors/SimplifyVisitor.java#L411",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                }
            ]
        },
        {
            "name": "Zuul",
            "size": 6,
            "errors": [
                {
                    "url": "https://github.com/nimakarimipour/zuul/blob/docker/zuul-core/src/main/java/com/netflix/zuul/message/http/HttpRequestMessageImpl.java#L96",
                    "position": "private String pathAndQuery = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/zuul/blob/docker/zuul-core/src/main/java/com/netflix/zuul/netty/insights/PassportStateListener.java#L34",
                    "position": "this.failState = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/zuul/blob/docker/zuul-core/src/main/java/com/netflix/zuul/message/http/HttpRequestMessageImpl.java#L97",
                    "position": "private String infoForLogging = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/zuul/blob/docker/zuul-core/src/main/java/com/netflix/zuul/StaticFilterLoader.java#L154",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/zuul/blob/docker/zuul-core/src/main/java/com/netflix/zuul/netty/filter/BaseZuulFilterRunner.java#L231",
                    "position": "resumer = new FilterChainResumer(inMesg, filter, snapshot, startTime);",
                    "message": " (Covered) passing @Nullable parameter 'snapshot' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/zuul/blob/docker/zuul-core/src/main/java/com/netflix/zuul/netty/server/DirectMemoryMonitor.java#L46",
                    "position": "private static final Supplier<Long> reservedMemoryGetter;",
                    "message": " (Covered) @NonNull static field reservedMemoryGetter not initialized"
                }
            ]
        },
        {
            "name": "Retrofit",
            "size": 5,
            "errors": [
                {
                    "url": "https://github.com/nimakarimipour/retrofit/blob/docker/retrofit/src/main/java/retrofit2/ParameterHandler.java#L234",
                    "position": "builder.addHeader(headerName, valueConverter.convert(headerValue));",
                    "message": " (Covered) passing @Nullable parameter 'valueConverter.convert(headerValue)' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/retrofit/blob/docker/retrofit/src/main/java/retrofit2/ParameterHandler.java#L154",
                    "position": "builder.addQueryParam(nameConverter.convert(value), null, encoded);",
                    "message": " (Covered) passing @Nullable parameter 'nameConverter.convert(value)' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/retrofit/blob/docker/retrofit/src/main/java/retrofit2/ParameterHandler.java#L116",
                    "position": "builder.addPathParam(name, valueConverter.convert(value), encoded);",
                    "message": " (Covered) passing @Nullable parameter 'valueConverter.convert(value)' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/retrofit/blob/docker/retrofit/src/main/java/retrofit2/RequestFactory.java#L85",
                    "position": "httpMethod = builder.httpMethod;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/retrofit/blob/docker/retrofit/src/main/java/retrofit2/ParameterHandler.java#L406",
                    "position": "builder.addPart(headers, valueConverter.convert(entryValue));",
                    "message": " (Covered) passing @Nullable parameter 'valueConverter.convert(entryValue)' where @NonNull is required"
                }
            ]
        },
        {
            "name": "LibGdx",
            "size": 50,
            "errors": [
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/maps/objects/TextureMapObject.java#L32",
                    "position": "private TextureRegion textureRegion = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/shaders/BaseShader.java#L148",
                    "position": "return register(uniform, null);",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Skin.java#L222",
                    "position": "return regions;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/utils/Array.java#L678",
                    "position": "public ArrayIterable (Array<T> array, boolean allowRemove) {",
                    "message": " (Covered) initializer method does not guarantee @NonNull fields iterator1 (line 670), iterator2 (line 670) are initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/utils/SortedIntList.java#L168",
                    "position": "protected Node<E> n;",
                    "message": " (Covered) @NonNull field SortedIntList$Node.n not initialized"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/utils/ObjectSet.java#L80",
                    "position": "public ObjectSet (int initialCapacity, float loadFactor) {",
                    "message": " (Covered) initializer method does not guarantee @NonNull fields iterator1 (line 64), iterator2 (line 64) are initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/utils/Json.java#L276",
                    "position": "this.writer = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/particles/influencers/DynamicsModifier.java#L299",
                    "position": "public CentripetalAcceleration (CentripetalAcceleration rotation) {",
                    "message": " (Covered) initializer method does not guarantee @NonNull fields accelerationChannel (line 293), positionChannel (line 294) are initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/utils/I18NBundle.java#L83",
                    "position": "private ObjectMap<String, String> properties;",
                    "message": " (Covered) @NonNull field properties not initialized"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/utils/SharedLibraryLoader.java#L274",
                    "position": "StreamUtils.closeQuietly(output);",
                    "message": " (Covered) passing @Nullable parameter 'output' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/utils/PooledLinkedList.java#L70",
                    "position": "item.prev = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/utils/reflect/Annotation.java#L18",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/utils/Queue.java#L507",
                    "position": "public QueueIterable (Queue<T> queue, boolean allowRemove) {",
                    "message": " (Covered) initializer method does not guarantee @NonNull fields iterator1 (line 499), iterator2 (line 499) are initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/math/Bezier.java#L125",
                    "position": "public Bezier (final T... points) {",
                    "message": " (Covered) initializer method does not guarantee @NonNull fields tmp (line 118), tmp2 (line 119), tmp3 (line 120) are initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/utils/compression/lz/InWindow.java#L56",
                    "position": "_bufferBase = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g2d/TextureAtlas.java#L96",
                    "position": "public int[] splits;",
                    "message": " (Covered) @NonNull field TextureAtlas$TextureAtlasData$Region.splits not initialized"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/model/MeshPart.java#L71",
                    "position": "public MeshPart () {",
                    "message": " (Covered) initializer method does not guarantee @NonNull fields id (line 46), mesh (line 57) are initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/utils/ObjectLongMap.java#L83",
                    "position": "public ObjectLongMap (int initialCapacity, float loadFactor) {",
                    "message": " (Covered) initializer method does not guarantee @NonNull fields entries1 (line 65), entries2 (line 65), values1 (line 66), values2 (line 66), keys1 (line 67), keys2 (line 67) are initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/loader/G3dModelLoader.java#L304",
                    "position": "jsonNode.rotation = rotation == null ? null : new Quaternion(rotation.getFloat(0), rotation.getFloat(1),",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/model/data/ModelNodeAnimation.java#L25",
                    "position": "public String nodeId;",
                    "message": " (Covered) @NonNull field nodeId not initialized"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/model/data/ModelMaterial.java#L31",
                    "position": "public Color ambient;",
                    "message": " (Covered) @NonNull field ambient not initialized"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/utils/ComparableTimSort.java#L70",
                    "position": "ComparableTimSort () {",
                    "message": " (Covered) initializer method does not guarantee @NonNull field a (line 37) is initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/Texture.java#L323",
                    "position": "return managedTextures.get(Gdx.app).size;",
                    "message": " dereferenced expression managedTextures.get(Gdx.app) is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/utils/Timer.java#L121",
                    "position": "task.timer = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g2d/PixmapPacker.java#L811",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/particles/batches/BufferedParticleBatch.java#L32",
                    "position": "protected BufferedParticleBatch (Class<T> type) {",
                    "message": " (Covered) initializer method does not guarantee @NonNull field camera (line 30) is initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/particles/ParticleShader.java#L56",
                    "position": "public String fragmentShader = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/maps/tiled/BaseTmxMapLoader.java#L361",
                    "position": "if ((gid = element.getAttribute(\"gid\", null)) != null) {",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/utils/XmlWriter.java#L109",
                    "position": "currentElement = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/scenes/scene2d/actions/TemporalAction.java#L31",
                    "position": "public TemporalAction () {",
                    "message": " (Covered) initializer method does not guarantee @NonNull field interpolation (line 28) is initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/utils/SerializationException.java#L36",
                    "position": "public SerializationException (Throwable cause) {",
                    "message": " (Covered) initializer method does not guarantee @NonNull field trace (line 22) is initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/scenes/scene2d/actions/Actions.java#L272",
                    "position": "return alpha(1, duration, null);",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/scenes/scene2d/Action.java#L29",
                    "position": "protected Actor actor;",
                    "message": " (Covered) @NonNull field actor not initialized"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/utils/MeshBuilder.java#L700",
                    "position": "triangle(vertTmp1.set(p1, null, c1, null), vertTmp2.set(p2, null, c2, null), vertTmp3.set(p3, null, c3, null));",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/loader/G3dModelLoader.java#L311",
                    "position": "String meshId = json.getString(\"mesh\", null);",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/assets/loaders/ModelLoader.java#L69",
                    "position": "return loadModel(fileHandle, new TextureProvider.FileTextureProvider(), null);",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Tree.java#L540",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/utils/LongMap.java#L203",
                    "position": "zeroValue = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/utils/shapebuilders/SphereShapeBuilder.java#L67",
                    "position": "VertexInfo curr1 = vertTmp3.set(null, null, null, null);",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Skin.java#L631",
                    "position": "public String name;",
                    "message": " (Covered) @NonNull field Skin$TintedDrawable.name not initialized"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/utils/DefaultShaderProvider.java#L41",
                    "position": "this(null);",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/Mesh.java#L927",
                    "position": "return calculateRadius(center.x, center.y, center.z, offset, count, null);",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/TextureArray.java#L82",
                    "position": "Gdx.gl30.glTexImage3D(GL30.GL_TEXTURE_2D_ARRAY, 0, data.getInternalFormat(), data.getWidth(), data.getHeight(), data.getDepth(), 0, data.getInternalFormat(), data.getGLType(), null);",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g2d/BitmapFontCache.java#L486",
                    "position": "return addText(str, x, y, start, end, targetWidth, halign, wrap, null);",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/assets/loaders/BitmapFontLoader.java#L120",
                    "position": "public BitmapFontData bitmapFontData = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Window.java#L350",
                    "position": "public WindowStyle (BitmapFont titleFont, Color titleFontColor, @Null Drawable background) {",
                    "message": " (Covered) initializer method does not guarantee @NonNull field stageBackground (line 345) is initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/utils/MeshBuilder.java#L669",
                    "position": "line(vertTmp1.set(null, null, null, null).setPos(x1, y1, z1), vertTmp2.set(null, null, null, null).setPos(x2, y2, z2));",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/utils/SnapshotArray.java#L71",
                    "position": "public SnapshotArray (int capacity) {",
                    "message": " (Covered) initializer method does not guarantee @NonNull fields snapshot (line 44), recycled (line 44) are initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/loader/ObjLoader.java#L185",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/utils/JsonValue.java#L137",
                    "position": "if (child == null) return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                }
            ]
        },
        {
            "name": "SpringBoot",
            "size": 24,
            "errors": [
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#L301",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/error/DefaultErrorAttributes.java#L225",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/SpringBootConfigurationFactory.java#L58",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/env/SystemEnvironmentPropertySourceEnvironmentPostProcessor.java#L92",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/diagnostics/analyzer/NoSuchMethodFailureAnalyzer.java#L56",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/ImageBanner.java#L114",
                    "position": "Integer bitDepth = getProperty(environment, \"bitdepth\", Integer.class, null);",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/convert/DurationStyle.java#L122",
                    "position": "return print(value, null);",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/SpringBootVersion.java#L80",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/server/Ssl.java#L39",
                    "position": "private String keyPassword;",
                    "message": " (Covered) @NonNull field keyPassword not initialized"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/jta/atomikos/AtomikosProperties.java#L99",
                    "position": "private String logBaseDir;",
                    "message": " (Covered) @NonNull field logBaseDir not initialized"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/logging/DeferredLog.java#L118",
                    "position": "log(LogLevel.DEBUG, message, null);",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/admin/SpringApplicationAdminMXBeanRegistrar.java#L68",
                    "position": "public SpringApplicationAdminMXBeanRegistrar(String name) throws MalformedObjectNameException {",
                    "message": " (Covered) initializer method does not guarantee @NonNull field applicationContext (line 58) is initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/diagnostics/analyzer/ValidationExceptionFailureAnalyzer.java#L41",
                    "position": "if (cause.getMessage().startsWith(JAVAX_MISSING_IMPLEMENTATION_MESSAGE)",
                    "message": " dereferenced expression cause.getMessage() is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/context/WebServerPortFileWriter.java#L130",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/JavaBeanBinder.java#L328",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/view/MustacheViewResolver.java#L52",
                    "position": "public MustacheViewResolver(Compiler compiler) {",
                    "message": " (Covered) initializer method does not guarantee @NonNull field charset (line 36) is initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/undertow/UndertowServletWebServer.java#L96",
                    "position": "serverHeader, null, new DeploymentManagerHttpHandlerFactory(manager)), contextPath, autoStart);",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/jdbc/metadata/DataSourcePoolMetadata.java#L61",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/undertow/UndertowWebServerFactoryDelegate.java#L66",
                    "position": "private String accessLogSuffix;",
                    "message": " (Covered) @NonNull field accessLogSuffix not initialized"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/logging/AbstractLoggingSystem.java#L112",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/jdbc/DataSourceUnwrapper.java#L72",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/diagnostics/analyzer/BeanCurrentlyInCreationFailureAnalyzer.java#L165",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataActivationContext.java#L44",
                    "position": "this.profiles = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/reactive/context/ReactiveWebServerApplicationContext.java#L48",
                    "position": "public ReactiveWebServerApplicationContext() {",
                    "message": " (Covered) initializer method does not guarantee @NonNull fields serverManager (line 41), serverNamespace (line 43) are initialized along all control-flow paths (remember to check for exceptions or early returns)."
                }
            ]
        }
    ]
}