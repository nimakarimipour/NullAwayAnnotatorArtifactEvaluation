{
    "PROJECTS": {
        "Zuul": {
            "errors": [
                {
                    "url": "https://github.com/nimakarimipour/zuul/blob/docker/zuul-core/src/main/java/com/netflix/netty/common/ssl/ServerSslConfig.java#L71",
                    "position": "this(protocols, ciphers, certChainFile, keyFile, ClientAuth.NONE, null, (File) null, false);",
                    "message": " (Covered) passing @Nullable parameter 'certChainFile' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/zuul/blob/docker/zuul-core/src/main/java/com/netflix/netty/common/ssl/ServerSslConfig.java#L75",
                    "position": "this(protocols, ciphers, certChainFile, keyFile, clientAuth, null, (File) null, true);",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/zuul/blob/docker/zuul-core/src/main/java/com/netflix/netty/common/ssl/ServerSslConfig.java#L80",
                    "position": "this.ciphers = ciphers != null ? Arrays.asList(ciphers) : null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/zuul/blob/docker/zuul-core/src/main/java/com/netflix/netty/common/ssl/ServerSslConfig.java#L85",
                    "position": "this.clientAuthTrustStorePassword = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/zuul/blob/docker/zuul-core/src/main/java/com/netflix/netty/common/ssl/ServerSslConfig.java#L99",
                    "position": "this.clientAuthTrustStorePasswordFile = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/zuul/blob/docker/zuul-core/src/main/java/com/netflix/netty/common/throttle/RejectionUtils.java#L152",
                    "position": "reject(ctx, rejectionType, nfStatus, reason, request, injectedLatencyMillis, rejectedCode, rejectedBody, rejectionHeaders);",
                    "message": " (Covered) passing @Nullable parameter 'request' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/zuul/blob/docker/zuul-core/src/main/java/com/netflix/netty/common/channel/config/ChannelConfigKey.java#L38",
                    "position": "this.defaultValue = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/zuul/blob/docker/zuul-core/src/main/java/com/netflix/netty/common/SourceAddressChannelHandler.java#L115",
                    "position": "ctx.channel().attr(ATTR_SERVER_LOCAL_ADDRESS).setIfAbsent(localAddress.getAddress().getHostAddress());",
                    "message": " dereferenced expression localAddress is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/zuul/blob/docker/zuul-core/src/main/java/com/netflix/netty/common/SourceAddressChannelHandler.java#L126",
                    "position": "InetAddress address = socketAddress.getAddress();",
                    "message": " dereferenced expression socketAddress is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/zuul/blob/docker/zuul-core/src/main/java/com/netflix/zuul/context/SessionContext.java#L249",
                    "position": "if (sb.length() > 0)",
                    "message": " dereferenced expression sb is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/zuul/blob/docker/zuul-core/src/main/java/com/netflix/zuul/context/SessionContext.java#L335",
                    "position": "return (Map<String, Object>) this.get(KEY_EVENT_PROPS);",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/zuul/blob/docker/zuul-core/src/main/java/com/netflix/zuul/message/Headers.java#L95",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/zuul/blob/docker/zuul-core/src/main/java/com/netflix/zuul/filters/FilterError.java#L31",
                    "position": "private Throwable exception = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/zuul/blob/docker/zuul-core/src/main/java/com/netflix/zuul/filters/common/SurgicalDebugFilter.java#L75",
                    "position": "DynamicStringProperty routeVip = new DynamicStringProperty(ZuulConstants.ZUUL_DEBUG_VIP, null);",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/zuul/blob/docker/zuul-core/src/main/java/com/netflix/zuul/filters/common/SurgicalDebugFilter.java#L76",
                    "position": "DynamicStringProperty routeHost = new DynamicStringProperty(ZuulConstants.ZUUL_DEBUG_HOST, null);",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/zuul/blob/docker/zuul-core/src/main/java/com/netflix/zuul/filters/common/GZipResponseFilter.java#L126",
                    "position": "gzipper.write(chunk);",
                    "message": " dereferenced expression gzipper is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/zuul/blob/docker/zuul-core/src/main/java/com/netflix/zuul/filters/http/HttpSyncEndpoint.java#L95",
                    "position": "this.response = response;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/zuul/blob/docker/zuul-core/src/main/java/com/netflix/zuul/netty/server/BaseZuulChannelInitializer.java#L361",
                    "position": "final ZuulFilter<T, T>[] filters = new ZuulFilter[zuulFilters.size() + 2];",
                    "message": " dereferenced expression zuulFilters is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/zuul/blob/docker/zuul-core/src/main/java/com/netflix/zuul/netty/server/ClientRequestReceiver.java#L224",
                    "position": "zuulRequest.getHeaders().remove(HttpHeaderNames.EXPECT.toString());",
                    "message": " dereferenced expression zuulRequest is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/zuul/blob/docker/zuul-core/src/main/java/com/netflix/zuul/filters/endpoint/ProxyEndpoint.java#L200",
                    "position": "origin = getOrigin(zuulRequest);",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/zuul/blob/docker/zuul-core/src/main/java/com/netflix/zuul/filters/endpoint/ProxyEndpoint.java#L205",
                    "position": "this.sslRetryBodyCache = preCacheBodyForRetryingSslRequests();",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/zuul/blob/docker/zuul-core/src/main/java/com/netflix/zuul/filters/endpoint/ProxyEndpoint.java#L297",
                    "position": "originalReadTimeout = requestConfig.getProperty(ReadTimeout, null);",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/zuul/blob/docker/zuul-core/src/main/java/com/netflix/zuul/filters/endpoint/ProxyEndpoint.java#L324",
                    "position": "public HttpResponseMessage getDefaultOutput(final HttpRequestMessage input) {",
                    "message": " (Covered) method returns @Nullable, but superclass method com.netflix.zuul.filters.ZuulFilter.getDefaultOutput(I) returns @NonNull"
                },
                {
                    "url": "https://github.com/nimakarimipour/zuul/blob/docker/zuul-core/src/main/java/com/netflix/zuul/filters/endpoint/ProxyEndpoint.java#L482",
                    "position": "requestConfig.setProperty(ReadTimeout, null);",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/zuul/blob/docker/zuul-core/src/main/java/com/netflix/zuul/filters/endpoint/ProxyEndpoint.java#L490",
                    "position": "onOriginConnectSucceeded(connectResult.getNow(), readTimeout);",
                    "message": " unboxing of a @Nullable value"
                },
                {
                    "url": "https://github.com/nimakarimipour/zuul/blob/docker/zuul-core/src/main/java/com/netflix/zuul/filters/endpoint/ProxyEndpoint.java#L519",
                    "position": "Integer originTimeout = parseReadTimeout(origin.getClientConfig().getProperty(IClientConfigKey.Keys.ReadTimeout, null));",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/zuul/blob/docker/zuul-core/src/main/java/com/netflix/zuul/filters/endpoint/ProxyEndpoint.java#L520",
                    "position": "Integer requestTimeout = parseReadTimeout(requestConfig.getProperty(IClientConfigKey.Keys.ReadTimeout, null));",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/zuul/blob/docker/zuul-core/src/main/java/com/netflix/zuul/filters/endpoint/ProxyEndpoint.java#L524",
                    "position": "return originTimeout == null ? requestTimeout : originTimeout;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/zuul/blob/docker/zuul-core/src/main/java/com/netflix/zuul/filters/endpoint/ProxyEndpoint.java#L772",
                    "position": "zuulResponse = buildZuulHttpResponse(originResponse, statusCategory, context.getError());",
                    "message": " (Covered) passing @Nullable parameter 'context.getError()' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/zuul/blob/docker/zuul-core/src/main/java/com/netflix/zuul/filters/endpoint/ProxyEndpoint.java#L1031",
                    "position": "NettyOrigin origin = originManager.getOrigin(name, vip, uri, ctx);",
                    "message": " dereferenced expression originManager is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/zuul/blob/docker/zuul-core/src/main/java/com/netflix/zuul/niws/RequestAttempts.java#L54",
                    "position": "return (RequestAttempts) ctx.get(CommonContextKeys.REQUEST_ATTEMPTS);",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/zuul/blob/docker/zuul-core/src/main/java/com/netflix/zuul/niws/RequestAttempt.java#L114",
                    "position": "public RequestAttempt(@Nullable() final Server server, final IClientConfig clientConfig, int attemptNumber, int readTimeout) {",
                    "message": " (Covered) initializer method does not guarantee @NonNull fields exceptionType (line 56), vip (line 68) are initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/zuul/blob/docker/zuul-core/src/main/java/com/netflix/zuul/niws/RequestAttempt.java#L155",
                    "position": "private RequestAttempt() {",
                    "message": " (Covered) initializer method does not guarantee @NonNull fields exceptionType (line 56), vip (line 68) are initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/zuul/blob/docker/zuul-core/src/main/java/com/netflix/zuul/netty/NettyRequestAttemptFactory.java#L71",
                    "position": "if (cause instanceof IllegalStateException && cause.getMessage().contains(\"server\")) {",
                    "message": " dereferenced expression cause.getMessage() is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/zuul/blob/docker/zuul-core/src/main/java/com/netflix/zuul/exception/OutboundException.java#L44",
                    "position": "super(outboundErrorType.toString(), cause.getMessage(), true);",
                    "message": " (Covered) passing @Nullable parameter 'cause.getMessage()' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/zuul/blob/docker/zuul-core/src/main/java/com/netflix/zuul/netty/filter/BaseZuulFilterRunner.java#L84",
                    "position": "this.nextStage = nextStage;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/zuul/blob/docker/zuul-core/src/main/java/com/netflix/zuul/netty/filter/BaseZuulFilterRunner.java#L105",
                    "position": "return (AtomicInteger) Preconditions.checkNotNull(ctx.get(RUNNING_FILTER_IDX_SESSION_CTX_KEY), \"runningFilterIndex\");",
                    "message": " (Covered) passing @Nullable parameter 'ctx.get(RUNNING_FILTER_IDX_SESSION_CTX_KEY)' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/zuul/blob/docker/zuul-core/src/main/java/com/netflix/zuul/netty/filter/BaseZuulFilterRunner.java#L218",
                    "position": "resumer = new FilterChainResumer(inMesg, filter, snapshot, startTime);",
                    "message": " (Covered) passing @Nullable parameter 'snapshot' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/zuul/blob/docker/zuul-core/src/main/java/com/netflix/zuul/netty/filter/BaseZuulFilterRunner.java#L281",
                    "position": "zuulCtx.getFilterErrors().add(new FilterError(filter.filterName(), filter.filterType().toString(), t));",
                    "message": " dereferenced expression zuulCtx.getFilterErrors() is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/zuul/blob/docker/zuul-core/src/main/java/com/netflix/zuul/netty/filter/ZuulEndPointRunner.java#L121",
                    "position": "ZuulFilter<HttpRequestMessage, HttpResponseMessage> endpoint = Preconditions.checkNotNull(getEndpoint(zuulReq), \"endpoint\");",
                    "message": " (Covered) passing @Nullable parameter 'getEndpoint(zuulReq)' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/zuul/blob/docker/zuul-core/src/main/java/com/netflix/zuul/netty/filter/ZuulEndPointRunner.java#L133",
                    "position": "invokeNextStage(filter(endpoint, zuulReq));",
                    "message": " (Covered) passing @Nullable parameter 'filter(endpoint, zuulReq)' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/zuul/blob/docker/zuul-core/src/main/java/com/netflix/zuul/netty/filter/ZuulEndPointRunner.java#L148",
                    "position": "return zuulCtx.getEndpoint();",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/zuul/blob/docker/zuul-core/src/main/java/com/netflix/zuul/netty/filter/ZuulEndPointRunner.java#L190",
                    "position": "resp.finishBufferedBodyIfIncomplete();",
                    "message": " dereferenced expression resp is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/zuul/blob/docker/zuul-core/src/main/java/com/netflix/zuul/context/ZuulSessionContextDecorator.java#L50",
                    "position": "public SessionContext decorate(SessionContext ctx) {",
                    "message": " (Covered) method returns @Nullable, but superclass method com.netflix.zuul.context.SessionContextDecorator.decorate(com.netflix.zuul.context.SessionContext) returns @NonNull"
                },
                {
                    "url": "https://github.com/nimakarimipour/zuul/blob/docker/zuul-core/src/main/java/com/netflix/zuul/plugins/Tracer.java#L73",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/zuul/blob/docker/zuul-core/src/main/java/com/netflix/zuul/message/http/HttpRequestMessageImpl.java#L416",
                    "position": "public HttpRequestInfo getInboundRequest() {",
                    "message": " (Covered) method returns @Nullable, but superclass method com.netflix.zuul.message.http.HttpRequestMessage.getInboundRequest() returns @NonNull"
                },
                {
                    "url": "https://github.com/nimakarimipour/zuul/blob/docker/zuul-core/src/main/java/com/netflix/zuul/message/ZuulMessageImpl.java#L143",
                    "position": "public String getBodyAsText() {",
                    "message": " (Covered) method returns @Nullable, but superclass method com.netflix.zuul.message.ZuulMessage.getBodyAsText() returns @NonNull"
                },
                {
                    "url": "https://github.com/nimakarimipour/zuul/blob/docker/zuul-core/src/main/java/com/netflix/zuul/message/ZuulMessageImpl.java#L150",
                    "position": "public byte[] getBody() {",
                    "message": " (Covered) method returns @Nullable, but superclass method com.netflix.zuul.message.ZuulMessage.getBody() returns @NonNull"
                },
                {
                    "url": "https://github.com/nimakarimipour/zuul/blob/docker/zuul-core/src/main/java/com/netflix/zuul/netty/insights/PassportStateListener.java#L34",
                    "position": "this.failState = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/zuul/blob/docker/zuul-core/src/main/java/com/netflix/zuul/netty/insights/PassportStateServerHandler.java#L57",
                    "position": "registry.counter(\"server.connection.exception\", \"handler\", handler, \"id\", throwable.getClass().getSimpleName()).increment();",
                    "message": " dereferenced expression registry is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/zuul/blob/docker/zuul-core/src/main/java/com/netflix/zuul/netty/server/ssl/SslHandshakeInfoHandler.java#L65",
                    "position": "spectatorRegistry = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/zuul/blob/docker/zuul-core/src/main/java/com/netflix/zuul/netty/server/ssl/SslHandshakeInfoHandler.java#L87",
                    "position": "SslHandshakeInfo info = new SslHandshakeInfo(isSSlFromIntermediary, session.getProtocol(), session.getCipherSuite(), clientAuth, serverCert, peerCert);",
                    "message": " (Covered) passing @Nullable parameter 'serverCert' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/zuul/blob/docker/zuul-core/src/main/java/com/netflix/zuul/netty/server/ssl/SslHandshakeInfoHandler.java#L107",
                    "position": "} else if (cause instanceof SSLException && cause.getMessage().contains(\"handshake timed out\")) {",
                    "message": " dereferenced expression cause.getMessage() is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/zuul/blob/docker/zuul-core/src/main/java/com/netflix/zuul/netty/server/ssl/SslHandshakeInfoHandler.java#L109",
                    "position": "} else if (cause instanceof SSLException && cause.getMessage().contains(\"failure when writing TLS control frames\")) {",
                    "message": " dereferenced expression cause.getMessage() is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/zuul/blob/docker/zuul-core/src/main/java/com/netflix/zuul/netty/server/ssl/SslHandshakeInfoHandler.java#L137",
                    "position": "spectatorRegistry.counter(\"zuul.sni.parse.failure\", cause != null ? cause.getMessage() : \"UNKNOWN\").increment();",
                    "message": " (Covered) passing @Nullable parameter 'cause != null ? cause.getMessage() : \"UNKNOWN\"' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/zuul/blob/docker/zuul-core/src/main/java/com/netflix/zuul/netty/server/ssl/SslHandshakeInfoHandler.java#L162",
                    "position": "String proto = handshakeInfo.getProtocol().length() > 0 ? handshakeInfo.getProtocol() : \"unknown\";",
                    "message": " dereferenced expression handshakeInfo is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/zuul/blob/docker/zuul-core/src/main/java/com/netflix/zuul/netty/server/SocketAddressProperty.java#L91",
                    "position": "addressSupplier = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/zuul/blob/docker/zuul-core/src/main/java/com/netflix/zuul/netty/server/ClientResponseWriter.java#L192",
                    "position": "if (nativeReq.headers().contains(HttpConversionUtil.ExtensionHeaderNames.STREAM_ID.text())) {",
                    "message": " dereferenced expression nativeReq is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/zuul/blob/docker/zuul-core/src/main/java/com/netflix/zuul/netty/server/DirectMemoryMonitor.java#L45",
                    "position": "private static final Supplier<Long> directMemoryLimitGetter;",
                    "message": " (Covered) @NonNull static field directMemoryLimitGetter not initialized"
                },
                {
                    "url": "https://github.com/nimakarimipour/zuul/blob/docker/zuul-core/src/main/java/com/netflix/zuul/netty/server/DirectMemoryMonitor.java#L46",
                    "position": "private static final Supplier<Long> reservedMemoryGetter;",
                    "message": " (Covered) @NonNull static field reservedMemoryGetter not initialized"
                },
                {
                    "url": "https://github.com/nimakarimipour/zuul/blob/docker/zuul-core/src/main/java/com/netflix/zuul/netty/server/DirectMemoryMonitor.java#L85",
                    "position": "directMemoryLimitGetter = directMemoryLimit;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/zuul/blob/docker/zuul-core/src/main/java/com/netflix/zuul/netty/server/DirectMemoryMonitor.java#L86",
                    "position": "reservedMemoryGetter = reservedMemory;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/zuul/blob/docker/zuul-core/src/main/java/com/netflix/zuul/netty/server/BaseServerStartup.java#L177",
                    "position": "Boolean value = new ChainedDynamicProperty.DynamicBooleanPropertyThatSupportsNull(listenAddressPropertyName, null).get();",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/zuul/blob/docker/zuul-core/src/main/java/com/netflix/zuul/netty/connectionpool/DefaultClientChannelManager.java#L122",
                    "position": "public DefaultClientChannelManager(String originName, String vip, IClientConfig clientConfig, Registry spectatorRegistry) {",
                    "message": " (Covered) initializer method does not guarantee @NonNull fields clientConnFactory (line 116), channelInitializer (line 118) are initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/zuul/blob/docker/zuul-core/src/main/java/com/netflix/zuul/netty/connectionpool/DefaultClientChannelManager.java#L316",
                    "position": "final Server chosenServer = loadBalancer.chooseServer(key);",
                    "message": " (Covered) passing @Nullable parameter 'key' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/zuul/blob/docker/zuul-core/src/main/java/com/netflix/zuul/netty/connectionpool/DefaultClientChannelManager.java#L377",
                    "position": "null, /* appGroupName= */",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/zuul/blob/docker/zuul-core/src/main/java/com/netflix/zuul/netty/filter/ZuulFilterChainHandler.java#L135",
                    "position": "zuulRequest = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/zuul/blob/docker/zuul-core/src/main/java/com/netflix/zuul/passport/CurrentPassport.java#L119",
                    "position": "return (CurrentPassport) ctx.get(CommonContextKeys.PASSPORT);",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/zuul/blob/docker/zuul-core/src/main/java/com/netflix/zuul/origins/BasicNettyOrigin.java#L173",
                    "position": "final ExecutionContext<?> context = new ExecutionContext<>(zuulRequest, overriddenClientConfig, this.config, null);",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/zuul/blob/docker/zuul-core/src/main/java/com/netflix/zuul/stats/status/StatusCategoryUtils.java#L42",
                    "position": "return (StatusCategory) ctx.get(CommonContextKeys.STATUS_CATGEORY);",
                    "message": " dereferenced expression ctx is @Nullable"
                }
            ],
            "size": 70
        },
        "SpringBoot": {
            "errors": [
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/ansi/AnsiColors.java#L127",
                    "position": "float[] lab = fromXyz(color.getColorComponents(XYZ_COLOR_SPACE, null));",
                    "message": " dereferenced expression color is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/jta/bitronix/PoolingDataSourceBean.java#L56",
                    "position": "public PoolingDataSourceBean() {",
                    "message": " (Covered) initializer method does not guarantee @NonNull field dataSource (line 51) is initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/jta/bitronix/PoolingConnectionFactoryBean.java#L55",
                    "position": "public PoolingConnectionFactoryBean() {",
                    "message": " (Covered) initializer method does not guarantee @NonNull field connectionFactory (line 53) is initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#L276",
                    "position": "public SpringApplication(@Nullable() ResourceLoader resourceLoader, Class<?>... primarySources) {",
                    "message": " (Covered) initializer method does not guarantee @NonNull fields mainApplicationClass (line 204), banner (line 214), initializers (line 231), listeners (line 233), defaultProperties (line 235) are initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#L284",
                    "position": "this.mainApplicationClass = deduceMainApplicationClass();",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#L333",
                    "position": "handleRunFailure(context, ex, listeners);",
                    "message": " (Covered) passing @Nullable parameter 'context' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#L685",
                    "position": "return this.resourceLoader;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/DefaultBootstrapContext.java#L122",
                    "position": "return instance;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/BeanDefinitionLoader.java#L88",
                    "position": "this.xmlReader = (XML_ENABLED ? new XmlBeanDefinitionReader(registry) : null);",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/BeanDefinitionLoader.java#L89",
                    "position": "this.groovyReader = (isGroovyPresent() ? new GroovyBeanDefinitionReader(registry) : null);",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/webservices/client/WebServiceTemplateBuilder.java#L81",
                    "position": "this.interceptors = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/webservices/client/WebServiceTemplateBuilder.java#L82",
                    "position": "this.internalCustomizers = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/webservices/client/WebServiceTemplateBuilder.java#L85",
                    "position": "this.marshaller = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/webservices/client/WebServiceTemplateBuilder.java#L86",
                    "position": "this.unmarshaller = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/webservices/client/WebServiceTemplateBuilder.java#L87",
                    "position": "this.destinationProvider = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/webservices/client/WebServiceTemplateBuilder.java#L88",
                    "position": "this.transformerFactoryClass = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/webservices/client/WebServiceTemplateBuilder.java#L89",
                    "position": "this.messageFactory = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/metrics/buffering/BufferingApplicationStartup.java#L68",
                    "position": "public BufferingApplicationStartup(int capacity) {",
                    "message": " (Covered) initializer method does not guarantee @NonNull field recordingStartTime (line 51) is initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/origin/Origin.java#L71",
                    "position": "return origin;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributor.java#L237",
                    "position": "return new ConfigDataEnvironmentContributor(Kind.ROOT, null, null, null, null, false, children);",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributor.java#L250",
                    "position": "return new ConfigDataEnvironmentContributor(Kind.INITIAL_IMPORT, null, null, null, properties, false, null);",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributor.java#L261",
                    "position": "return new ConfigDataEnvironmentContributor(Kind.EXISTING, null, propertySource, ConfigurationPropertySource.from(propertySource), null, false, null);",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributor.java#L277",
                    "position": "return new ConfigDataEnvironmentContributor(Kind.UNBOUND_IMPORT, resource, propertySource, configurationPropertySource, null, ignoreImports, null);",
                    "message": " (Covered) passing @Nullable parameter 'configurationPropertySource' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java#L277",
                    "position": "int result = compare(e1, type1, e2, type2);",
                    "message": " (Covered) passing @Nullable parameter 'type1' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java#L534",
                    "position": "return (elements != null) ? new ConfigurationPropertyName(elements) : null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java#L614",
                    "position": "Elements elements = new ElementsParser(name, separator).parse(elementValueProcessor);",
                    "message": " (Covered) passing @Nullable parameter 'elementValueProcessor' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java#L700",
                    "position": "this.resolved = resolved;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java#L704",
                    "position": "int size = this.size + additional.size;",
                    "message": " dereferenced expression additional is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java#L835",
                    "position": "return parse(null);",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertySource.java#L82",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataProperties.java#L63",
                    "position": "this.activate = activate;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataProperties.java#L94",
                    "position": "throw new InvalidConfigDataPropertyException(property, NAME.append(\"activate.on-profile\"), null);",
                    "message": " (Covered) passing @Nullable parameter 'property' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataProperties.java#L151",
                    "position": "this.onCloudPlatform = onCloudPlatform;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataActivationContext.java#L44",
                    "position": "this.profiles = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataLocation.java#L52",
                    "position": "this.origin = origin;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/Binder.java#L157",
                    "position": "this.propertyEditorInitializer = propertyEditorInitializer;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/Binder.java#L609",
                    "position": "return this.configurationProperty;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/BindResult.java#L42",
                    "position": "this.value = value;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/BindResult.java#L100",
                    "position": "return (this.value != null) ? this.value : other;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/Bindable.java#L55",
                    "position": "this.value = value;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/origin/OriginTrackedValue.java#L74",
                    "position": "return of(value, null);",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/origin/OriginTrackedValue.java#L88",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/AggregateElementBinder.java#L39",
                    "position": "return bind(name, target, null);",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/BindConverter.java#L86",
                    "position": "return convert(result, target.getType(), target.getAnnotations());",
                    "message": " (Covered) passing @Nullable parameter 'result' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/BindConverter.java#L92",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/cloud/CloudPlatform.java#L195",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataLoaders.java#L117",
                    "position": "return result;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataResourceNotFoundException.java#L53",
                    "position": "this(resource, null, cause);",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/event/ApplicationEnvironmentPreparedEvent.java#L60",
                    "position": "this.bootstrapContext = bootstrapContext;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributorPlaceholdersResolver.java#L68",
                    "position": "throw new InactiveConfigDataAccessException(propertySource, resource, placeholder, origin);",
                    "message": " (Covered) passing @Nullable parameter 'origin' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironment.java#L216",
                    "position": ".from(() -> this.contributors.getBinder(null, BinderOption.FAIL_ON_BIND_TO_INACTIVE_SOURCE)));",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironment.java#L218",
                    "position": "Binder initialBinder = contributors.getBinder(null, BinderOption.FAIL_ON_BIND_TO_INACTIVE_SOURCE);",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironment.java#L230",
                    "position": "return contributors.withProcessedImports(importer, null);",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/config/StandardConfigDataLocationResolver.java#L59",
                    "position": "private static final String NO_PROFILE = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/config/StandardConfigDataLocationResolver.java#L180",
                    "position": "StandardConfigDataReference reference = new StandardConfigDataReference(configDataLocation, null, root, profile, (!extensionHintLocation) ? extension : null, propertySourceLoader);",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigFileApplicationListener.java#L184",
                    "position": "ConfigFileApplicationListener(Log logger) {",
                    "message": " (Covered) initializer method does not guarantee @NonNull fields searchLocations (line 174), names (line 176) are initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigFileApplicationListener.java#L307",
                    "position": "Loader(ConfigurableEnvironment environment, ResourceLoader resourceLoader) {",
                    "message": " (Covered) initializer method does not guarantee @NonNull fields profiles (line 297), processedProfiles (line 299), loaded (line 303) are initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigFileApplicationListener.java#L345",
                    "position": "this.profiles.add(null);",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigFileApplicationListener.java#L419",
                    "position": "String nonOptionalLocation = ConfigDataLocation.of(location).getValue();",
                    "message": " dereferenced expression ConfigDataLocation.of(location) is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigFileApplicationListener.java#L422",
                    "position": "names.forEach((name) -> load(nonOptionalLocation, name, profile, filterFactory, consumer));",
                    "message": " (Covered) passing @Nullable parameter 'profile' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigFileApplicationListener.java#L451",
                    "position": "DocumentFilter defaultFilter = filterFactory.getDocumentFilter(null);",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/AbstractBindHandler.java#L65",
                    "position": "public void onFinish(ConfigurationPropertyName name, Bindable<?> target, BindContext context, Object result) throws Exception {",
                    "message": " (Covered) parameter result is @NonNull, but parameter in superclass method org.springframework.boot.context.properties.bind.BindHandler.onFinish(org.springframework.boot.context.properties.source.ConfigurationPropertyName,org.springframework.boot.context.properties.bind.Bindable<?>,org.springframework.boot.context.properties.bind.BindContext,java.lang.Object) is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironmentPostProcessor.java#L111",
                    "position": "applyTo(environment, null, null, Collections.emptyList());",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/diagnostics/AbstractFailureAnalyzer.java#L69",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/diagnostics/FailureAnalysis.java#L43",
                    "position": "this.description = description;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/diagnostics/FailureAnalysis.java#L44",
                    "position": "this.action = action;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/env/ConfigTreePropertySource.java#L185",
                    "position": "this.cachedContent = options.contains(Option.ALWAYS_READ) ? null : new PropertyFileContent(path, this.resource, this.origin, true, this.autoTrimTrailingNewLine);",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesBean.java#L196",
                    "position": "return create(beanName, bean, bean.getClass(), factoryMethod);",
                    "message": " (Covered) passing @Nullable parameter 'factoryMethod' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesBean.java#L248",
                    "position": "ConfigurationPropertiesBean propertiesBean = create(beanName, null, beanClass, null);",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesBean.java#L256",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/source/AliasedConfigurationPropertySource.java#L47",
                    "position": "result = getSource().getConfigurationProperty(aliasedName);",
                    "message": " (Covered) passing @Nullable parameter 'aliasedName' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/source/SpringIterableConfigurationPropertySource.java#L203",
                    "position": "Mappings(PropertyMapper[] mappers, boolean immutable, boolean trackDescendants) {",
                    "message": " (Covered) initializer method does not guarantee @NonNull fields mappings (line 191), reverseMappings (line 193), descendants (line 195) are initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesBindConstructorProvider.java#L75",
                    "position": "return constructor;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesBindingPostProcessor.java#L51",
                    "position": "private ApplicationContext applicationContext;",
                    "message": " (Covered) @NonNull field applicationContext not initialized"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesBindingPostProcessor.java#L89",
                    "position": "this.binder.bind(bean);",
                    "message": " dereferenced expression this.binder is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesBindingPostProcessor.java#L96",
                    "position": "return this.registry.containsBeanDefinition(beanName) && this.registry.getBeanDefinition(beanName) instanceof ConfigurationPropertiesValueObjectBeanDefinition;",
                    "message": " dereferenced expression this.registry is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesBinder.java#L83",
                    "position": "this.propertySources = new PropertySourcesDeducer(applicationContext).getPropertySources();",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesBinder.java#L84",
                    "position": "this.configurationPropertiesValidator = getConfigurationPropertiesValidator(applicationContext);",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesBinder.java#L220",
                    "position": "return new ConfigurationPropertiesBinder(this.applicationContext);",
                    "message": " (Covered) passing @Nullable parameter 'this.applicationContext' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/handler/IgnoreTopLevelConverterNotFoundBindHandler.java#L52",
                    "position": "public Object onFailure(ConfigurationPropertyName name, Bindable<?> target, BindContext context, Exception error) throws Exception {",
                    "message": " (Covered) method returns @Nullable, but superclass method org.springframework.boot.context.properties.bind.AbstractBindHandler.onFailure(org.springframework.boot.context.properties.source.ConfigurationPropertyName,org.springframework.boot.context.properties.bind.Bindable<?>,org.springframework.boot.context.properties.bind.BindContext,java.lang.Exception) returns @NonNull"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/handler/IgnoreErrorsBindHandler.java#L43",
                    "position": "public Object onFailure(ConfigurationPropertyName name, Bindable<?> target, BindContext context, Exception error) throws Exception {",
                    "message": " (Covered) method returns @Nullable, but superclass method org.springframework.boot.context.properties.bind.AbstractBindHandler.onFailure(org.springframework.boot.context.properties.source.ConfigurationPropertyName,org.springframework.boot.context.properties.bind.Bindable<?>,org.springframework.boot.context.properties.bind.BindContext,java.lang.Exception) returns @NonNull"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/JavaBeanBinder.java#L90",
                    "position": "Object bound = propertyBinder.bindProperty(propertyName, Bindable.of(type).withSuppliedValue(value).withAnnotations(annotations));",
                    "message": " (Covered) passing @Nullable parameter 'annotations' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/JavaBeanBinder.java#L272",
                    "position": "BeanProperty(String name, ResolvableType declaringClassType) {",
                    "message": " (Covered) initializer method does not guarantee @NonNull fields getter (line 265), setter (line 267) are initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/NotConstructorBoundInjectionFailureAnalyzer.java#L69",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/PropertyMapper.java#L59",
                    "position": "private static final PropertyMapper INSTANCE = new PropertyMapper(null, null);",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/event/ApplicationStartingEvent.java#L61",
                    "position": "this.bootstrapContext = bootstrapContext;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/logging/LoggingApplicationListener.java#L173",
                    "position": "private LoggingSystem loggingSystem;",
                    "message": " (Covered) @NonNull field loggingSystem not initialized"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/logging/LoggingApplicationListener.java#L275",
                    "position": "initializeSystem(environment, this.loggingSystem, this.logFile);",
                    "message": " (Covered) passing @Nullable parameter 'this.logFile' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/logging/LoggingApplicationListener.java#L382",
                    "position": "system.setLogLevel(name, level);",
                    "message": " (Covered) passing @Nullable parameter 'name' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/logging/LoggingSystem.java#L162",
                    "position": "return loggingSystem;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/logging/LogFile.java#L73",
                    "position": "this.path = path;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/logging/LoggerConfiguration.java#L46",
                    "position": "this.configuredLevel = configuredLevel;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/util/LambdaSafe.java#L46",
                    "position": "private static final Method MODULE_GET_NAME;",
                    "message": " (Covered) @NonNull static field MODULE_GET_NAME not initialized"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/util/LambdaSafe.java#L50",
                    "position": "MODULE_GET_NAME = (CLASS_GET_MODULE != null) ? ReflectionUtils.findMethod(CLASS_GET_MODULE.getReturnType(), \"getName\") : null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/util/LambdaSafe.java#L354",
                    "position": "this.value = value;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/ResourceBanner.java#L101",
                    "position": "return (sourcePackage != null) ? sourcePackage.getImplementationVersion() : null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/ResourceBanner.java#L105",
                    "position": "return SpringBootVersion.getVersion();",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/ServletComponentHandler.java#L54",
                    "position": "if (urlPatterns.length > 0) {",
                    "message": " dereferenced expression urlPatterns is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/ServletComponentHandler.java#L55",
                    "position": "Assert.state(value.length == 0, \"The urlPatterns and value attributes are mutually exclusive.\");",
                    "message": " dereferenced expression value is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/ServletComponentHandler.java#L63",
                    "position": "for (AnnotationAttributes initParam : (AnnotationAttributes[]) attributes.get(\"initParams\")) {",
                    "message": " enhanced-for expression (AnnotationAttributes[]) attributes.get(\"initParams\") is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/ServletContextInitializerBeans.java#L248",
                    "position": "this.multipartConfig = multipartConfig;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/ServletRegistrationBean.java#L67",
                    "position": "public ServletRegistrationBean() {",
                    "message": " (Covered) initializer method does not guarantee @NonNull field servlet (line 53) is initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/context/ServletWebServerApplicationContext.java#L114",
                    "position": "public ServletWebServerApplicationContext() {",
                    "message": " (Covered) initializer method does not guarantee @NonNull fields webServer (line 105), servletConfig (line 107), serverNamespace (line 109) are initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/context/ServletWebServerApplicationContext.java#L122",
                    "position": "public ServletWebServerApplicationContext(DefaultListableBeanFactory beanFactory) {",
                    "message": " (Covered) initializer method does not guarantee @NonNull fields webServer (line 105), servletConfig (line 107), serverNamespace (line 109) are initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/ServletComponentRegisteringPostProcessor.java#L58",
                    "position": "ServletComponentRegisteringPostProcessor(Set<String> packagesToScan) {",
                    "message": " (Covered) initializer method does not guarantee @NonNull field applicationContext (line 56) is initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/server/ErrorPage.java#L38",
                    "position": "this.status = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/server/ErrorPage.java#L39",
                    "position": "this.exception = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/server/ErrorPage.java#L45",
                    "position": "this.exception = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/server/ErrorPage.java#L50",
                    "position": "this.status = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/server/Ssl.java#L130",
                    "position": "return this.keyAlias;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/server/Ssl.java#L156",
                    "position": "return this.keyStore;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/server/Ssl.java#L168",
                    "position": "return this.keyStorePassword;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/server/Ssl.java#L180",
                    "position": "return this.keyStoreType;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/server/Ssl.java#L192",
                    "position": "return this.keyStoreProvider;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/server/Ssl.java#L204",
                    "position": "return this.trustStore;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/server/Ssl.java#L216",
                    "position": "return this.trustStorePassword;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/server/Ssl.java#L228",
                    "position": "return this.trustStoreType;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/server/Ssl.java#L240",
                    "position": "return this.trustStoreProvider;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/server/AbstractConfigurableWebServerFactory.java#L63",
                    "position": "public AbstractConfigurableWebServerFactory() {",
                    "message": " (Covered) initializer method does not guarantee @NonNull fields address (line 44), ssl (line 48), sslStoreProvider (line 50), http2 (line 52), compression (line 54), serverHeader (line 56) are initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/server/AbstractConfigurableWebServerFactory.java#L71",
                    "position": "public AbstractConfigurableWebServerFactory(int port) {",
                    "message": " (Covered) initializer method does not guarantee @NonNull fields address (line 44), ssl (line 48), sslStoreProvider (line 50), http2 (line 52), compression (line 54), serverHeader (line 56) are initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/FilterRegistrationBean.java#L67",
                    "position": "public T getFilter() {",
                    "message": " (Covered) method returns @Nullable, but superclass method org.springframework.boot.web.servlet.AbstractFilterRegistrationBean.getFilter() returns @NonNull"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/support/SpringBootServletInitializer.java#L128",
                    "position": "this.logger.info(\"Root context already created (using as parent).\");",
                    "message": " dereferenced expression this.logger is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/builder/SpringApplicationBuilder.java#L96",
                    "position": "public SpringApplicationBuilder(Class<?>... sources) {",
                    "message": " (Covered) initializer method does not guarantee @NonNull fields context (line 77), environment (line 88) are initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/support/ErrorPageFilter.java#L87",
                    "position": "private String global;",
                    "message": " (Covered) @NonNull field global not initialized"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/view/MustacheView.java#L84",
                    "position": "return this.compiler.compile(reader);",
                    "message": " dereferenced expression this.compiler is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/error/DefaultErrorAttributes.java#L77",
                    "position": "this.includeException = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/WebFilterHandler.java#L57",
                    "position": "if (dispatcherTypes.length == 0) {",
                    "message": " dereferenced expression dispatcherTypes is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/reactive/result/view/MustacheView.java#L85",
                    "position": "Template template = this.compiler.compile(reader);",
                    "message": " dereferenced expression this.compiler is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/reactive/error/DefaultErrorAttributes.java#L71",
                    "position": "this.includeException = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/server/WebServerFactoryCustomizerBeanPostProcessor.java#L85",
                    "position": "return (Collection) this.beanFactory.getBeansOfType(WebServerFactoryCustomizer.class, false, false).values();",
                    "message": " dereferenced expression this.beanFactory is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/server/ErrorPageRegistrarBeanPostProcessor.java#L75",
                    "position": "this.registrars = new ArrayList<>(this.beanFactory.getBeansOfType(ErrorPageRegistrar.class, false, false).values());",
                    "message": " dereferenced expression this.beanFactory is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/server/PortInUseException.java#L84",
                    "position": "if (bindException.getMessage().toLowerCase().contains(\"in use\")) {",
                    "message": " dereferenced expression bindException.getMessage() is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/client/RootUriTemplateHandler.java#L42",
                    "position": "this.rootUri = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/client/RestTemplateBuilder.java#L107",
                    "position": "this.rootUri = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/client/RestTemplateBuilder.java#L108",
                    "position": "this.messageConverters = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/client/RestTemplateBuilder.java#L110",
                    "position": "this.requestFactory = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/client/RestTemplateBuilder.java#L111",
                    "position": "this.uriTemplateHandler = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/client/RestTemplateBuilder.java#L112",
                    "position": "this.errorHandler = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/client/RestTemplateBuilder.java#L113",
                    "position": "this.basicAuthentication = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/client/RestTemplateBuilder.java#L645",
                    "position": "this(null, null, null);",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/client/BasicAuthentication.java#L42",
                    "position": "this.charset = charset;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/tomcat/TomcatWebServer.java#L103",
                    "position": "this.gracefulShutdown = (shutdown == Shutdown.GRACEFUL) ? new GracefulShutdown(tomcat) : null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/jetty/JasperInitializer.java#L47",
                    "position": "this.initializer = newInitializer();",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/jetty/JettyWebServer.java#L89",
                    "position": "this.gracefulShutdown = createGracefulShutdown(server);",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/jetty/JettyReactiveWebServerFactory.java#L79",
                    "position": "public JettyReactiveWebServerFactory() {",
                    "message": " (Covered) initializer method does not guarantee @NonNull fields resourceFactory (line 72), threadPool (line 74) are initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/jetty/JettyReactiveWebServerFactory.java#L87",
                    "position": "public JettyReactiveWebServerFactory(int port) {",
                    "message": " (Covered) initializer method does not guarantee @NonNull fields resourceFactory (line 72), threadPool (line 74) are initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/netty/SslServerCustomizer.java#L67",
                    "position": "this.http2 = http2;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/netty/SslServerCustomizer.java#L68",
                    "position": "this.sslStoreProvider = sslStoreProvider;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/netty/NettyWebServer.java#L85",
                    "position": "this.gracefulShutdown = (shutdown == Shutdown.GRACEFUL) ? new GracefulShutdown(() -> this.disposableServer) : null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/netty/GracefulShutdown.java#L78",
                    "position": "this.shutdownThread.interrupt();",
                    "message": " dereferenced expression this.shutdownThread is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/netty/NettyReactiveWebServerFactory.java#L60",
                    "position": "public NettyReactiveWebServerFactory() {",
                    "message": " (Covered) initializer method does not guarantee @NonNull fields lifecycleTimeout (line 51), shutdown (line 58) are initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/netty/NettyReactiveWebServerFactory.java#L63",
                    "position": "public NettyReactiveWebServerFactory(int port) {",
                    "message": " (Covered) initializer method does not guarantee @NonNull fields lifecycleTimeout (line 51), shutdown (line 58) are initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/undertow/UndertowWebServerFactoryDelegate.java#L187",
                    "position": "factories.add(new AccessLogHttpHandlerFactory(this.accessLogDirectory, this.accessLogPattern, this.accessLogPrefix, this.accessLogSuffix, this.accessLogRotate));",
                    "message": " (Covered) passing @Nullable parameter 'this.accessLogDirectory' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/undertow/UndertowServletWebServer.java#L91",
                    "position": "this(builder, UndertowWebServerFactoryDelegate.createHttpHandlerFactories(compression, useForwardHeaders, serverHeader, null, new DeploymentManagerHttpHandlerFactory(manager)), contextPath, autoStart);",
                    "message": " (Covered) passing @Nullable parameter 'serverHeader' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/undertow/UndertowServletWebServer.java#L105",
                    "position": "this.manager = findManager(httpHandlerFactories);",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/undertow/UndertowWebServer.java#L109",
                    "position": "public UndertowWebServer(Undertow.Builder builder, Iterable<HttpHandlerFactory> httpHandlerFactories, boolean autoStart) {",
                    "message": " (Covered) initializer method does not guarantee @NonNull fields undertow (line 70), closeables (line 77) are initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/undertow/UndertowWebServer.java#L179",
                    "position": "handler = factory.getHandler(handler);",
                    "message": " (Covered) passing @Nullable parameter 'handler' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/undertow/UndertowWebServer.java#L376",
                    "position": "this.closeable = closeable;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/admin/SpringApplicationAdminMXBeanRegistrar.java#L64",
                    "position": "public SpringApplicationAdminMXBeanRegistrar(String name) throws MalformedObjectNameException {",
                    "message": " (Covered) initializer method does not guarantee @NonNull field applicationContext (line 54) is initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/jdbc/DataSourceBuilder.java#L69",
                    "position": "this.settingsResolver = new DataSourceSettingsResolver(classLoader);",
                    "message": " (Covered) passing @Nullable parameter 'classLoader' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/jdbc/DataSourceBuilder.java#L191",
                    "position": "this.preferredDataSourceSettings = (!supportedProviders.isEmpty()) ? supportedProviders.get(0) : null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/jdbc/DataSourceBuilder.java#L225",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/jdbc/EmbeddedDatabaseConnection.java#L47",
                    "position": "NONE(null, null, null, (url) -> false),",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/jdbc/EmbeddedDatabaseConnection.java#L79",
                    "position": "this(type, driverClass, null, url, embeddedUrl);",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/jdbc/EmbeddedDatabaseConnection.java#L113",
                    "position": "return (this.url != null) ? String.format(this.url, databaseName) : null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/jdbc/EmbeddedDatabaseConnection.java#L133",
                    "position": "return isEmbedded(driverClass, null);",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/jdbc/DatabaseDriver.java#L39",
                    "position": "UNKNOWN(null, null),",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/jdbc/DatabaseDriver.java#L74",
                    "position": "GAE(null, \"com.google.appengine.api.rdbms.AppEngineDriver\"),",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/jdbc/DatabaseDriver.java#L87",
                    "position": "REDSHIFT(\"Amazon Redshift\", \"com.amazon.redshift.jdbc.Driver\", null, \"SELECT 1\"),",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/jdbc/DatabaseDriver.java#L104",
                    "position": "JTDS(null, \"net.sourceforge.jtds.jdbc.Driver\"),",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/jdbc/DatabaseDriver.java#L171",
                    "position": "INFORMIX(\"Informix Dynamic Server\", \"com.informix.jdbc.IfxDriver\", null, \"select count(*) from systables\") {",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/jdbc/DatabaseDriver.java#L182",
                    "position": "TESTCONTAINERS(null, \"org.testcontainers.jdbc.ContainerDatabaseDriver\") {",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/jdbc/DatabaseDriver.java#L200",
                    "position": "this(productName, driverClassName, null);",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/jdbc/DatabaseDriver.java#L204",
                    "position": "this(productName, driverClassName, xaDataSourceClassName, null);",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/logging/DeferredLog.java#L47",
                    "position": "this.destinationSupplier = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/logging/DeferredLog.java#L298",
                    "position": "this.throwable = throwable;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/info/InfoProperties.java#L71",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/rsocket/context/RSocketServerBootstrap.java#L53",
                    "position": "this.eventPublisher.publishEvent(new RSocketServerInitializedEvent(this.server));",
                    "message": " dereferenced expression this.eventPublisher is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/rsocket/netty/NettyRSocketServer.java#L50",
                    "position": "this.lifecycleTimeout = lifecycleTimeout;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/rsocket/netty/NettyRSocketServer.java#L58",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/system/ApplicationHome.java#L100",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/system/ApplicationTemp.java#L53",
                    "position": "this.sourceClass = sourceClass;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/system/SystemProperties.java#L41",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/system/ApplicationPid.java#L43",
                    "position": "this.pid = getPid();",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/task/TaskSchedulerBuilder.java#L54",
                    "position": "this.poolSize = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/task/TaskSchedulerBuilder.java#L55",
                    "position": "this.awaitTermination = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/task/TaskSchedulerBuilder.java#L56",
                    "position": "this.awaitTerminationPeriod = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/task/TaskSchedulerBuilder.java#L57",
                    "position": "this.threadNamePrefix = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/task/TaskSchedulerBuilder.java#L58",
                    "position": "this.customizers = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/task/TaskExecutorBuilder.java#L68",
                    "position": "this.queueCapacity = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/task/TaskExecutorBuilder.java#L69",
                    "position": "this.corePoolSize = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/task/TaskExecutorBuilder.java#L70",
                    "position": "this.maxPoolSize = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/task/TaskExecutorBuilder.java#L71",
                    "position": "this.allowCoreThreadTimeOut = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/task/TaskExecutorBuilder.java#L72",
                    "position": "this.keepAlive = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/task/TaskExecutorBuilder.java#L73",
                    "position": "this.awaitTermination = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/task/TaskExecutorBuilder.java#L74",
                    "position": "this.awaitTerminationPeriod = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/task/TaskExecutorBuilder.java#L75",
                    "position": "this.threadNamePrefix = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/task/TaskExecutorBuilder.java#L76",
                    "position": "this.taskDecorator = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/task/TaskExecutorBuilder.java#L77",
                    "position": "this.customizers = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/diagnostics/FailureAnalyzers.java#L66",
                    "position": "return (context != null) ? context.getClassLoader() : null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/diagnostics/analyzer/NoUniqueBeanDefinitionFailureAnalyzer.java#L67",
                    "position": "BeanDefinition definition = this.beanFactory.getMergedBeanDefinition(beanName);",
                    "message": " dereferenced expression this.beanFactory is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/diagnostics/analyzer/NoUniqueBeanDefinitionFailureAnalyzer.java#L83",
                    "position": "if (cause.getMessage().contains(\"but found\")) {",
                    "message": " dereferenced expression cause.getMessage() is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/diagnostics/analyzer/ValidationExceptionFailureAnalyzer.java#L39",
                    "position": "if (cause.getMessage().startsWith(JAVAX_MISSING_IMPLEMENTATION_MESSAGE) || cause.getMessage().startsWith(JAKARTA_MISSING_IMPLEMENTATION_MESSAGE)) {",
                    "message": " dereferenced expression cause.getMessage() is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/diagnostics/analyzer/InvalidConfigurationPropertyValueFailureAnalyzer.java#L127",
                    "position": "this.origin = origin;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/diagnostics/analyzer/NoSuchMethodFailureAnalyzer.java#L72",
                    "position": "int loadedFromIndex = message.indexOf(\" (loaded from\");",
                    "message": " dereferenced expression message is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/orm/jpa/hibernate/SpringPhysicalNamingStrategy.java#L61",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/orm/jpa/EntityManagerFactoryBuilder.java#L87",
                    "position": "this.persistenceUnitRootLocation = persistenceUnitRootLocation;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/liquibase/LiquibaseChangelogMissingFailureAnalyzer.java#L47",
                    "position": "return cause.getMessage().substring(\"Error parsing \".length());",
                    "message": " dereferenced expression cause.getMessage() is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/logging/AbstractLoggingSystem.java#L53",
                    "position": "public void initialize(LoggingInitializationContext initializationContext, String configLocation, LogFile logFile) {",
                    "message": " (Covered) parameter configLocation is @NonNull, but parameter in superclass method org.springframework.boot.logging.LoggingSystem.initialize(org.springframework.boot.logging.LoggingInitializationContext,java.lang.String,org.springframework.boot.logging.LogFile) is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/logging/AbstractLoggingSystem.java#L109",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/logging/AbstractLoggingSystem.java#L197",
                    "position": "return this.nativeToSystem.get(level);",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/ColorConverter.java#L81",
                    "position": "this.styling = styling;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/logging/logback/LogbackLoggingSystem.java#L150",
                    "position": "super.loadConfiguration(initializationContext, location, logFile);",
                    "message": " (Covered) passing @Nullable parameter 'logFile' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/logging/logback/SpringProfileAction.java#L51",
                    "position": "SpringProfileAction(Environment environment) {",
                    "message": " (Covered) initializer method does not guarantee @NonNull field events (line 49) is initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/convert/PeriodToStringConverter.java#L60",
                    "position": "return style.print(source, unit);",
                    "message": " (Covered) passing @Nullable parameter 'unit' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/convert/PeriodStyle.java#L140",
                    "position": "return parse(value, null);",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/convert/PeriodStyle.java#L158",
                    "position": "return print(value, null);",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/convert/PeriodStyle.java#L177",
                    "position": "return detectAndParse(value, null);",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/convert/PeriodStyle.java#L218",
                    "position": "WEEKS(ChronoUnit.WEEKS, \"w\", null, Period::ofWeeks),",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/convert/StringToDurationConverter.java#L66",
                    "position": "return style.parse(source, unit);",
                    "message": " (Covered) passing @Nullable parameter 'unit' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/convert/DurationStyle.java#L98",
                    "position": "return parse(value, null);",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/convert/DurationStyle.java#L116",
                    "position": "return print(value, null);",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/convert/DurationStyle.java#L135",
                    "position": "return detectAndParse(value, null);",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/convert/StringToPeriodConverter.java#L67",
                    "position": "return style.parse(source, unit);",
                    "message": " (Covered) passing @Nullable parameter 'unit' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/convert/DurationToNumberConverter.java#L59",
                    "position": "return type.getConstructor(String.class).newInstance(String.valueOf(DurationStyle.Unit.fromChronoUnit(unit).longValue(source)));",
                    "message": " (Covered) passing @Nullable parameter 'unit' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/spring-boot/blob/docker/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/convert/DurationToStringConverter.java#L64",
                    "position": "return style.print(source, unit);",
                    "message": " (Covered) passing @Nullable parameter 'unit' where @NonNull is required"
                }
            ],
            "size": 226
        },
        "Conductor": {
            "errors": [
                {
                    "url": "https://github.com/nimakarimipour/conductor/blob/docker/core/src/main/java/com/netflix/conductor/metrics/WorkflowMonitor.java#L59",
                    "position": "public WorkflowMonitor(MetadataDAO metadataDAO, QueueDAO queueDAO, ExecutionDAOFacade executionDAOFacade, @Value(\"${conductor.workflow-monitor.metadataRefreshInterval:10}\") int metadataRefreshInterval, @Value(\"${conductor.workflow-monitor.statsFrequency:60s}\") Duration statsFrequency, SystemTaskRegistry systemTaskRegistry) {",
                    "message": " (Covered) initializer method does not guarantee @NonNull fields taskDefs (line 53), workflowDefs (line 55) are initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/conductor/blob/docker/core/src/main/java/com/netflix/conductor/core/execution/WorkflowExecutor.java#L209",
                    "position": "return startWorkflow(workflowDefinition, workflowInput, externalInputPayloadStoragePath, correlationId, priority, null, null, event, taskToDomain);",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/conductor/blob/docker/core/src/main/java/com/netflix/conductor/core/execution/WorkflowExecutor.java#L224",
                    "position": "return startWorkflow(workflowDefinition, workflowInput, externalInputPayloadStoragePath, correlationId, priority, parentWorkflowId, parentWorkflowTaskId, event, taskToDomain);",
                    "message": " (Covered) passing @Nullable parameter 'externalInputPayloadStoragePath' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/conductor/blob/docker/core/src/main/java/com/netflix/conductor/core/execution/WorkflowExecutor.java#L247",
                    "position": "workflow.setUpdatedBy(null);",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/conductor/blob/docker/core/src/main/java/com/netflix/conductor/core/execution/WorkflowExecutor.java#L248",
                    "position": "workflow.setUpdateTime(null);",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/conductor/blob/docker/core/src/main/java/com/netflix/conductor/core/execution/WorkflowExecutor.java#L250",
                    "position": "workflow.setTaskToDomain(taskToDomain);",
                    "message": " (Covered) passing @Nullable parameter 'taskToDomain' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/conductor/blob/docker/core/src/main/java/com/netflix/conductor/core/execution/WorkflowExecutor.java#L353",
                    "position": "workflow.setReasonForIncompletion(null);",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/conductor/blob/docker/core/src/main/java/com/netflix/conductor/core/execution/WorkflowExecutor.java#L359",
                    "position": "workflow.setOutput(null);",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/conductor/blob/docker/core/src/main/java/com/netflix/conductor/core/execution/WorkflowExecutor.java#L360",
                    "position": "workflow.setExternalOutputPayloadStoragePath(null);",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/conductor/blob/docker/core/src/main/java/com/netflix/conductor/core/execution/WorkflowExecutor.java#L497",
                    "position": "taskToBeRetried.setSubWorkflowId(null);",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/conductor/blob/docker/core/src/main/java/com/netflix/conductor/core/execution/WorkflowExecutor.java#L498",
                    "position": "taskToBeRetried.setReasonForIncompletion(null);",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/conductor/blob/docker/core/src/main/java/com/netflix/conductor/core/execution/WorkflowExecutor.java#L601",
                    "position": "workflow.setReasonForIncompletion(reason);",
                    "message": " (Covered) passing @Nullable parameter 'reason' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/conductor/blob/docker/core/src/main/java/com/netflix/conductor/core/execution/WorkflowExecutor.java#L624",
                    "position": "String failureWFId = startWorkflow(latestFailureWorkflow, input, null, workflowId, null, workflow.getTaskToDomain());",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/conductor/blob/docker/core/src/main/java/com/netflix/conductor/core/execution/WorkflowExecutor.java#L726",
                    "position": "}, null, null, 2, postponeTaskMessageDesc, postponeTaskMessageOperation);",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/conductor/blob/docker/core/src/main/java/com/netflix/conductor/core/execution/WorkflowExecutor.java#L745",
                    "position": "}, null, null, 2, updateTaskDesc, updateTaskOperation);",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/conductor/blob/docker/core/src/main/java/com/netflix/conductor/core/execution/WorkflowExecutor.java#L1148",
                    "position": "task.setDomain(getActiveDomain(task.getTaskType(), domains));",
                    "message": " (Covered) passing @Nullable parameter 'getActiveDomain(task.getTaskType(), domains)' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/conductor/blob/docker/core/src/main/java/com/netflix/conductor/core/execution/WorkflowExecutor.java#L1157",
                    "position": "task.setDomain(getActiveDomain(task.getTaskType(), taskDomainstr.split(\",\")));",
                    "message": " (Covered) passing @Nullable parameter 'getActiveDomain(task.getTaskType(), taskDomainstr.split(\",\"))' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/conductor/blob/docker/core/src/main/java/com/netflix/conductor/core/execution/WorkflowExecutor.java#L1280",
                    "position": "}, null, null, 3, description, operation));",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/conductor/blob/docker/core/src/main/java/com/netflix/conductor/core/execution/WorkflowExecutor.java#L1323",
                    "position": "workflow.setReasonForIncompletion(null);",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/conductor/blob/docker/core/src/main/java/com/netflix/conductor/core/execution/WorkflowExecutor.java#L1360",
                    "position": "workflow.setReasonForIncompletion(null);",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/conductor/blob/docker/core/src/main/java/com/netflix/conductor/core/execution/WorkflowExecutor.java#L1384",
                    "position": "rerunFromTask.setOutputData(null);",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/conductor/blob/docker/core/src/main/java/com/netflix/conductor/core/execution/WorkflowExecutor.java#L1387",
                    "position": "rerunFromTask.setExternalOutputPayloadStoragePath(null);",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/conductor/blob/docker/core/src/main/java/com/netflix/conductor/core/events/queue/Message.java#L28",
                    "position": "public Message() {",
                    "message": " (Covered) initializer method does not guarantee @NonNull fields payload (line 20), id (line 22), receipt (line 24) are initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/conductor/blob/docker/core/src/main/java/com/netflix/conductor/core/execution/DeciderService.java#L389",
                    "position": "rescheduled.setReasonForIncompletion(null);",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/conductor/blob/docker/core/src/main/java/com/netflix/conductor/core/execution/DeciderService.java#L390",
                    "position": "rescheduled.setSubWorkflowId(null);",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/conductor/blob/docker/core/src/main/java/com/netflix/conductor/core/execution/DeciderService.java#L422",
                    "position": "workflowInstance.setExternalInputPayloadStoragePath(null);",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/conductor/blob/docker/core/src/main/java/com/netflix/conductor/core/execution/DeciderService.java#L432",
                    "position": "task.setExternalOutputPayloadStoragePath(null);",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/conductor/blob/docker/core/src/main/java/com/netflix/conductor/core/execution/DeciderService.java#L437",
                    "position": "task.setExternalInputPayloadStoragePath(null);",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/conductor/blob/docker/core/src/main/java/com/netflix/conductor/core/execution/DeciderService.java#L590",
                    "position": "TaskMapperContext taskMapperContext = TaskMapperContext.newBuilder().withWorkflowDefinition(workflow.getWorkflowDefinition()).withWorkflowInstance(workflow).withTaskDefinition(taskToSchedule.getTaskDefinition()).withTaskToSchedule(taskToSchedule).withTaskInput(input).withRetryCount(retryCount).withRetryTaskId(retriedTaskId).withTaskId(taskId).withDeciderService(this).build();",
                    "message": " (Covered) passing @Nullable parameter 'retriedTaskId' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/conductor/blob/docker/core/src/main/java/com/netflix/conductor/core/execution/DeciderService.java#L594",
                    "position": "List<Task> tasks = taskMappers.get(taskType).getMappedTasks(taskMapperContext).stream().filter(task -> !tasksInWorkflow.contains(task.getReferenceTaskName())).collect(Collectors.toList());",
                    "message": " dereferenced expression taskMappers.get(taskType) is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/conductor/blob/docker/core/src/main/java/com/netflix/conductor/core/utils/ParametersUtils.java#L192",
                    "position": "String[] values = paramString.split(\"(?=(?<!\\\\$)\\\\$\\\\{)|(?<=\\\\})\");",
                    "message": " dereferenced expression paramString is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/conductor/blob/docker/core/src/main/java/com/netflix/conductor/core/utils/ParametersUtils.java#L199",
                    "position": "String sysValue = EnvUtils.getSystemParametersValue(paramPath, taskId);",
                    "message": " (Covered) passing @Nullable parameter 'taskId' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/conductor/blob/docker/core/src/main/java/com/netflix/conductor/core/exception/TerminateWorkflowException.java#L36",
                    "position": "this.task = task;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/conductor/blob/docker/core/src/main/java/com/netflix/conductor/core/utils/ExternalPayloadStorageUtils.java#L140",
                    "position": "((Task) entity).setInputData(null);",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/conductor/blob/docker/core/src/main/java/com/netflix/conductor/core/utils/ExternalPayloadStorageUtils.java#L148",
                    "position": "((Task) entity).setOutputData(null);",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/conductor/blob/docker/core/src/main/java/com/netflix/conductor/core/utils/ExternalPayloadStorageUtils.java#L155",
                    "position": "((Workflow) entity).setInput(null);",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/conductor/blob/docker/core/src/main/java/com/netflix/conductor/core/utils/ExternalPayloadStorageUtils.java#L162",
                    "position": "((Workflow) entity).setOutput(null);",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/conductor/blob/docker/core/src/main/java/com/netflix/conductor/core/utils/ExternalPayloadStorageUtils.java#L190",
                    "position": "task.setInputData(null);",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/conductor/blob/docker/core/src/main/java/com/netflix/conductor/core/utils/ExternalPayloadStorageUtils.java#L192",
                    "position": "task.setOutputData(null);",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/conductor/blob/docker/core/src/main/java/com/netflix/conductor/core/WorkflowContext.java#L29",
                    "position": "this.userName = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/conductor/blob/docker/core/src/main/java/com/netflix/conductor/core/storage/DummyPayloadStorage.java#L27",
                    "position": "public ExternalStorageLocation getLocation(Operation operation, PayloadType payloadType, String path) {",
                    "message": " (Covered) method returns @Nullable, but superclass method com.netflix.conductor.common.utils.ExternalPayloadStorage.getLocation(com.netflix.conductor.common.utils.ExternalPayloadStorage.Operation,com.netflix.conductor.common.utils.ExternalPayloadStorage.PayloadType,java.lang.String) returns @NonNull"
                },
                {
                    "url": "https://github.com/nimakarimipour/conductor/blob/docker/core/src/main/java/com/netflix/conductor/core/storage/DummyPayloadStorage.java#L37",
                    "position": "public InputStream download(String path) {",
                    "message": " (Covered) method returns @Nullable, but superclass method com.netflix.conductor.common.utils.ExternalPayloadStorage.download(java.lang.String) returns @NonNull"
                },
                {
                    "url": "https://github.com/nimakarimipour/conductor/blob/docker/core/src/main/java/com/netflix/conductor/core/execution/tasks/Join.java#L44",
                    "position": "joinOn = joinOn.stream().map(name -> TaskUtils.appendIteration(name, task.getIteration())).collect(",
                    "message": " dereferenced expression joinOn is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/conductor/blob/docker/core/src/main/java/com/netflix/conductor/core/execution/tasks/Join.java#L47",
                    "position": "for (String joinOnRef : joinOn) {",
                    "message": " enhanced-for expression joinOn is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/conductor/blob/docker/core/src/main/java/com/netflix/conductor/core/execution/tasks/ExclusiveJoin.java#L50",
                    "position": "joinOn = joinOn.stream().map(name -> TaskUtils.appendIteration(name, task.getIteration())).collect(",
                    "message": " dereferenced expression joinOn is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/conductor/blob/docker/core/src/main/java/com/netflix/conductor/core/execution/tasks/ExclusiveJoin.java#L54",
                    "position": "for (String joinOnRef : joinOn) {",
                    "message": " enhanced-for expression joinOn is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/conductor/blob/docker/core/src/main/java/com/netflix/conductor/core/execution/tasks/ExclusiveJoin.java#L108",
                    "position": "task.setOutputData(exclusiveTask.getOutputData());",
                    "message": " dereferenced expression exclusiveTask is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/conductor/blob/docker/core/src/main/java/com/netflix/conductor/core/execution/tasks/Lambda.java#L89",
                    "position": "task.setReasonForIncompletion(e.getMessage());",
                    "message": " (Covered) passing @Nullable parameter 'e.getMessage()' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/conductor/blob/docker/core/src/main/java/com/netflix/conductor/core/execution/tasks/SystemTaskExecutor.java#L113",
                    "position": "workflowExecutor.executeSystemTask(systemTask, taskId, callbackTime), executorService);",
                    "message": " (Covered) passing @Nullable parameter 'systemTask' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/conductor/blob/docker/core/src/main/java/com/netflix/conductor/service/ExecutionService.java#L97",
                    "position": "List<Task> tasks = poll(taskType, workerId, domain, 1, 100);",
                    "message": " (Covered) passing @Nullable parameter 'domain' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/conductor/blob/docker/core/src/main/java/com/netflix/conductor/service/ExecutionService.java#L105",
                    "position": "return poll(taskType, workerId, null, count, timeoutInMilliSecond);",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/conductor/blob/docker/core/src/main/java/com/netflix/conductor/service/ExecutionService.java#L221",
                    "position": "return workflowExecutor.getTask(taskId);",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/conductor/blob/docker/core/src/main/java/com/netflix/conductor/core/execution/tasks/Event.java#L95",
                    "position": "Message message = new Message(task.getTaskId(), null, task.getTaskId());",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/conductor/blob/docker/core/src/main/java/com/netflix/conductor/core/execution/tasks/Event.java#L96",
                    "position": "getQueue(workflow, task).ack(Collections.singletonList(message));",
                    "message": " dereferenced expression getQueue(workflow, task) is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/conductor/blob/docker/core/src/main/java/com/netflix/conductor/core/execution/tasks/Event.java#L113",
                    "position": "if (sinkValue.startsWith(\"conductor\")) {",
                    "message": " dereferenced expression sinkValue is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/conductor/blob/docker/core/src/main/java/com/netflix/conductor/core/execution/tasks/SubWorkflow.java#L50",
                    "position": "String name = input.get(\"subWorkflowName\").toString();",
                    "message": " dereferenced expression input.get(\"subWorkflowName\") is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/conductor/blob/docker/core/src/main/java/com/netflix/conductor/core/execution/tasks/SubWorkflow.java#L75",
                    "position": "null,",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/conductor/blob/docker/core/src/main/java/com/netflix/conductor/core/execution/tasks/SubWorkflow.java#L104",
                    "position": "task.setReasonForIncompletion(e.getMessage());",
                    "message": " (Covered) passing @Nullable parameter 'e.getMessage()' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/conductor/blob/docker/core/src/main/java/com/netflix/conductor/core/execution/mapper/SubWorkflowTaskMapper.java#L67",
                    "position": "String subWorkflowName = resolvedParams.get(\"name\").toString();",
                    "message": " dereferenced expression resolvedParams.get(\"name\") is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/conductor/blob/docker/core/src/main/java/com/netflix/conductor/core/execution/WorkflowSweeper.java#L56",
                    "position": "this.workflowRepairService = workflowRepairService.orElse(null);",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/conductor/blob/docker/core/src/main/java/com/netflix/conductor/core/events/DefaultEventProcessor.java#L205",
                    "position": "Map<String, Object> output = new RetryUtil<Map<String, Object>>().retryOnException(() -> actionProcessor.execute(action, payload, eventExecution.getEvent(), eventExecution.getMessageId()), this::isTransientException, null, RETRY_COUNT, description, methodName);",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/conductor/blob/docker/core/src/main/java/com/netflix/conductor/core/events/DefaultEventProcessor.java#L246",
                    "position": "return payloadObject;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/conductor/blob/docker/core/src/main/java/com/netflix/conductor/core/events/queue/DefaultEventQueueProcessor.java#L164",
                    "position": "Message msg = new Message(UUID.randomUUID().toString(), objectMapper.writeValueAsString(outputMap), null);",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/conductor/blob/docker/core/src/main/java/com/netflix/conductor/validations/ValidationContext.java#L32",
                    "position": "return metadataDAO;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/conductor/blob/docker/core/src/main/java/com/netflix/conductor/service/WorkflowServiceImpl.java#L245",
                    "position": "WorkflowDef workflowDef = metadataService.getWorkflowDef(workflowName, null);",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/conductor/blob/docker/core/src/main/java/com/netflix/conductor/service/MetadataServiceImpl.java#L54",
                    "position": "taskDefinition.setUpdatedBy(null);",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/conductor/blob/docker/core/src/main/java/com/netflix/conductor/service/MetadataServiceImpl.java#L55",
                    "position": "taskDefinition.setUpdateTime(null);",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/conductor/blob/docker/core/src/main/java/com/netflix/conductor/service/TaskServiceImpl.java#L67",
                    "position": "public Task poll(String taskType, String workerId, String domain) {",
                    "message": " (Covered) method returns @Nullable, but superclass method com.netflix.conductor.service.TaskService.poll(@javax.validation.constraints.NotEmpty(message=\"TaskType cannot be null or empty.\") java.lang.String,java.lang.String,java.lang.String) returns @NonNull"
                },
                {
                    "url": "https://github.com/nimakarimipour/conductor/blob/docker/core/src/main/java/com/netflix/conductor/service/TaskServiceImpl.java#L114",
                    "position": "public Task getPendingTaskForWorkflow(String workflowId, String taskReferenceName) {",
                    "message": " (Covered) method returns @Nullable, but superclass method com.netflix.conductor.service.TaskService.getPendingTaskForWorkflow(@javax.validation.constraints.NotEmpty(message=\"WorkflowId cannot be null or empty.\") java.lang.String,@javax.validation.constraints.NotEmpty(message=\"TaskReferenceName cannot be null or empty.\") java.lang.String) returns @NonNull"
                },
                {
                    "url": "https://github.com/nimakarimipour/conductor/blob/docker/core/src/main/java/com/netflix/conductor/service/TaskServiceImpl.java#L158",
                    "position": "}, null, null, 3, ackTaskDesc, ackTaskOperation);",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/conductor/blob/docker/core/src/main/java/com/netflix/conductor/service/AdminServiceImpl.java#L45",
                    "position": "this.workflowRepairService = workflowRepairService.orElse(null);",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/conductor/blob/docker/core/src/main/java/com/netflix/conductor/service/AdminServiceImpl.java#L46",
                    "position": "this.eventQueueManager = eventQueueManager.orElse(null);",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                }
            ],
            "size": 72
        },
        "NullAway": {
            "errors": [
                {
                    "url": "https://github.com/nimakarimipour/NullAway/blob/dockerFixer/Projects/NullAway/nullaway/src/main/java/com/uber/nullaway/dataflow/NullnessStore.java#L218",
                    "position": "AccessPath newAP = new AccessPath(new AccessPath.Root(toVar.getElement()), ap.getElements());",
                    "message": " dereferenced expression toVar is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/NullAway/blob/dockerFixer/Projects/NullAway/nullaway/src/main/java/com/uber/nullaway/dataflow/DataFlow.java#L259",
                    "position": "CfgParams cp = new AutoValue_DataFlow_CfgParams(codePath);",
                    "message": " (Covered) passing @Nullable parameter 'codePath' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/NullAway/blob/dockerFixer/Projects/NullAway/nullaway/src/main/java/com/uber/nullaway/dataflow/DataFlow.java#L276",
                    "position": "AnalysisParams ap = new AutoValue_DataFlow_AnalysisParams(transferFunction, cfg);",
                    "message": " (Covered) passing @Nullable parameter 'transferFunction' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/NullAway/blob/dockerFixer/Projects/NullAway/nullaway/src/main/java/com/uber/nullaway/dataflow/AccessPathNullnessPropagation.java#L164",
                    "position": "return input::getValueOfSubNode;",
                    "message": " (Covered) referenced method returns @Nullable, but functional interface method com.uber.nullaway.dataflow.AccessPathNullnessPropagation.SubNodeValues.valueOfSubNode(org.checkerframework.dataflow.cfg.node.Node) returns @NonNull"
                },
                {
                    "url": "https://github.com/nimakarimipour/NullAway/blob/dockerFixer/Projects/NullAway/nullaway/src/main/java/com/uber/nullaway/ErrorBuilder.java#L285",
                    "position": "final String[] parts = fullMethodName.split(\"\\\\.\");",
                    "message": " dereferenced expression fullMethodName is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/NullAway/blob/dockerFixer/Projects/NullAway/nullaway/src/main/java/com/uber/nullaway/NullAway.java#L664",
                    "position": "if (!(entities.nonnullInstanceFields().contains(symbol) || entities.nonnullStaticFields().contains(symbol))) {",
                    "message": " dereferenced expression entities is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/NullAway/blob/dockerFixer/Projects/NullAway/nullaway/src/main/java/com/uber/nullaway/NullAway.java#L695",
                    "position": "Set<MethodTree> staticInitializerMethods = class2Entities.get(enclosingClassSymbol(enclosingBlockPath)).staticInitializerMethods();",
                    "message": " dereferenced expression class2Entities.get(enclosingClassSymbol(enclosingBlockPath)) is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/NullAway/blob/dockerFixer/Projects/NullAway/nullaway/src/main/java/com/uber/nullaway/NullAway.java#L698",
                    "position": "Set<MethodTree> instanceInitializerMethods = class2Entities.get(enclosingClassSymbol(enclosingBlockPath)).instanceInitializerMethods();",
                    "message": " dereferenced expression class2Entities.get(enclosingClassSymbol(enclosingBlockPath)) is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/NullAway/blob/dockerFixer/Projects/NullAway/nullaway/src/main/java/com/uber/nullaway/NullAway.java#L853",
                    "position": "if (entities.instanceInitializerMethods().size() == 1) {",
                    "message": " dereferenced expression entities is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/NullAway/blob/dockerFixer/Projects/NullAway/nullaway/src/main/java/com/uber/nullaway/AbstractConfig.java#L141",
                    "position": "return annotatedPackages.matcher(className).matches() && !unannotatedSubPackages.matcher(className).matches() && (!treatGeneratedAsUnannotated || !ASTHelpers.hasDirectAnnotationWithSimpleName(symbol, \"Generated\"));",
                    "message": " dereferenced expression annotatedPackages is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/NullAway/blob/dockerFixer/Projects/NullAway/nullaway/src/main/java/com/uber/nullaway/AbstractConfig.java#L141",
                    "position": "return annotatedPackages.matcher(className).matches() && !unannotatedSubPackages.matcher(className).matches() && (!treatGeneratedAsUnannotated || !ASTHelpers.hasDirectAnnotationWithSimpleName(symbol, \"Generated\"));",
                    "message": " dereferenced expression unannotatedSubPackages is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/NullAway/blob/dockerFixer/Projects/NullAway/nullaway/src/main/java/com/uber/nullaway/AbstractConfig.java#L178",
                    "position": "return initializerAnnotations.contains(annotationName);",
                    "message": " dereferenced expression initializerAnnotations is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/NullAway/blob/dockerFixer/Projects/NullAway/nullaway/src/main/java/com/uber/nullaway/AbstractConfig.java#L190",
                    "position": "return knownInitializers.contains(classAndName);",
                    "message": " dereferenced expression knownInitializers is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/NullAway/blob/dockerFixer/Projects/NullAway/nullaway/src/main/java/com/uber/nullaway/AbstractConfig.java#L242",
                    "position": "if (autofixSuppressionComment.trim().length() > 0) {",
                    "message": " dereferenced expression autofixSuppressionComment is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/NullAway/blob/dockerFixer/Projects/NullAway/nullaway/src/main/java/com/uber/nullaway/AbstractConfig.java#L251",
                    "position": "return externalInitAnnotations.contains(annotationName);",
                    "message": " dereferenced expression externalInitAnnotations is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/NullAway/blob/dockerFixer/Projects/NullAway/nullaway/src/main/java/com/uber/nullaway/handlers/StreamNullabilityPropagator.java#L336",
                    "position": "for (AccessPath ap : filterNullnessStore.getAccessPathsWithValue(Nullness.NONNULL)) {",
                    "message": " dereferenced expression filterNullnessStore is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/NullAway/blob/dockerFixer/Projects/NullAway/nullaway/src/main/java/com/uber/nullaway/handlers/StreamNullabilityPropagator.java#L439",
                    "position": "filterNullnessStore.uprootAccessPaths(ImmutableMap.of(filterLocalName, mapLocalName));",
                    "message": " dereferenced expression filterNullnessStore is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/NullAway/blob/dockerFixer/Projects/NullAway/nullaway/src/main/java/com/uber/nullaway/handlers/stream/StreamTypeRecord.java#L89",
                    "position": "return record;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/NullAway/blob/dockerFixer/Projects/NullAway/nullaway/src/main/java/com/uber/nullaway/handlers/contract/ContractUtils.java#L25",
                    "position": "return fieldNames.stream().map((Function<String, String>) input -> input.substring(input.lastIndexOf(\".\") + 1)).collect(Collectors.toSet());",
                    "message": " dereferenced expression fieldNames is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/NullAway/blob/dockerFixer/Projects/NullAway/nullaway/src/main/java/com/uber/nullaway/handlers/contract/ContractHandler.java#L110",
                    "position": "clause, node.getTree(), analysis, state, callee, node.getArguments().size());",
                    "message": " (Covered) passing @Nullable parameter 'analysis' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/NullAway/blob/dockerFixer/Projects/NullAway/nullaway/src/main/java/com/uber/nullaway/handlers/contract/ContractHandler.java#L111",
                    "position": "String consequent = getConsequent(clause, node.getTree(), analysis, state, callee);",
                    "message": " (Covered) passing @Nullable parameter 'analysis' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/NullAway/blob/dockerFixer/Projects/NullAway/nullaway/src/main/java/com/uber/nullaway/handlers/contract/ContractHandler.java#L189",
                    "position": "if (consequent.equals(\"false\") && argAntecedentNullness.equals(Nullness.NULLABLE)) {",
                    "message": " dereferenced expression argAntecedentNullness is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/NullAway/blob/dockerFixer/Projects/NullAway/nullaway/src/main/java/com/uber/nullaway/handlers/contract/ContractHandler.java#L194",
                    "position": "} else if (consequent.equals(\"true\") && argAntecedentNullness.equals(Nullness.NULLABLE)) {",
                    "message": " dereferenced expression argAntecedentNullness is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/NullAway/blob/dockerFixer/Projects/NullAway/nullaway/src/main/java/com/uber/nullaway/handlers/contract/ContractHandler.java#L199",
                    "position": "} else if (consequent.equals(\"fail\") && argAntecedentNullness.equals(Nullness.NULLABLE)) {",
                    "message": " dereferenced expression argAntecedentNullness is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/NullAway/blob/dockerFixer/Projects/NullAway/nullaway/src/main/java/com/uber/nullaway/handlers/AbstractFieldContractHandler.java#L128",
                    "position": "if (content.isEmpty()) {",
                    "message": " dereferenced expression content is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/NullAway/blob/dockerFixer/Projects/NullAway/nullaway/src/main/java/com/uber/nullaway/handlers/contract/ContractNullnessStoreInitializer.java#L48",
                    "position": "String[] clauses = contractString.split(\";\");",
                    "message": " dereferenced expression contractString is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/NullAway/blob/dockerFixer/Projects/NullAway/nullaway/src/main/java/com/uber/nullaway/handlers/InferredJARModelsHandler.java#L356",
                    "position": "if (!argAnnotCache.get(className).get(methodSig).containsKey(argNum))",
                    "message": " dereferenced expression argAnnotCache.get(className).get(methodSig) is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/NullAway/blob/dockerFixer/Projects/NullAway/nullaway/src/main/java/com/uber/nullaway/handlers/InferredJARModelsHandler.java#L357",
                    "position": "argAnnotCache.get(className).get(methodSig).put(argNum, new LinkedHashSet<>());",
                    "message": " dereferenced expression argAnnotCache.get(className).get(methodSig) is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/NullAway/blob/dockerFixer/Projects/NullAway/nullaway/src/main/java/com/uber/nullaway/handlers/InferredJARModelsHandler.java#L358",
                    "position": "argAnnotCache.get(className).get(methodSig).get(argNum).add(annotation);",
                    "message": " dereferenced expression argAnnotCache.get(className).get(methodSig).get(argNum) is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/NullAway/blob/dockerFixer/Projects/NullAway/nullaway/src/main/java/com/uber/nullaway/handlers/InferredJARModelsHandler.java#L358",
                    "position": "argAnnotCache.get(className).get(methodSig).get(argNum).add(annotation);",
                    "message": " dereferenced expression argAnnotCache.get(className).get(methodSig) is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/NullAway/blob/dockerFixer/Projects/NullAway/nullaway/src/main/java/com/uber/nullaway/handlers/OptionalEmptinessHandler.java#L93",
                    "position": "optionalTypes = config.getOptionalClassPaths().stream().map(state::getTypeFromString).filter(Objects::nonNull).map(state.getTypes()::erasure).collect(ImmutableSet.toImmutableSet());",
                    "message": " dereferenced expression config.getOptionalClassPaths() is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/NullAway/blob/dockerFixer/Projects/NullAway/nullaway/src/main/java/com/uber/nullaway/handlers/OptionalEmptinessHandler.java#L110",
                    "position": "if (ASTHelpers.getSymbol(expr) instanceof Symbol.MethodSymbol && optionalIsGetCall((Symbol.MethodSymbol) ASTHelpers.getSymbol(expr), state.getTypes()) && isOptionalContentNullable(state, baseExpr, analysis.getNullnessAnalysis(state))) {",
                    "message": " dereferenced expression analysis is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/NullAway/blob/dockerFixer/Projects/NullAway/nullaway/src/main/java/com/uber/nullaway/handlers/OptionalEmptinessHandler.java#L166",
                    "position": "for (Type optionalType : optionalTypes) {",
                    "message": " enhanced-for expression optionalTypes is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/NullAway/blob/dockerFixer/Projects/NullAway/nullaway/src/main/java/com/uber/nullaway/handlers/OptionalEmptinessHandler.java#L174",
                    "position": "for (Type optionalType : optionalTypes) {",
                    "message": " enhanced-for expression optionalTypes is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/NullAway/blob/dockerFixer/Projects/NullAway/nullaway/src/main/java/com/uber/nullaway/handlers/OptionalEmptinessHandler.java#L186",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/NullAway/blob/dockerFixer/Projects/NullAway/nullaway/src/main/java/com/uber/nullaway/handlers/OptionalEmptinessHandler.java#L191",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/NullAway/blob/dockerFixer/Projects/NullAway/nullaway/src/main/java/com/uber/nullaway/handlers/OptionalEmptinessHandler.java#L196",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/NullAway/blob/dockerFixer/Projects/NullAway/nullaway/src/main/java/com/uber/nullaway/handlers/OptionalEmptinessHandler.java#L201",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/NullAway/blob/dockerFixer/Projects/NullAway/nullaway/src/main/java/com/uber/nullaway/handlers/OptionalEmptinessHandler.java#L206",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/NullAway/blob/dockerFixer/Projects/NullAway/nullaway/src/main/java/com/uber/nullaway/handlers/OptionalEmptinessHandler.java#L211",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/NullAway/blob/dockerFixer/Projects/NullAway/nullaway/src/main/java/com/uber/nullaway/handlers/OptionalEmptinessHandler.java#L216",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/NullAway/blob/dockerFixer/Projects/NullAway/nullaway/src/main/java/com/uber/nullaway/handlers/OptionalEmptinessHandler.java#L221",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/NullAway/blob/dockerFixer/Projects/NullAway/nullaway/src/main/java/com/uber/nullaway/handlers/OptionalEmptinessHandler.java#L226",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/NullAway/blob/dockerFixer/Projects/NullAway/nullaway/src/main/java/com/uber/nullaway/handlers/OptionalEmptinessHandler.java#L231",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/NullAway/blob/dockerFixer/Projects/NullAway/nullaway/src/main/java/com/uber/nullaway/handlers/OptionalEmptinessHandler.java#L236",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                }
            ],
            "size": 45
        },
        "LibGdx": {
            "errors": [
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g2d/TextureRegion.java#L112",
                    "position": "int texWidth = texture.getWidth(), texHeight = texture.getHeight();",
                    "message": " read of @NonNull field texture before initialization"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g2d/TextureRegion.java#L134",
                    "position": "texture = region.texture;",
                    "message": " dereferenced expression region is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/Pixmap.java#L167",
                    "position": "Gdx.net.sendHttpRequest(request, new Net.HttpResponseListener() {",
                    "message": " dereferenced expression Gdx.net is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/assets/loaders/TextureLoader.java#L46",
                    "position": "TextureData data;",
                    "message": " (Covered) @NonNull field TextureLoader$TextureLoaderInfo.data not initialized"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/Texture.java#L350",
                    "position": "builder.append(managedTextures.get(app).size);",
                    "message": " dereferenced expression managedTextures.get(app) is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/Texture.java#L361",
                    "position": "return managedTextures.get(Gdx.app).size;",
                    "message": " dereferenced expression managedTextures.get(Gdx.app) is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/TextureData.java#L127",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/assets/loaders/AsynchronousAssetLoader.java#L36",
                    "position": "super(resolver);",
                    "message": " (Covered) passing @Nullable parameter 'resolver' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/assets/AssetManager.java#L328",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/utils/Array.java#L626",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/utils/Array.java#L821",
                    "position": "public ArrayIterable(Array<T> array, boolean allowRemove) {",
                    "message": " (Covered) initializer method does not guarantee @NonNull fields iterator1 (line 814), iterator2 (line 814) are initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/files/FileHandle.java#L65",
                    "position": "protected FileHandle() {",
                    "message": " (Covered) initializer method does not guarantee @NonNull fields file (line 61), type (line 63) are initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/Input.java#L725",
                    "position": "return keyNames.get(keyname, -1);",
                    "message": " dereferenced expression keyNames is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/utils/ObjectSet.java#L95",
                    "position": "public ObjectSet(int initialCapacity, float loadFactor) {",
                    "message": " (Covered) initializer method does not guarantee @NonNull fields iterator1 (line 73), iterator2 (line 73) are initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/utils/ObjectMap.java#L103",
                    "position": "public ObjectMap(int initialCapacity, float loadFactor) {",
                    "message": " (Covered) initializer method does not guarantee @NonNull fields entries1 (line 77), entries2 (line 77), values1 (line 79), values2 (line 79), keys1 (line 81), keys2 (line 81) are initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/utils/ObjectMap.java#L218",
                    "position": "return i < 0 ? null : valueTable[i];",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/utils/ObjectMap.java#L237",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/utils/ObjectMap.java#L569",
                    "position": "public K key;",
                    "message": " (Covered) @NonNull field ObjectMap$Entry.key not initialized"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/utils/ObjectMap.java#L572",
                    "position": "public V value;",
                    "message": " (Covered) @NonNull field ObjectMap$Entry.value not initialized"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/assets/AssetDescriptor.java#L56",
                    "position": "this.params = params;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/assets/AssetDescriptor.java#L66",
                    "position": "this.params = params;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/assets/AssetLoadingTask.java#L154",
                    "position": "else if (loadFuture.isDone()) {",
                    "message": " dereferenced expression loadFuture is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/assets/AssetLoadingTask.java#L175",
                    "position": "return assetDesc.file;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/Color.java#L153",
                    "position": "this.r = color.r;",
                    "message": " dereferenced expression color is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g2d/TextureAtlas.java#L304",
                    "position": "atlasRegion.name = region.name;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g2d/TextureAtlas.java#L358",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g2d/TextureAtlas.java#L621",
                    "position": "public AtlasRegion(Texture texture, int x, int y, int width, int height) {",
                    "message": " (Covered) initializer method does not guarantee @NonNull field name (line 564) is initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g2d/TextureAtlas.java#L645",
                    "position": "public AtlasRegion(TextureRegion region) {",
                    "message": " (Covered) initializer method does not guarantee @NonNull field name (line 564) is initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/VertexAttributes.java#L118",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/VertexAttributes.java#L296",
                    "position": "public ReadonlyIterable(T[] array) {",
                    "message": " (Covered) initializer method does not guarantee @NonNull fields iterator1 (line 294), iterator2 (line 294) are initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/Mesh.java#L227",
                    "position": "instances = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/Mesh.java#L573",
                    "position": "bind(shader, null);",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/Mesh.java#L599",
                    "position": "unbind(shader, null);",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/Mesh.java#L763",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/Mesh.java#L1113",
                    "position": "builder.append(meshes.get(app).size);",
                    "message": " dereferenced expression meshes.get(app) is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g2d/SpriteBatch.java#L537",
                    "position": "public void draw(Texture texture, float[] spriteVertices, int offset, int count) {",
                    "message": " (Covered) parameter texture is @NonNull, but parameter in superclass method com.badlogic.gdx.graphics.g2d.Batch.draw(com.badlogic.gdx.graphics.Texture,float[],int,int) is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g2d/SpriteBatch.java#L889",
                    "position": "lastTexture.bind();",
                    "message": " dereferenced expression lastTexture is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/math/Vector2.java#L98",
                    "position": "x = v.x;",
                    "message": " dereferenced expression v is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/math/Matrix3.java#L367",
                    "position": "val[M00] = mat.val[Matrix4.M00];",
                    "message": " dereferenced expression mat is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/math/Vector3.java#L118",
                    "position": "return this.set(vector.x, vector.y, vector.z);",
                    "message": " dereferenced expression vector is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/math/Matrix4.java#L199",
                    "position": "return set(matrix.val);",
                    "message": " dereferenced expression matrix is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/utils/ObjectIntMap.java#L101",
                    "position": "public ObjectIntMap(int initialCapacity, float loadFactor) {",
                    "message": " (Covered) initializer method does not guarantee @NonNull fields entries1 (line 75), entries2 (line 75), values1 (line 77), values2 (line 77), keys1 (line 79), keys2 (line 79) are initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/utils/XmlReader.java#L335",
                    "position": "this.root = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/utils/XmlReader.java#L445",
                    "position": "current = elements.size > 0 ? elements.peek() : null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/utils/XmlReader.java#L487",
                    "position": "return defaultValue;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/utils/XmlReader.java#L490",
                    "position": "return defaultValue;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/utils/XmlReader.java#L603",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/utils/XmlReader.java#L609",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/maps/tiled/TiledMapTileLayer.java#L91",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/maps/tiled/TiledMapTileLayer.java#L93",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/maps/tiled/BaseTmxMapLoader.java#L128",
                    "position": "String mapOrientation = root.getAttribute(\"orientation\", null);",
                    "message": " read of @NonNull field root before initialization"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/maps/tiled/BaseTmxMapLoader.java#L286",
                    "position": "TiledMapImageLayer layer = new TiledMapImageLayer(texture, x, y);",
                    "message": " (Covered) passing @Nullable parameter 'texture' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/maps/tiled/BaseTmxMapLoader.java#L361",
                    "position": "TiledMapTileMapObject tiledMapTileMapObject = new TiledMapTileMapObject(tile, flipHorizontally, flipVertically);",
                    "message": " (Covered) passing @Nullable parameter 'tile' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/maps/tiled/BaseTmxMapLoader.java#L366",
                    "position": "float objectWidth = element.getFloatAttribute(\"width\", textureRegion.getRegionWidth());",
                    "message": " dereferenced expression textureRegion is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/maps/tiled/BaseTmxMapLoader.java#L581",
                    "position": "tileSet.setName(name);",
                    "message": " (Covered) passing @Nullable parameter 'name' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/maps/tiled/BaseTmxMapLoader.java#L590",
                    "position": "addStaticTiles(tmxFile, imageResolver, tileSet, element, tileElements, name, firstgid, tilewidth, tileheight, spacing, margin, source, offsetX, offsetY, imageSource, imageWidth, imageHeight, image);",
                    "message": " (Covered) passing @Nullable parameter 'name' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/utils/IntMap.java#L107",
                    "position": "public IntMap(int initialCapacity, float loadFactor) {",
                    "message": " (Covered) initializer method does not guarantee @NonNull fields entries1 (line 80), entries2 (line 80), values1 (line 82), values2 (line 82), keys1 (line 84), keys2 (line 84) are initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/utils/IntMap.java#L225",
                    "position": "return hasZeroValue ? zeroValue : null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/utils/IntMap.java#L227",
                    "position": "return i >= 0 ? valueTable[i] : null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/maps/tiled/TiledMapTileSets.java#L56",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g2d/SpriteCache.java#L963",
                    "position": "public Cache(int id, int offset) {",
                    "message": " (Covered) initializer method does not guarantee @NonNull fields textures (line 959), counts (line 961) are initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/maps/tiled/TideMapLoader.java#L230",
                    "position": "cell.setTile(currentTileSet.getTile(firstgid + currentChild.getIntAttribute(\"Index\")));",
                    "message": " dereferenced expression currentTileSet is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/maps/tiled/TideMapLoader.java#L244",
                    "position": "frameTiles.add((StaticTiledMapTile) currentTileSet.getTile(firstgid + frame.getIntAttribute(\"Index\")));",
                    "message": " dereferenced expression currentTileSet is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/math/Polygon.java#L81",
                    "position": "return worldVertices;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/scenes/scene2d/Group.java#L422",
                    "position": "actor.setStage(null);",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/scenes/scene2d/Group.java#L434",
                    "position": "child.setStage(null);",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/scenes/scene2d/Actor.java#L436",
                    "position": "return parent;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/scenes/scene2d/InputEvent.java#L162",
                    "position": "return relatedActor;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Label.java#L442",
                    "position": "public LabelStyle() {",
                    "message": " (Covered) initializer method does not guarantee @NonNull field font (line 432) is initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Value.java#L36",
                    "position": "return get(null);",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Table.java#L268",
                    "position": "cell.actor = actor;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Table.java#L386",
                    "position": "cell.actor = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Table.java#L394",
                    "position": "cell.actor = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Table.java#L509",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/scenes/scene2d/Stage.java#L839",
                    "position": "return root.hit(tempCoords.x, tempCoords.y, touchable);",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/scenes/scene2d/Stage.java#L1005",
                    "position": "EventListener listener;",
                    "message": " (Covered) @NonNull field Stage$TouchFocus.listener not initialized"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/scenes/scene2d/Stage.java#L1007",
                    "position": "Actor listenerActor, target;",
                    "message": " (Covered) @NonNull field Stage$TouchFocus.listenerActor not initialized"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/scenes/scene2d/Stage.java#L1007",
                    "position": "Actor listenerActor, target;",
                    "message": " (Covered) @NonNull field Stage$TouchFocus.target not initialized"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/scenes/scene2d/Stage.java#L1012",
                    "position": "listenerActor = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/scenes/scene2d/Stage.java#L1013",
                    "position": "listener = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/scenes/scene2d/Stage.java#L1014",
                    "position": "target = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/scenes/scene2d/Event.java#L111",
                    "position": "return targetActor;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/scenes/scene2d/Event.java#L123",
                    "position": "return listenerActor;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/scenes/scene2d/Event.java#L185",
                    "position": "return stage;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/utils/viewport/Viewport.java#L93",
                    "position": "camera.unproject(tmp, screenX, screenY, screenWidth, screenHeight);",
                    "message": " read of @NonNull field camera before initialization"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/scenes/scene2d/Action.java#L79",
                    "position": "setTarget(actor);",
                    "message": " (Covered) passing @Nullable parameter 'actor' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/scenes/scene2d/Action.java#L121",
                    "position": "target = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Cell.java#L100",
                    "position": "setActor(null);",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Cell.java#L1099",
                    "position": "return uniformX;",
                    "message": " unboxing of a @Nullable value"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Cell.java#L1103",
                    "position": "return uniformY;",
                    "message": " unboxing of a @Nullable value"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Cell.java#L1153",
                    "position": "minWidth = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Cell.java#L1154",
                    "position": "minHeight = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Cell.java#L1155",
                    "position": "prefWidth = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Cell.java#L1156",
                    "position": "prefHeight = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Cell.java#L1157",
                    "position": "maxWidth = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Cell.java#L1158",
                    "position": "maxHeight = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Cell.java#L1159",
                    "position": "spaceTop = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Cell.java#L1160",
                    "position": "spaceLeft = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Cell.java#L1161",
                    "position": "spaceBottom = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Cell.java#L1162",
                    "position": "spaceRight = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Cell.java#L1163",
                    "position": "padTop = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Cell.java#L1164",
                    "position": "padLeft = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Cell.java#L1165",
                    "position": "padBottom = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Cell.java#L1166",
                    "position": "padRight = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Cell.java#L1167",
                    "position": "fillX = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Cell.java#L1168",
                    "position": "fillY = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Cell.java#L1169",
                    "position": "align = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Cell.java#L1170",
                    "position": "expandX = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Cell.java#L1171",
                    "position": "expandY = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Cell.java#L1172",
                    "position": "colspan = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Cell.java#L1181",
                    "position": "actor = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Cell.java#L1182",
                    "position": "table = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Cell.java#L1190",
                    "position": "minWidth = cell.minWidth;",
                    "message": " dereferenced expression cell is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/utils/IntSet.java#L95",
                    "position": "public IntSet(int initialCapacity, float loadFactor) {",
                    "message": " (Covered) initializer method does not guarantee @NonNull fields iterator1 (line 73), iterator2 (line 73) are initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/utils/JsonWriter.java#L106",
                    "position": "writer.write(outputType.quoteValue(value));",
                    "message": " (Covered) passing @Nullable parameter 'value' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/utils/JsonValue.java#L126",
                    "position": "return current;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/utils/JsonValue.java#L239",
                    "position": "return stringValue;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/utils/JsonValue.java#L247",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/utils/JsonValue.java#L331",
                    "position": "return stringValue.equalsIgnoreCase(\"true\");",
                    "message": " dereferenced expression stringValue is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/utils/JsonValue.java#L385",
                    "position": "return stringValue.length() == 0 ? 0 : stringValue.charAt(0);",
                    "message": " dereferenced expression stringValue is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/utils/JsonValue.java#L668",
                    "position": "v = value.stringValue.length() == 0 ? 0 : value.stringValue.charAt(0);",
                    "message": " dereferenced expression value.stringValue is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/utils/JsonValue.java#L1468",
                    "position": "if (current.prev == null) {",
                    "message": " dereferenced expression current is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/utils/JsonValue.java#L1498",
                    "position": "public OutputType outputType;",
                    "message": " (Covered) @NonNull field JsonValue$PrettyPrintSettings.outputType not initialized"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/utils/Json.java#L342",
                    "position": "this.writer = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/utils/Json.java#L1067",
                    "position": "return defaultValue;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/utils/Json.java#L1116",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/utils/Json.java#L1309",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/utils/Json.java#L1425",
                    "position": "abstract public T read(Json json, JsonValue jsonData, Class type);",
                    "message": " (Covered) parameter type is @NonNull, but parameter in superclass method com.badlogic.gdx.utils.Json.Serializer.read(com.badlogic.gdx.utils.Json,com.badlogic.gdx.utils.JsonValue,java.lang.Class) is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Skin.java#L562",
                    "position": "public <T> T readValue(Class<T> type, Class elementType, JsonValue jsonData) {",
                    "message": " (Covered) parameter type is @NonNull, but parameter in superclass method com.badlogic.gdx.utils.Json.<T>readValue(java.lang.Class<T>,java.lang.Class,com.badlogic.gdx.utils.JsonValue) is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Skin.java#L587",
                    "position": "se.addTrace(jsonMap.child.trace());",
                    "message": " dereferenced expression jsonMap.child is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/utils/reflect/Field.java#L151",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Tree.java#L119",
                    "position": "float start = rangeStart.actor.getY(), end = node.actor.getY();",
                    "message": " dereferenced expression rangeStart is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Tree.java#L638",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Tree.java#L705",
                    "position": "public Node() {",
                    "message": " (Covered) initializer method does not guarantee @NonNull field actor (line 679) is initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Tree.java#L1056",
                    "position": "public TreeStyle() {",
                    "message": " (Covered) initializer method does not guarantee @NonNull fields plus (line 1046), minus (line 1046) are initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/scenes/scene2d/utils/Selection.java#L115",
                    "position": "return selected.size == 0 ? null : selected.first();",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/utils/OrderedSet.java#L174",
                    "position": "iterator2.valid = false;",
                    "message": " dereferenced expression iterator2 is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/utils/OrderedSet.java#L177",
                    "position": "iterator2.reset();",
                    "message": " dereferenced expression iterator2 is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Window.java#L296",
                    "position": "style.stageBackground.draw(batch, x, y, width, height);",
                    "message": " dereferenced expression style.stageBackground is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Window.java#L399",
                    "position": "public WindowStyle() {",
                    "message": " (Covered) initializer method does not guarantee @NonNull fields background (line 387), titleFont (line 390) are initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/scenes/scene2d/ui/ScrollPane.java#L552",
                    "position": "widget.setPosition(x, y);",
                    "message": " dereferenced expression widget is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/utils/Timer.java#L50",
                    "position": "return thread.instance;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/utils/Timer.java#L105",
                    "position": "if (thread.pauseTimeMillis > 0)",
                    "message": " dereferenced expression thread is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/scenes/scene2d/utils/ActorGestureListener.java#L56",
                    "position": "public ActorGestureListener(float halfTapSquareSize, float tapCountInterval, float longPressDuration, float maxFlingDelay) {",
                    "message": " (Covered) initializer method does not guarantee @NonNull fields event (line 42), actor (line 44), touchDownTarget (line 44) are initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/scenes/scene2d/ui/TextField.java#L400",
                    "position": "font.setColor(fontColor.r, fontColor.g, fontColor.b, fontColor.a * color.a * parentAlpha);",
                    "message": " dereferenced expression fontColor is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/scenes/scene2d/ui/TextField.java#L900",
                    "position": "inputListener.keyDown(null, keycode);",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/scenes/scene2d/ui/TextField.java#L1244",
                    "position": "public TextFieldStyle() {",
                    "message": " (Covered) initializer method does not guarantee @NonNull fields font (line 1224), background (line 1233), focusedBackground (line 1233), disabledBackground (line 1233), cursor (line 1233), selection (line 1233) are initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/scenes/scene2d/ui/TextField.java#L1247",
                    "position": "public TextFieldStyle(BitmapFont font, Color fontColor, @Null Drawable cursor, @Null Drawable selection, @Null Drawable background) {",
                    "message": " (Covered) initializer method does not guarantee @NonNull fields focusedBackground (line 1233), disabledBackground (line 1233) are initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/scenes/scene2d/ui/List.java#L92",
                    "position": "String prefix;",
                    "message": " (Covered) @NonNull field List$1.prefix not initialized"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/scenes/scene2d/ui/List.java#L506",
                    "position": "public ListStyle() {",
                    "message": " (Covered) initializer method does not guarantee @NonNull fields font (line 494), selection (line 500) are initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/scenes/scene2d/ui/VerticalGroup.java#L59",
                    "position": "public VerticalGroup() {",
                    "message": " (Covered) initializer method does not guarantee @NonNull field columnSizes (line 51) is initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Button.java#L248",
                    "position": "return style.up;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/scenes/scene2d/ui/ButtonGroup.java#L124",
                    "position": "lastChecked.setChecked(false);",
                    "message": " dereferenced expression lastChecked is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/scenes/scene2d/ui/TooltipManager.java#L196",
                    "position": "return instance;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Container.java#L50",
                    "position": "public Container() {",
                    "message": " (Covered) initializer method does not guarantee @NonNull field actor (line 25) is initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Container.java#L202",
                    "position": "this.actor = actor;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Container.java#L265",
                    "position": "this.actor = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Container.java#L272",
                    "position": "this.actor = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/scenes/scene2d/actions/AddAction.java#L54",
                    "position": "action = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/scenes/scene2d/actions/RemoveAction.java#L49",
                    "position": "action = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/scenes/scene2d/actions/ColorAction.java#L65",
                    "position": "color = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/scenes/scene2d/actions/AlphaAction.java#L55",
                    "position": "color = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/scenes/scene2d/actions/DelegateAction.java#L67",
                    "position": "action = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/scenes/scene2d/actions/RunnableAction.java#L54",
                    "position": "runnable.run();",
                    "message": " dereferenced expression runnable is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/scenes/scene2d/actions/AddListenerAction.java#L63",
                    "position": "listener = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/scenes/scene2d/actions/RemoveListenerAction.java#L63",
                    "position": "listener = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/scenes/scene2d/ui/SplitPane.java#L456",
                    "position": "public SplitPaneStyle() {",
                    "message": " (Covered) initializer method does not guarantee @NonNull field handle (line 454) is initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/scenes/scene2d/ui/TextButton.java#L170",
                    "position": "public TextButtonStyle() {",
                    "message": " (Covered) initializer method does not guarantee @NonNull fields font (line 161), fontColor (line 163), downFontColor (line 163), overFontColor (line 163), focusedFontColor (line 163), disabledFontColor (line 163) are initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/scenes/scene2d/ui/TextButton.java#L173",
                    "position": "public TextButtonStyle(@Null Drawable up, @Null Drawable down, @Null Drawable checked, @Null BitmapFont font) {",
                    "message": " (Covered) initializer method does not guarantee @NonNull fields fontColor (line 163), downFontColor (line 163), overFontColor (line 163), focusedFontColor (line 163), disabledFontColor (line 163) are initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/scenes/scene2d/ui/TextButton.java#L178",
                    "position": "public TextButtonStyle(TextButtonStyle style) {",
                    "message": " (Covered) initializer method does not guarantee @NonNull fields fontColor (line 163), downFontColor (line 163), overFontColor (line 163), focusedFontColor (line 163), disabledFontColor (line 163) are initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/scenes/scene2d/ui/SelectBox.java#L660",
                    "position": "public SelectBoxStyle() {",
                    "message": " (Covered) initializer method does not guarantee @NonNull fields font (line 641), background (line 649), scrollStyle (line 652), listStyle (line 654) are initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/scenes/scene2d/ui/HorizontalGroup.java#L59",
                    "position": "public HorizontalGroup() {",
                    "message": " (Covered) initializer method does not guarantee @NonNull field rowSizes (line 51) is initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/scenes/scene2d/ui/TextTooltip.java#L90",
                    "position": "public TextTooltipStyle() {",
                    "message": " (Covered) initializer method does not guarantee @NonNull fields label (line 80), background (line 82) are initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/scenes/scene2d/ui/ProgressBar.java#L482",
                    "position": "public ProgressBarStyle() {",
                    "message": " (Covered) initializer method does not guarantee @NonNull fields background (line 470), disabledBackground (line 470), knob (line 473), disabledKnob (line 473), knobBefore (line 476), disabledKnobBefore (line 476), knobAfter (line 479), disabledKnobAfter (line 479) are initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/scenes/scene2d/ui/ProgressBar.java#L485",
                    "position": "public ProgressBarStyle(@Null Drawable background, @Null Drawable knob) {",
                    "message": " (Covered) initializer method does not guarantee @NonNull fields disabledBackground (line 470), disabledKnob (line 473), knobBefore (line 476), disabledKnobBefore (line 476), knobAfter (line 479), disabledKnobAfter (line 479) are initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/scenes/scene2d/ui/ImageButton.java#L60",
                    "position": "this(new ImageButtonStyle(null, null, null, imageUp, null, null));",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/scenes/scene2d/ui/ImageButton.java#L64",
                    "position": "this(new ImageButtonStyle(null, null, null, imageUp, imageDown, null));",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/scenes/scene2d/ui/ImageButton.java#L68",
                    "position": "this(new ImageButtonStyle(null, null, null, imageUp, imageDown, imageChecked));",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/scenes/scene2d/utils/DragAndDrop.java#L188",
                    "position": "target.actor.stageToLocalCoordinates(tmpVector.set(stageX, stageY));",
                    "message": " dereferenced expression target is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/scenes/scene2d/utils/NinePatchDrawable.java#L44",
                    "position": "public NinePatchDrawable() {",
                    "message": " (Covered) initializer method does not guarantee @NonNull field patch (line 39) is initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/scenes/scene2d/utils/NinePatchDrawable.java#L47",
                    "position": "public NinePatchDrawable(NinePatch patch) {",
                    "message": " (Covered) initializer method does not guarantee @NonNull field patch (line 39) is initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/net/NetJavaImpl.java#L164",
                    "position": "final boolean doInput = !method.equalsIgnoreCase(HttpMethods.HEAD);",
                    "message": " dereferenced expression method is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/net/NetJavaSocketImpl.java#L119",
                    "position": "socket = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/net/NetJavaServerSocketImpl.java#L87",
                    "position": "return new NetJavaSocketImpl(server.accept(), hints);",
                    "message": " dereferenced expression server is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/net/HttpRequestBuilder.java#L184",
                    "position": "httpRequest = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/input/RemoteInput.java#L265",
                    "position": "this(port, null);",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/input/RemoteInput.java#L364",
                    "position": "Gdx.app.postRunnable(new EventTrigger(touchEvent, keyEvent));",
                    "message": " (Covered) passing @Nullable parameter 'touchEvent' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/input/RemoteSender.java#L59",
                    "position": "public RemoteSender(String ip, int port) {",
                    "message": " (Covered) initializer method does not guarantee @NonNull field out (line 35) is initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/input/RemoteSender.java#L95",
                    "position": "out = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/utils/SortedIntList.java#L181",
                    "position": "previousPosition.p.n = position;",
                    "message": " dereferenced expression previousPosition.p is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/utils/SortedIntList.java#L209",
                    "position": "protected Node<E> n;",
                    "message": " (Covered) @NonNull field SortedIntList$Node.n not initialized"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/utils/SortedIntList.java#L233",
                    "position": "newNode.n = n;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/utils/TimSort.java#L116",
                    "position": "TimSort() {",
                    "message": " (Covered) initializer method does not guarantee @NonNull fields a (line 61), c (line 66) are initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/utils/TimSort.java#L165",
                    "position": "this.a = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/utils/TimSort.java#L166",
                    "position": "this.c = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/utils/ComparableTimSort.java#L94",
                    "position": "ComparableTimSort() {",
                    "message": " (Covered) initializer method does not guarantee @NonNull field a (line 45) is initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/utils/ComparableTimSort.java#L142",
                    "position": "this.a = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/utils/ObjectFloatMap.java#L101",
                    "position": "public ObjectFloatMap(int initialCapacity, float loadFactor) {",
                    "message": " (Covered) initializer method does not guarantee @NonNull fields entries1 (line 75), entries2 (line 75), values1 (line 77), values2 (line 77), keys1 (line 79), keys2 (line 79) are initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/utils/ArrayMap.java#L71",
                    "position": "public ArrayMap(boolean ordered, int capacity) {",
                    "message": " (Covered) initializer method does not guarantee @NonNull fields entries1 (line 46), entries2 (line 46), values1 (line 48), values2 (line 48), keys1 (line 50), keys2 (line 50) are initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/utils/ArrayMap.java#L83",
                    "position": "public ArrayMap(boolean ordered, int capacity, Class keyArrayType, Class valueArrayType) {",
                    "message": " (Covered) initializer method does not guarantee @NonNull fields entries1 (line 46), entries2 (line 46), values1 (line 48), values2 (line 48), keys1 (line 50), keys2 (line 50) are initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/utils/LongMap.java#L106",
                    "position": "public LongMap(int initialCapacity, float loadFactor) {",
                    "message": " (Covered) initializer method does not guarantee @NonNull fields entries1 (line 80), entries2 (line 80), values1 (line 82), values2 (line 82), keys1 (line 84), keys2 (line 84) are initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/utils/ObjectLongMap.java#L101",
                    "position": "public ObjectLongMap(int initialCapacity, float loadFactor) {",
                    "message": " (Covered) initializer method does not guarantee @NonNull fields entries1 (line 75), entries2 (line 75), values1 (line 77), values2 (line 77), keys1 (line 79), keys2 (line 79) are initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/utils/Queue.java#L566",
                    "position": "public QueueIterable(Queue<T> queue, boolean allowRemove) {",
                    "message": " (Covered) initializer method does not guarantee @NonNull fields iterator1 (line 559), iterator2 (line 559) are initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/utils/IntIntMap.java#L104",
                    "position": "public IntIntMap(int initialCapacity, float loadFactor) {",
                    "message": " (Covered) initializer method does not guarantee @NonNull fields entries1 (line 78), entries2 (line 78), values1 (line 80), values2 (line 80), keys1 (line 82), keys2 (line 82) are initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/utils/PooledLinkedList.java#L83",
                    "position": "tail.next = item;",
                    "message": " dereferenced expression tail is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/utils/PooledLinkedList.java#L177",
                    "position": "n.prev = null;",
                    "message": " dereferenced expression n is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/utils/PooledLinkedList.java#L182",
                    "position": "p.next = null;",
                    "message": " dereferenced expression p is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/utils/PooledLinkedList.java#L186",
                    "position": "p.next = n;",
                    "message": " dereferenced expression p is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/utils/PooledLinkedList.java#L187",
                    "position": "n.prev = p;",
                    "message": " dereferenced expression n is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/utils/PooledLinkedList.java#L208",
                    "position": "tail.next = null;",
                    "message": " dereferenced expression tail is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/math/FloatCounter.java#L46",
                    "position": "mean = (windowSize > 1) ? new WindowedMean(windowSize) : null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/utils/JsonReader.java#L571",
                    "position": "return root;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/utils/JsonReader.java#L659",
                    "position": "child.setName(name);",
                    "message": " (Covered) passing @Nullable parameter 'name' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/utils/JsonReader.java#L704",
                    "position": "if (current.size > 0)",
                    "message": " dereferenced expression current is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/utils/IntFloatMap.java#L106",
                    "position": "public IntFloatMap(int initialCapacity, float loadFactor) {",
                    "message": " (Covered) initializer method does not guarantee @NonNull fields entries1 (line 79), entries2 (line 79), values1 (line 81), values2 (line 81), keys1 (line 83), keys2 (line 83) are initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/utils/ReflectionPool.java#L44",
                    "position": "constructor = findConstructor(type);",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/utils/ReflectionPool.java#L53",
                    "position": "return ClassReflection.getConstructor(type, (Class[]) null);",
                    "message": " (Covered) passing @Nullable parameter '(Class[]) null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/utils/ReflectionPool.java#L56",
                    "position": "Constructor constructor = ClassReflection.getDeclaredConstructor(type, (Class[]) null);",
                    "message": " (Covered) passing @Nullable parameter '(Class[]) null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/utils/ReflectionPool.java#L67",
                    "position": "return (T) constructor.newInstance((Object[]) null);",
                    "message": " (Covered) passing @Nullable parameter '(Object[]) null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/utils/compression/rangecoder/Decoder.java#L46",
                    "position": "Stream = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/utils/compression/rangecoder/Encoder.java#L52",
                    "position": "Stream = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/utils/compression/lz/OutWindow.java#L52",
                    "position": "_stream.write(_buffer, _streamPos, size);",
                    "message": " dereferenced expression _stream is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/utils/compression/lz/BinTree.java#L15",
                    "position": "int[] _son;",
                    "message": " (Covered) @NonNull field _son not initialized"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/utils/compression/lz/BinTree.java#L17",
                    "position": "int[] _hash;",
                    "message": " (Covered) @NonNull field _hash not initialized"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/utils/compression/lz/InWindow.java#L59",
                    "position": "int numReadBytes = _stream.read(_bufferBase, _bufferOffset + _streamPos, size);",
                    "message": " dereferenced expression _stream is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/utils/compression/lz/InWindow.java#L75",
                    "position": "_bufferBase = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/utils/compression/lzma/Encoder.java#L312",
                    "position": "com.badlogic.gdx.utils.compression.lz.BinTree _matchFinder = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/utils/compression/lzma/Encoder.java#L1176",
                    "position": "_matchFinder = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/utils/GdxBuild.java#L33",
                    "position": "new NativeCodeGenerator().generate(\"src\", \"bin\", JNI_DIR, new String[] {\"**/*\"}, null);",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/math/Intersector.java#L1215",
                    "position": "return overlapConvexPolygons(verts1, 0, verts1.length, verts2, 0, verts2.length, mtv);",
                    "message": " (Covered) passing @Nullable parameter 'mtv' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/Gdx.java#L34",
                    "position": "public static Application app;",
                    "message": " (Covered) @NonNull static field app not initialized"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/Gdx.java#L36",
                    "position": "public static Graphics graphics;",
                    "message": " (Covered) @NonNull static field graphics not initialized"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/Gdx.java#L38",
                    "position": "public static Audio audio;",
                    "message": " (Covered) @NonNull static field audio not initialized"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/Gdx.java#L40",
                    "position": "public static Input input;",
                    "message": " (Covered) @NonNull static field input not initialized"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/Gdx.java#L42",
                    "position": "public static Files files;",
                    "message": " (Covered) @NonNull static field files not initialized"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/Gdx.java#L47",
                    "position": "public static GL20 gl;",
                    "message": " (Covered) @NonNull static field gl not initialized"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/Gdx.java#L49",
                    "position": "public static GL20 gl20;",
                    "message": " (Covered) @NonNull static field gl20 not initialized"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/Gdx.java#L51",
                    "position": "public static GL30 gl30;",
                    "message": " (Covered) @NonNull static field gl30 not initialized"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/glutils/GLFrameBuffer.java#L169",
                    "position": "int width = bufferBuilder.width;",
                    "message": " read of @NonNull field bufferBuilder before initialization"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/glutils/GLFrameBuffer.java#L447",
                    "position": "builder.append(buffers.get(app).size);",
                    "message": " dereferenced expression buffers.get(app) is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/assets/loaders/CubemapLoader.java#L49",
                    "position": "CubemapData data;",
                    "message": " (Covered) @NonNull field CubemapLoader$CubemapLoaderInfo.data not initialized"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/Cubemap.java#L340",
                    "position": "builder.append(managedCubemaps.get(app).size);",
                    "message": " dereferenced expression managedCubemaps.get(app) is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/Cubemap.java#L351",
                    "position": "return managedCubemaps.get(Gdx.app).size;",
                    "message": " dereferenced expression managedCubemaps.get(Gdx.app) is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/glutils/GLOnlyTextureData.java#L78",
                    "position": "Gdx.gl.glTexImage2D(target, mipLevel, internalFormat, width, height, 0, format, type, null);",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/glutils/FileTextureData.java#L85",
                    "position": "public Pixmap consumePixmap() {",
                    "message": " (Covered) method returns @Nullable, but superclass method com.badlogic.gdx.graphics.TextureData.consumePixmap() returns @NonNull"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/glutils/FileTextureData.java#L111",
                    "position": "public Format getFormat() {",
                    "message": " (Covered) method returns @Nullable, but superclass method com.badlogic.gdx.graphics.TextureData.getFormat() returns @NonNull"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/glutils/FloatTextureData.java#L54",
                    "position": "public FloatTextureData(int w, int h, int internalFormat, int format, int type, boolean isGpuOnly) {",
                    "message": " (Covered) initializer method does not guarantee @NonNull field buffer (line 52) is initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/glutils/FrameBufferCubemap.java#L178",
                    "position": "Gdx.gl20.glFramebufferTexture2D(GL20.GL_FRAMEBUFFER, GL20.GL_COLOR_ATTACHMENT0, side.glEnum, getColorBufferTexture().getTextureObjectHandle(), 0);",
                    "message": " dereferenced expression side is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/glutils/ETC1TextureData.java#L49",
                    "position": "public ETC1TextureData(FileHandle file, boolean useMipMaps) {",
                    "message": " (Covered) initializer method does not guarantee @NonNull field data (line 35) is initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/glutils/ETC1TextureData.java#L100",
                    "position": "data = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/glutils/KTXTextureData.java#L353",
                    "position": "int faceLodSize = compressedData.getInt(pos);",
                    "message": " dereferenced expression compressedData is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/PixmapIO.java#L283",
                    "position": "curLine = curLineBytes.ensureCapacity(lineLen);",
                    "message": " read of @NonNull field curLineBytes before initialization"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/PixmapIO.java#L284",
                    "position": "prevLine = prevLineBytes.ensureCapacity(lineLen);",
                    "message": " read of @NonNull field prevLineBytes before initialization"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g2d/PixmapPacker.java#L274",
                    "position": "Page page = packStrategy.pack(this, name, rect);",
                    "message": " (Covered) passing @Nullable parameter 'name' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g2d/PixmapPacker.java#L625",
                    "position": "node.full = true;",
                    "message": " dereferenced expression node is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g2d/PixmapPacker.java#L626",
                    "position": "rect.set(node.rect.x, node.rect.y, node.rect.width - padding, node.rect.height - padding);",
                    "message": " dereferenced expression node is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g2d/PixmapPacker.java#L673",
                    "position": "public Node leftChild;",
                    "message": " (Covered) @NonNull field PixmapPacker$GuillotineStrategy$Node.leftChild not initialized"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g2d/PixmapPacker.java#L675",
                    "position": "public Node rightChild;",
                    "message": " (Covered) @NonNull field PixmapPacker$GuillotineStrategy$Node.rightChild not initialized"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g2d/ParticleEffect.java#L146",
                    "position": "if (emitter.getName().equals(name))",
                    "message": " dereferenced expression emitter.getName() is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g2d/ParticleEmitter.java#L498",
                    "position": "float spriteWidth = sprite.getWidth();",
                    "message": " dereferenced expression sprite is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g2d/ParticleEmitter.java#L750",
                    "position": "particle.setOrigin(sprite.getOriginX(), sprite.getOriginY());",
                    "message": " dereferenced expression sprite is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g2d/ParticleEmitter.java#L1325",
                    "position": "public Particle(@Nullable() Sprite sprite) {",
                    "message": " (Covered) initializer method does not guarantee @NonNull field tint (line 1321) is initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g2d/Animation.java#L237",
                    "position": "this.animationDuration = keyFrames.length * frameDuration;",
                    "message": " read of @NonNull field keyFrames before initialization"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g2d/PolygonSpriteBatch.java#L1106",
                    "position": "lastTexture.bind();",
                    "message": " dereferenced expression lastTexture is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g2d/PolygonSpriteBatch.java#L1221",
                    "position": "invTexWidth = 1.0f / texture.getWidth();",
                    "message": " dereferenced expression texture is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/TextureArray.java#L148",
                    "position": "builder.append(managedTextureArrays.get(app).size);",
                    "message": " dereferenced expression managedTextureArrays.get(app) is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/TextureArray.java#L157",
                    "position": "return managedTextureArrays.get(Gdx.app).size;",
                    "message": " dereferenced expression managedTextureArrays.get(Gdx.app) is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/Attributes.java#L58",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/utils/TextureDescriptor.java#L27",
                    "position": "public T texture = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/utils/TextureDescriptor.java#L43",
                    "position": "this(texture, null, null, null, null);",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/model/MeshPart.java#L152",
                    "position": "this.mesh = mesh;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/ModelInstance.java#L89",
                    "position": "this(model, (String[]) null);",
                    "message": " (Covered) passing @Nullable parameter '(String[]) null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/ModelInstance.java#L176",
                    "position": "this.transform.mul(node.getParent().globalTransform);",
                    "message": " dereferenced expression node.getParent() is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/ModelInstance.java#L186",
                    "position": "this(model, null, rootNodeIds);",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/ModelInstance.java#L248",
                    "position": "this(model, transform, (String[]) null);",
                    "message": " (Covered) passing @Nullable parameter '(String[]) null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/model/Node.java#L395",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/model/Animation.java#L36",
                    "position": "public String id;",
                    "message": " (Covered) @NonNull field id not initialized"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/Model.java#L144",
                    "position": "animation.id = anim.id;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/Model.java#L196",
                    "position": "e.key.invBoneBindTransforms.clear();",
                    "message": " dereferenced expression e.key.invBoneBindTransforms is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/Model.java#L203",
                    "position": "node.id = modelNode.id;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/Model.java#L261",
                    "position": "VertexAttributes attributes = new VertexAttributes(modelMesh.attributes);",
                    "message": " (Covered) passing @Nullable parameter 'modelMesh.attributes' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/Model.java#L262",
                    "position": "int numVertices = modelMesh.vertices.length / (attributes.vertexSize / 4);",
                    "message": " dereferenced expression modelMesh.vertices is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/model/data/ModelData.java#L48",
                    "position": "if (other.id.equals(mesh.id)) {",
                    "message": " dereferenced expression other.id is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/model/data/ModelMesh.java#L34",
                    "position": "public ModelMeshPart[] parts;",
                    "message": " (Covered) @NonNull field parts not initialized"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/model/data/ModelMaterial.java#L31",
                    "position": "public String id;",
                    "message": " (Covered) @NonNull field id not initialized"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/model/data/ModelMaterial.java#L55",
                    "position": "public Array<ModelTexture> textures;",
                    "message": " (Covered) @NonNull field textures not initialized"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/model/data/ModelTexture.java#L50",
                    "position": "public String fileName;",
                    "message": " (Covered) @NonNull field fileName not initialized"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/model/data/ModelMeshPart.java#L24",
                    "position": "public String id;",
                    "message": " (Covered) @NonNull field id not initialized"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/model/data/ModelMeshPart.java#L26",
                    "position": "public short[] indices;",
                    "message": " (Covered) @NonNull field indices not initialized"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/model/data/ModelNodeAnimation.java#L36",
                    "position": "public Array<ModelNodeKeyframe<Vector3>> translation;",
                    "message": " (Covered) @NonNull field translation not initialized"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/model/data/ModelNodeAnimation.java#L41",
                    "position": "public Array<ModelNodeKeyframe<Quaternion>> rotation;",
                    "message": " (Covered) @NonNull field rotation not initialized"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/model/data/ModelNodeAnimation.java#L46",
                    "position": "public Array<ModelNodeKeyframe<Vector3>> scaling;",
                    "message": " (Covered) @NonNull field scaling not initialized"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/model/NodeAnimation.java#L36",
                    "position": "public Node node;",
                    "message": " (Covered) @NonNull field node not initialized"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/model/NodeAnimation.java#L41",
                    "position": "public Array<NodeKeyframe<Vector3>> translation = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/model/NodeAnimation.java#L46",
                    "position": "public Array<NodeKeyframe<Quaternion>> rotation = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/model/NodeAnimation.java#L51",
                    "position": "public Array<NodeKeyframe<Vector3>> scaling = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/utils/AnimationController.java#L107",
                    "position": "protected AnimationDesc() {",
                    "message": " (Covered) initializer method does not guarantee @NonNull field animation (line 80) is initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/utils/AnimationController.java#L213",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/utils/AnimationController.java#L227",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/utils/BaseAnimationController.java#L307",
                    "position": "for (final NodeAnimation nodeAnim : animation.nodeAnimations) applyNodeAnimationBlending(nodeAnim, out, pool, alpha, time);",
                    "message": " (Covered) passing @Nullable parameter 'pool' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/utils/DefaultTextureBinder.java#L143",
                    "position": "tempDesc.set(texture, null, null, null, null);",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/utils/DefaultTextureBinder.java#L194",
                    "position": "final int idx = unitsLRU[i];",
                    "message": " dereferenced expression unitsLRU is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/utils/DefaultTextureBinder.java#L205",
                    "position": "final int idx = unitsLRU[i];",
                    "message": " dereferenced expression unitsLRU is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/utils/MeshBuilder.java#L353",
                    "position": "attributes = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/utils/MeshBuilder.java#L717",
                    "position": "return vertex(info.hasPosition ? info.position : null, info.hasNormal ? info.normal : null, info.hasColor ? info.color : null, info.hasUV ? info.uv : null);",
                    "message": " (Covered) passing @Nullable parameter 'info.hasPosition ? info.position : null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/shaders/DefaultShader.java#L735",
                    "position": "this.shadowMap = lighting && renderable.environment.shadowMap != null;",
                    "message": " dereferenced expression renderable.environment is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/shaders/DefaultShader.java#L788",
                    "position": "this.program = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/shaders/BaseShader.java#L135",
                    "position": "public RenderContext context;",
                    "message": " (Covered) @NonNull field context not initialized"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/shaders/BaseShader.java#L137",
                    "position": "public Camera camera;",
                    "message": " (Covered) @NonNull field camera not initialized"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/shaders/BaseShader.java#L249",
                    "position": "setters.get(u).set(this, u, null, null);",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/shaders/BaseShader.java#L301",
                    "position": "program = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/shaders/BaseShader.java#L307",
                    "position": "locations = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/utils/DefaultRenderableSorter.java#L65",
                    "position": "final float dst = (int) (1000f * camera.position.dst2(tmpV1)) - (int) (1000f * camera.position.dst2(tmpV2));",
                    "message": " dereferenced expression camera is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/utils/shapebuilders/RenderableShapeBuilder.java#L59",
                    "position": "private static short[] indices;",
                    "message": " (Covered) @NonNull static field indices not initialized"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/utils/shapebuilders/RenderableShapeBuilder.java#L61",
                    "position": "private static float[] vertices;",
                    "message": " (Covered) @NonNull static field vertices not initialized"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/utils/shapebuilders/RenderableShapeBuilder.java#L51",
                    "position": "renderable.material = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/utils/ModelBuilder.java#L130",
                    "position": "node.id = \"node\" + model.nodes.size;",
                    "message": " dereferenced expression model is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/utils/ModelBuilder.java#L165",
                    "position": "node.parts.add(new NodePart(meshpart, material));",
                    "message": " dereferenced expression node is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/utils/CameraInputController.java#L180",
                    "position": "return controller.pinchZoom(amount / ((w > h) ? h : w));",
                    "message": " dereferenced expression controller is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/particles/ParallelArray.java#L306",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/particles/renderers/ParticleControllerRenderer.java#L60",
                    "position": "public void set(ParticleController particleController) {",
                    "message": " (Covered) initializer method does not guarantee @NonNull field batch (line 32) is initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/particles/ResourceData.java#L72",
                    "position": "public SaveData() {",
                    "message": " (Covered) initializer method does not guarantee @NonNull field resources (line 70) is initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/particles/ResourceData.java#L100",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/particles/ResourceData.java#L131",
                    "position": "public AssetData() {",
                    "message": " (Covered) initializer method does not guarantee @NonNull fields filename (line 127), type (line 129) are initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/particles/renderers/ParticleControllerRenderData.java#L30",
                    "position": "public ParticleController controller;",
                    "message": " (Covered) @NonNull field controller not initialized"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/particles/renderers/ParticleControllerRenderData.java#L32",
                    "position": "public FloatChannel positionChannel;",
                    "message": " (Covered) @NonNull field positionChannel not initialized"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/particles/ParticleShader.java#L288",
                    "position": "this.program = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/particles/batches/PointSpriteParticleBatch.java#L84",
                    "position": "public PointSpriteParticleBatch(int capacity, ParticleShader.Config shaderConfig) {",
                    "message": " (Covered) initializer method does not guarantee @NonNull field vertices (line 72) is initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/particles/batches/PointSpriteParticleBatch.java#L90",
                    "position": "renderable.shader = new ParticleShader(renderable, shaderConfig);",
                    "message": " read of @NonNull field renderable before initialization"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/particles/batches/PointSpriteParticleBatch.java#L90",
                    "position": "renderable.shader = new ParticleShader(renderable, shaderConfig);",
                    "message": " read of @NonNull field renderable before initialization"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/particles/batches/PointSpriteParticleBatch.java#L91",
                    "position": "renderable.shader.init();",
                    "message": " dereferenced expression renderable.shader is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/particles/batches/PointSpriteParticleBatch.java#L91",
                    "position": "renderable.shader.init();",
                    "message": " read of @NonNull field renderable before initialization"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/particles/batches/PointSpriteParticleBatch.java#L130",
                    "position": "int regionOffset = p * regionChannel.strideSize;",
                    "message": " dereferenced expression regionChannel is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/particles/batches/PointSpriteParticleBatch.java#L132",
                    "position": "int colorOffset = p * colorChannel.strideSize;",
                    "message": " dereferenced expression colorChannel is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/particles/batches/PointSpriteParticleBatch.java#L133",
                    "position": "int rotationOffset = p * rotationChannel.strideSize;",
                    "message": " dereferenced expression rotationChannel is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/particles/batches/PointSpriteParticleBatch.java#L141",
                    "position": "vertices[offset + CPU_SIZE_AND_ROTATION_OFFSET] = scaleChannel.data[p * scaleChannel.strideSize];",
                    "message": " dereferenced expression scaleChannel is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/particles/batches/BufferedParticleBatch.java#L64",
                    "position": "flush(sorter.sort(renderData));",
                    "message": " (Covered) passing @Nullable parameter 'sorter.sort(renderData)' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/particles/ParticleController.java#L96",
                    "position": "public ParticleController() {",
                    "message": " (Covered) initializer method does not guarantee @NonNull fields name (line 52), particleChannels (line 74) are initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/particles/ParticleSorter.java#L67",
                    "position": "private float[] distances;",
                    "message": " (Covered) @NonNull field ParticleSorter$Distance.distances not initialized"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/particles/ParticleSorter.java#L69",
                    "position": "private int[] particleIndices, particleOffsets;",
                    "message": " (Covered) @NonNull field ParticleSorter$Distance.particleIndices not initialized"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/particles/ParticleSorter.java#L69",
                    "position": "private int[] particleIndices, particleOffsets;",
                    "message": " (Covered) @NonNull field ParticleSorter$Distance.particleOffsets not initialized"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/particles/renderers/BillboardControllerRenderData.java#L29",
                    "position": "public FloatChannel regionChannel, colorChannel, scaleChannel, rotationChannel;",
                    "message": " (Covered) @NonNull field regionChannel not initialized"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/particles/renderers/BillboardControllerRenderData.java#L29",
                    "position": "public FloatChannel regionChannel, colorChannel, scaleChannel, rotationChannel;",
                    "message": " (Covered) @NonNull field colorChannel not initialized"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/particles/renderers/BillboardControllerRenderData.java#L29",
                    "position": "public FloatChannel regionChannel, colorChannel, scaleChannel, rotationChannel;",
                    "message": " (Covered) @NonNull field scaleChannel not initialized"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/particles/renderers/BillboardControllerRenderData.java#L29",
                    "position": "public FloatChannel regionChannel, colorChannel, scaleChannel, rotationChannel;",
                    "message": " (Covered) @NonNull field rotationChannel not initialized"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/particles/renderers/ModelInstanceControllerRenderData.java#L31",
                    "position": "public ObjectChannel<ModelInstance> modelInstanceChannel;",
                    "message": " (Covered) @NonNull field modelInstanceChannel not initialized"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/particles/renderers/ParticleControllerControllerRenderer.java#L50",
                    "position": "controllerChannel.data[i].draw();",
                    "message": " dereferenced expression controllerChannel is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/particles/renderers/ModelInstanceRenderer.java#L64",
                    "position": "float scale = hasScale ? renderData.scaleChannel.data[i] : 1;",
                    "message": " dereferenced expression renderData.scaleChannel is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/particles/renderers/ModelInstanceRenderer.java#L67",
                    "position": "int rotationOffset = i * renderData.rotationChannel.strideSize;",
                    "message": " dereferenced expression renderData.rotationChannel is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/particles/renderers/ModelInstanceRenderer.java#L78",
                    "position": "int colorOffset = i * renderData.colorChannel.strideSize;",
                    "message": " dereferenced expression renderData.colorChannel is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/particles/batches/BillboardParticleBatch.java#L148",
                    "position": "public BillboardParticleBatch(AlignMode mode, boolean useGPU, int capacity, BlendingAttribute blendingAttribute, DepthTestAttribute depthTestAttribute) {",
                    "message": " (Covered) initializer method does not guarantee @NonNull field vertices (line 120) is initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/particles/batches/BillboardParticleBatch.java#L166",
                    "position": "this(mode, useGPU, capacity, null, null);",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/particles/batches/BillboardParticleBatch.java#L270",
                    "position": "this.mode = mode;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/particles/values/MeshSpawnShapeValue.java#L96",
                    "position": "this.setMesh(mesh, null);",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/particles/ParticleEffectLoader.java#L126",
                    "position": "effectData.resource.load(manager, effectData);",
                    "message": " dereferenced expression effectData.resource is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/particles/ParticleEffectLoader.java#L126",
                    "position": "effectData.resource.load(manager, effectData);",
                    "message": " dereferenced expression effectData is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/particles/influencers/ColorInfluencer.java#L141",
                    "position": "FloatChannel colorChannel;",
                    "message": " (Covered) @NonNull field colorChannel not initialized"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/particles/influencers/ColorInfluencer.java#L50",
                    "position": "for (int i = startIndex * colorChannel.strideSize, c = i + count * colorChannel.strideSize; i < c; i += colorChannel.strideSize) {",
                    "message": " dereferenced expression colorChannel is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/particles/influencers/ColorInfluencer.java#L77",
                    "position": "public Single() {",
                    "message": " (Covered) initializer method does not guarantee @NonNull fields alphaInterpolationChannel (line 69), lifeChannel (line 71) are initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/particles/influencers/DynamicsInfluencer.java#L85",
                    "position": "public void set(ParticleController particleController) {",
                    "message": " (Covered) initializer method does not guarantee @NonNull fields accellerationChannel (line 38), positionChannel (line 38), previousPositionChannel (line 38), rotationChannel (line 38), angularVelocityChannel (line 38) are initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/particles/influencers/DynamicsModifier.java#L460",
                    "position": "public DynamicsModifier() {",
                    "message": " (Covered) initializer method does not guarantee @NonNull field lifeChannel (line 458) is initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/particles/influencers/DynamicsModifier.java#L463",
                    "position": "public DynamicsModifier(DynamicsModifier modifier) {",
                    "message": " (Covered) initializer method does not guarantee @NonNull field lifeChannel (line 458) is initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/particles/influencers/DynamicsModifier.java#L64",
                    "position": "for (int i = 0, accelOffset = 0, c = i + controller.particles.size * rotationChannel.strideSize; i < c; i += rotationChannel.strideSize, accelOffset += accellerationChannel.strideSize) {",
                    "message": " dereferenced expression rotationChannel is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/particles/influencers/DynamicsModifier.java#L65",
                    "position": "Vector3 axisZ = TMP_V1.set(accellerationChannel.data[accelOffset + ParticleChannels.XOffset], accellerationChannel.data[accelOffset + ParticleChannels.YOffset], accellerationChannel.data[accelOffset + ParticleChannels.ZOffset]).nor(), axisY = TMP_V2.set(TMP_V1).crs(Vector3.Y).nor().crs(TMP_V1).nor(), axisX = TMP_V3.set(axisY).crs(axisZ).nor();",
                    "message": " dereferenced expression accellerationChannel is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/particles/influencers/DynamicsModifier.java#L86",
                    "position": "public Strength() {",
                    "message": " (Covered) initializer method does not guarantee @NonNull field strengthChannel (line 82) is initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/particles/influencers/DynamicsModifier.java#L90",
                    "position": "public Strength(Strength rotation) {",
                    "message": " (Covered) initializer method does not guarantee @NonNull field strengthChannel (line 82) is initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/particles/influencers/DynamicsModifier.java#L143",
                    "position": "public Angular() {",
                    "message": " (Covered) initializer method does not guarantee @NonNull field angularChannel (line 131) is initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/particles/influencers/DynamicsModifier.java#L148",
                    "position": "public Angular(Angular value) {",
                    "message": " (Covered) initializer method does not guarantee @NonNull field angularChannel (line 131) is initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/particles/influencers/DynamicsModifier.java#L220",
                    "position": "for (int i = 0, l = ParticleChannels.LifePercentOffset, s = 0, c = i + controller.particles.size * rotationalVelocity2dChannel.strideSize; i < c; s += strengthChannel.strideSize, i += rotationalVelocity2dChannel.strideSize, l += lifeChannel.strideSize) {",
                    "message": " dereferenced expression rotationalVelocity2dChannel is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/particles/influencers/DynamicsModifier.java#L273",
                    "position": "for (int i = 0, l = ParticleChannels.LifePercentOffset, s = 0, a = 0, c = controller.particles.size * rotationalForceChannel.strideSize; i < c; s += strengthChannel.strideSize, i += rotationalForceChannel.strideSize, a += angularChannel.strideSize, l += lifeChannel.strideSize) {",
                    "message": " dereferenced expression rotationalForceChannel is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/particles/influencers/DynamicsModifier.java#L296",
                    "position": "public CentripetalAcceleration() {",
                    "message": " (Covered) initializer method does not guarantee @NonNull fields accelerationChannel (line 292), positionChannel (line 294) are initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/particles/influencers/DynamicsModifier.java#L299",
                    "position": "public CentripetalAcceleration(CentripetalAcceleration rotation) {",
                    "message": " (Covered) initializer method does not guarantee @NonNull fields accelerationChannel (line 292), positionChannel (line 294) are initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/particles/influencers/DynamicsModifier.java#L355",
                    "position": "for (int i = 0, l = ParticleChannels.LifePercentOffset, s = 0, a = 0, c = i + controller.particles.size * directionalVelocityChannel.strideSize; i < c; s += strengthChannel.strideSize, i += directionalVelocityChannel.strideSize, a += angularChannel.strideSize, l += lifeChannel.strideSize) {",
                    "message": " dereferenced expression directionalVelocityChannel is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/particles/influencers/DynamicsModifier.java#L396",
                    "position": "for (int i = 0, l = ParticleChannels.LifePercentOffset, s = 0, a = 0, positionOffset = 0, c = i + controller.particles.size * directionalVelocityChannel.strideSize; i < c; s += strengthChannel.strideSize, i += directionalVelocityChannel.strideSize, a += angularChannel.strideSize, l += lifeChannel.strideSize, positionOffset += positionChannel.strideSize) {",
                    "message": " dereferenced expression directionalVelocityChannel is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/particles/influencers/DynamicsModifier.java#L400",
                    "position": "TMP_V1.set(positionChannel.data[positionOffset + ParticleChannels.XOffset], positionChannel.data[positionOffset + ParticleChannels.YOffset], positionChannel.data[positionOffset + ParticleChannels.ZOffset]);",
                    "message": " dereferenced expression positionChannel is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/particles/influencers/DynamicsModifier.java#L444",
                    "position": "accelerationChannel.data[forceOffset + ParticleChannels.XOffset] += TMP_V3.x;",
                    "message": " dereferenced expression accelerationChannel is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/particles/influencers/SpawnInfluencer.java#L42",
                    "position": "public SpawnInfluencer() {",
                    "message": " (Covered) initializer method does not guarantee @NonNull fields positionChannel (line 38), rotationChannel (line 40) are initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/particles/influencers/SpawnInfluencer.java#L46",
                    "position": "public SpawnInfluencer(SpawnShapeValue spawnShapeValue) {",
                    "message": " (Covered) initializer method does not guarantee @NonNull fields positionChannel (line 38), rotationChannel (line 40) are initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/particles/influencers/SpawnInfluencer.java#L50",
                    "position": "public SpawnInfluencer(SpawnInfluencer source) {",
                    "message": " (Covered) initializer method does not guarantee @NonNull fields positionChannel (line 38), rotationChannel (line 40) are initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/particles/influencers/ModelInfluencer.java#L132",
                    "position": "public ModelInfluencer() {",
                    "message": " (Covered) initializer method does not guarantee @NonNull field modelChannel (line 130) is initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/particles/influencers/ModelInfluencer.java#L136",
                    "position": "public ModelInfluencer(Model... models) {",
                    "message": " (Covered) initializer method does not guarantee @NonNull field modelChannel (line 130) is initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/particles/influencers/ParticleControllerInfluencer.java#L175",
                    "position": "public ParticleControllerInfluencer() {",
                    "message": " (Covered) initializer method does not guarantee @NonNull field particleControllerChannel (line 173) is initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/particles/influencers/ParticleControllerInfluencer.java#L179",
                    "position": "public ParticleControllerInfluencer(ParticleController... templates) {",
                    "message": " (Covered) initializer method does not guarantee @NonNull field particleControllerChannel (line 173) is initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/particles/influencers/SimpleInfluencer.java#L53",
                    "position": "private void set(SimpleInfluencer scaleInfluencer) {",
                    "message": " (Covered) initializer method does not guarantee @NonNull fields valueChannel (line 38), interpolationChannel (line 38), lifeChannel (line 38) are initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/particles/influencers/RegionInfluencer.java#L266",
                    "position": "public void setAtlasName(@Nullable() String atlasName) {",
                    "message": " (Covered) initializer method does not guarantee @NonNull field regionChannel (line 226) is initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/particles/influencers/RegionInfluencer.java#L151",
                    "position": "AspectTextureRegion region = regions.get((int) (lifeChannel.data[l] * (regions.size - 1)));",
                    "message": " dereferenced expression lifeChannel is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/particles/influencers/ParticleControllerFinalizerInfluencer.java#L40",
                    "position": "public ParticleControllerFinalizerInfluencer() {",
                    "message": " (Covered) initializer method does not guarantee @NonNull fields positionChannel (line 34), scaleChannel (line 34), rotationChannel (line 34), controllerChannel (line 36) are initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/particles/emitters/RegularEmitter.java#L73",
                    "position": "public RegularEmitter() {",
                    "message": " (Covered) initializer method does not guarantee @NonNull field lifeChannel (line 71) is initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/ModelBatch.java#L62",
                    "position": "renderable.material = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/ModelBatch.java#L268",
                    "position": "currentShader.begin(camera, context);",
                    "message": " dereferenced expression currentShader is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/ModelBatch.java#L270",
                    "position": "currentShader.render(renderable);",
                    "message": " dereferenced expression currentShader is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/ModelBatch.java#L287",
                    "position": "camera = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/ModelCache.java#L241",
                    "position": "begin(null);",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/ModelCache.java#L269",
                    "position": "result.meshPart.mesh = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/attributes/TextureAttribute.java#L165",
                    "position": "textureDescription.texture = texture;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/loader/G3dModelLoader.java#L336",
                    "position": "nodePart.bones.put(nodeId, transform);",
                    "message": " dereferenced expression nodePart.bones is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/loader/G3dModelLoader.java#L339",
                    "position": "jsonNode.parts[i] = nodePart;",
                    "message": " dereferenced expression jsonNode.parts is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/loader/G3dModelLoader.java#L347",
                    "position": "jsonNode.children[i] = parseNodesRecursively(child);",
                    "message": " dereferenced expression jsonNode.children is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/assets/loaders/ModelLoader.java#L63",
                    "position": "return data == null ? null : new Model(data, textureProvider);",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/loader/ObjLoader.java#L112",
                    "position": "public ModelData loadModelData(FileHandle file, ObjLoaderParameters parameters) {",
                    "message": " (Covered) method returns @Nullable, but superclass method com.badlogic.gdx.assets.loaders.ModelLoader.loadModelData(com.badlogic.gdx.files.FileHandle,P) returns @NonNull"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/environment/DirectionalShadowLight.java#L122",
                    "position": "fbo = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/decals/DecalMaterial.java#L42",
                    "position": "textureRegion.getTexture().bind(0);",
                    "message": " read of @NonNull field textureRegion before initialization"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/decals/DecalBatch.java#L164",
                    "position": "groupStrategy.beforeGroup(group.index, group.value);",
                    "message": " (Covered) passing @Nullable parameter 'group.value' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/decals/DecalBatch.java#L166",
                    "position": "render(shader, group.value);",
                    "message": " (Covered) passing @Nullable parameter 'shader' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/graphics/g3d/decals/DecalBatch.java#L230",
                    "position": "vertices = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/assets/loaders/TextureAtlasLoader.java#L49",
                    "position": "for (Page page : data.getPages()) {",
                    "message": " dereferenced expression data is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/assets/loaders/SkinLoader.java#L113",
                    "position": "this.textureAtlasPath = textureAtlasPath;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/assets/loaders/SkinLoader.java#L114",
                    "position": "this.resources = resources;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/assets/loaders/I18NBundleLoader.java#L105",
                    "position": "this.locale = locale;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/assets/loaders/I18NBundleLoader.java#L106",
                    "position": "this.encoding = encoding;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/libgdx/blob/docker/gdx/src/com/badlogic/gdx/assets/loaders/BitmapFontLoader.java#L45",
                    "position": "public BitmapFontLoader(FileHandleResolver resolver) {",
                    "message": " (Covered) initializer method does not guarantee @NonNull field data (line 49) is initialized along all control-flow paths (remember to check for exceptions or early returns)."
                }
            ],
            "size": 411
        },
        "Mockito": {
            "errors": [
                {
                    "url": "https://github.com/nimakarimipour/mockito/blob/docker/src/main/java/org/mockito/internal/util/Primitives.java#L33",
                    "position": "return (Class<T>) PRIMITIVE_TYPES.get(clazz);",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/mockito/blob/docker/src/main/java/org/mockito/internal/util/Primitives.java#L61",
                    "position": "return (T) PRIMITIVE_OR_WRAPPER_DEFAULT_VALUES.get(primitiveOrWrapperType);",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/mockito/blob/docker/src/main/java/org/mockito/internal/exceptions/Reporter.java#L234",
                    "position": "return new NoInteractionsWanted(join(\"No interactions wanted here:\", new LocationImpl(), \"But found this interaction on mock '\" + MockUtil.getMockName(undesired.getMock()) + \"':\", undesired.getLocation(), scenario));",
                    "message": " dereferenced expression undesired is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/mockito/blob/docker/src/main/java/org/mockito/internal/invocation/InterceptedInvocation.java#L199",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/mockito/blob/docker/src/main/java/org/mockito/internal/handler/NotifiedMethodInvocationReport.java#L33",
                    "position": "this.throwable = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/mockito/blob/docker/src/main/java/org/mockito/internal/handler/NotifiedMethodInvocationReport.java#L44",
                    "position": "this.returnedValue = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/mockito/blob/docker/src/main/java/org/mockito/internal/handler/MockHandlerImpl.java#L47",
                    "position": "public Object handle(Invocation invocation) throws Throwable {",
                    "message": " (Covered) method returns @Nullable, but superclass method org.mockito.invocation.MockHandler.handle(org.mockito.invocation.Invocation) returns @NonNull"
                },
                {
                    "url": "https://github.com/nimakarimipour/mockito/blob/docker/src/main/java/org/mockito/internal/stubbing/InvocationContainerImpl.java#L45",
                    "position": "this.mockStrictness = mockSettings.isLenient() ? Strictness.LENIENT : null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/mockito/blob/docker/src/main/java/org/mockito/internal/stubbing/InvocationContainerImpl.java#L104",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/mockito/blob/docker/src/main/java/org/mockito/internal/creation/settings/CreationSettings.java#L63",
                    "position": "public CreationSettings() {",
                    "message": " (Covered) initializer method does not guarantee @NonNull fields typeToMock (line 27), name (line 31), spiedInstance (line 33), defaultAnswer (line 35), mockName (line 37), outerClassInstance (line 57), constructorArgs (line 59) are initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/mockito/blob/docker/src/main/java/org/mockito/internal/configuration/plugins/PluginInitializer.java#L24",
                    "position": "this.alias = alias;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/mockito/blob/docker/src/main/java/org/mockito/ArgumentMatchers.java#L941",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/mockito/blob/docker/src/main/java/org/mockito/ArgumentMatchers.java#L977",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/mockito/blob/docker/src/main/java/org/mockito/ArgumentMatchers.java#L1019",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/mockito/blob/docker/src/main/java/org/mockito/internal/util/MockUtil.java#L63",
                    "position": "return mockMaker.getHandler(mock);",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/mockito/blob/docker/src/main/java/org/mockito/internal/MockitoCore.java#L228",
                    "position": "List<Invocation> allInvocations = ongoingStubbing.getRegisteredInvocations();",
                    "message": " dereferenced expression ongoingStubbing is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/mockito/blob/docker/src/main/java/org/mockito/internal/util/reflection/FieldInitializationReport.java#L59",
                    "position": "return fieldInstance != null ? fieldInstance.getClass() : null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/mockito/blob/docker/src/main/java/org/mockito/internal/configuration/injection/filter/OngoingInjector.java#L29",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/mockito/blob/docker/src/main/java/org/mockito/internal/configuration/IndependentAnnotationEngine.java#L56",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/mockito/blob/docker/src/main/java/org/mockito/internal/util/concurrent/WeakConcurrentMap.java#L46",
                    "position": "thread = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/mockito/blob/docker/src/main/java/org/mockito/internal/util/concurrent/WeakConcurrentMap.java#L68",
                    "position": "return value;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/mockito/blob/docker/src/main/java/org/mockito/internal/util/concurrent/WeakConcurrentMap.java#L354",
                    "position": "this.entry = entry;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/mockito/blob/docker/src/main/java/org/mockito/internal/util/concurrent/DetachedThreadLocal.java#L110",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/mockito/blob/docker/src/main/java/org/mockito/internal/util/reflection/InstrumentationMemberAccessor.java#L27",
                    "position": "private static final Instrumentation INSTRUMENTATION;",
                    "message": " (Covered) @NonNull static field INSTRUMENTATION not initialized"
                },
                {
                    "url": "https://github.com/nimakarimipour/mockito/blob/docker/src/main/java/org/mockito/internal/util/reflection/InstrumentationMemberAccessor.java#L29",
                    "position": "private static final Dispatcher DISPATCHER;",
                    "message": " (Covered) @NonNull static field DISPATCHER not initialized"
                },
                {
                    "url": "https://github.com/nimakarimipour/mockito/blob/docker/src/main/java/org/mockito/internal/util/reflection/InstrumentationMemberAccessor.java#L31",
                    "position": "private static final Throwable INITIALIZATION_ERROR;",
                    "message": " (Covered) @NonNull static field INITIALIZATION_ERROR not initialized"
                },
                {
                    "url": "https://github.com/nimakarimipour/mockito/blob/docker/src/main/java/org/mockito/internal/util/reflection/InstrumentationMemberAccessor.java#L59",
                    "position": "INSTRUMENTATION = instrumentation;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/mockito/blob/docker/src/main/java/org/mockito/internal/util/reflection/InstrumentationMemberAccessor.java#L60",
                    "position": "DISPATCHER = dispatcher;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/mockito/blob/docker/src/main/java/org/mockito/internal/util/reflection/InstrumentationMemberAccessor.java#L61",
                    "position": "INITIALIZATION_ERROR = throwable;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/mockito/blob/docker/src/main/java/org/mockito/internal/util/reflection/InstrumentationMemberAccessor.java#L195",
                    "position": "if (!type.isAssignableFrom(owner.getClass())) {",
                    "message": " dereferenced expression type is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/mockito/blob/docker/src/main/java/org/mockito/internal/framework/DefaultMockitoSession.java#L76",
                    "position": "return failure;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/mockito/blob/docker/src/main/java/org/mockito/internal/junit/JUnitSessionStore.java#L53",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/mockito/blob/docker/src/main/java/org/mockito/internal/junit/VerificationCollectorImpl.java#L76",
                    "position": "this.builder.append('\\n').append(this.numberOfFailures).append(\". \").append(message.trim()).append('\\n');",
                    "message": " dereferenced expression message is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/mockito/blob/docker/src/main/java/org/mockito/internal/verification/VerificationDataImpl.java#L25",
                    "position": "this.wanted = wanted;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/mockito/blob/docker/src/main/java/org/mockito/internal/verification/VerificationEventImpl.java#L26",
                    "position": "this.cause = cause;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/mockito/blob/docker/src/main/java/org/mockito/internal/verification/api/VerificationDataInOrderImpl.java#L23",
                    "position": "this.wanted = wanted;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/mockito/blob/docker/src/main/java/org/mockito/internal/creation/MockSettingsImpl.java#L46",
                    "position": "private Object[] constructorArgs;",
                    "message": " (Covered) @NonNull field constructorArgs not initialized"
                },
                {
                    "url": "https://github.com/nimakarimipour/mockito/blob/docker/src/main/java/org/mockito/internal/creation/MockSettingsImpl.java#L149",
                    "position": "public Object getOuterClassInstance() {",
                    "message": " (Covered) method returns @Nullable, but superclass method org.mockito.internal.creation.settings.CreationSettings.getOuterClassInstance() returns @NonNull"
                },
                {
                    "url": "https://github.com/nimakarimipour/mockito/blob/docker/src/main/java/org/mockito/internal/creation/bytebuddy/InlineBytecodeGenerator.java#L91",
                    "position": "this.getModule = getModule;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/mockito/blob/docker/src/main/java/org/mockito/internal/creation/bytebuddy/InlineBytecodeGenerator.java#L92",
                    "position": "this.canRead = canRead;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/mockito/blob/docker/src/main/java/org/mockito/internal/creation/bytebuddy/InlineBytecodeGenerator.java#L93",
                    "position": "this.redefineModule = redefineModule;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/mockito/blob/docker/src/main/java/org/mockito/internal/creation/bytebuddy/inject/MockMethodDispatcher.java#L43",
                    "position": "return DISPATCHERS.get(identifier).isConstructorMock(type);",
                    "message": " dereferenced expression DISPATCHERS.get(identifier) is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/mockito/blob/docker/src/main/java/org/mockito/internal/creation/bytebuddy/inject/MockMethodDispatcher.java#L49",
                    "position": "return DISPATCHERS.get(identifier).handleConstruction(type, object, arguments, parameterTypeNames);",
                    "message": " dereferenced expression DISPATCHERS.get(identifier) is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/mockito/blob/docker/src/main/java/org/mockito/internal/creation/bytebuddy/InlineByteBuddyMockMaker.java#L103",
                    "position": "private static final Instrumentation INSTRUMENTATION;",
                    "message": " (Covered) @NonNull static field INSTRUMENTATION not initialized"
                },
                {
                    "url": "https://github.com/nimakarimipour/mockito/blob/docker/src/main/java/org/mockito/internal/creation/bytebuddy/InlineByteBuddyMockMaker.java#L105",
                    "position": "private static final Throwable INITIALIZATION_ERROR;",
                    "message": " (Covered) @NonNull static field INITIALIZATION_ERROR not initialized"
                },
                {
                    "url": "https://github.com/nimakarimipour/mockito/blob/docker/src/main/java/org/mockito/internal/creation/bytebuddy/InlineByteBuddyMockMaker.java#L154",
                    "position": "INSTRUMENTATION = instrumentation;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/mockito/blob/docker/src/main/java/org/mockito/internal/creation/bytebuddy/InlineByteBuddyMockMaker.java#L155",
                    "position": "INITIALIZATION_ERROR = initializationError;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/mockito/blob/docker/src/main/java/org/mockito/internal/creation/bytebuddy/InlineByteBuddyMockMaker.java#L230",
                    "position": "public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {",
                    "message": " (Covered) method returns @Nullable, but superclass method org.mockito.plugins.MockMaker.<T>createMock(org.mockito.mock.MockCreationSettings<T>,org.mockito.invocation.MockHandler) returns @NonNull"
                },
                {
                    "url": "https://github.com/nimakarimipour/mockito/blob/docker/src/main/java/org/mockito/internal/creation/bytebuddy/SubclassBytecodeGenerator.java#L80",
                    "position": "this.readReplace = readReplace;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/mockito/blob/docker/src/main/java/org/mockito/internal/creation/bytebuddy/MockMethodAdvice.java#L291",
                    "position": "return accessor.invoke(origin, instance, arguments);",
                    "message": " (Covered) passing @Nullable parameter 'instance' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/mockito/blob/docker/src/main/java/org/mockito/internal/runners/DefaultInternalRunner.java#L33",
                    "position": "public Object target;",
                    "message": " (Covered) @NonNull field DefaultInternalRunner$1.target not initialized"
                },
                {
                    "url": "https://github.com/nimakarimipour/mockito/blob/docker/src/main/java/org/mockito/internal/runners/DefaultInternalRunner.java#L34",
                    "position": "private MockitoTestListener mockitoTestListener;",
                    "message": " (Covered) @NonNull field DefaultInternalRunner$1.mockitoTestListener not initialized"
                },
                {
                    "url": "https://github.com/nimakarimipour/mockito/blob/docker/src/main/java/org/mockito/internal/runners/DefaultInternalRunner.java#L67",
                    "position": "Throwable failure;",
                    "message": " (Covered) @NonNull field DefaultInternalRunner$1$2.failure not initialized"
                },
                {
                    "url": "https://github.com/nimakarimipour/mockito/blob/docker/src/main/java/org/mockito/internal/runners/DefaultInternalRunner.java#L86",
                    "position": "mockitoTestListener = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/mockito/blob/docker/src/main/java/org/mockito/internal/stubbing/answers/ThrowsException.java#L27",
                    "position": "this.throwable = throwable;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/mockito/blob/docker/src/main/java/org/mockito/internal/stubbing/answers/DoesNothing.java#L29",
                    "position": "public Object answer(InvocationOnMock invocation) {",
                    "message": " (Covered) method returns @Nullable, but superclass method org.mockito.stubbing.Answer.answer(org.mockito.invocation.InvocationOnMock) returns @NonNull"
                },
                {
                    "url": "https://github.com/nimakarimipour/mockito/blob/docker/src/main/java/org/mockito/internal/stubbing/answers/Returns.java#L22",
                    "position": "this.value = value;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/mockito/blob/docker/src/main/java/org/mockito/internal/stubbing/BaseStubbing.java#L69",
                    "position": "return stubbing;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/mockito/blob/docker/src/main/java/org/mockito/internal/stubbing/defaultanswers/ForwardsInvocations.java#L28",
                    "position": "private Object delegatedObject = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/mockito/blob/docker/src/main/java/org/mockito/internal/stubbing/defaultanswers/ReturnsSmartNulls.java#L56",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/mockito/blob/docker/src/main/java/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java#L49",
                    "position": "public Object answer(InvocationOnMock invocation) throws Throwable {",
                    "message": " (Covered) method returns @Nullable, but superclass method org.mockito.stubbing.Answer.answer(org.mockito.invocation.InvocationOnMock) returns @NonNull"
                },
                {
                    "url": "https://github.com/nimakarimipour/mockito/blob/docker/src/main/java/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java#L136",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/mockito/blob/docker/src/main/java/org/mockito/internal/stubbing/defaultanswers/RetrieveGenericsForDefaultAnswers.java#L36",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/mockito/blob/docker/src/main/java/org/mockito/internal/stubbing/defaultanswers/RetrieveGenericsForDefaultAnswers.java#L40",
                    "position": "return answerCallback.apply(null);",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/mockito/blob/docker/src/main/java/org/mockito/internal/stubbing/defaultanswers/ReturnsMoreEmptyValues.java#L72",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/mockito/blob/docker/src/main/java/org/mockito/internal/stubbing/defaultanswers/ReturnsMocks.java#L33",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/mockito/blob/docker/src/main/java/org/mockito/internal/stubbing/StubberImpl.java#L30",
                    "position": "this.strictness = strictness;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/mockito/blob/docker/src/main/java/org/mockito/runners/ConsoleSpammingMockitoJUnitRunner.java#L48",
                    "position": "WarningsCollector warningsCollector;",
                    "message": " (Covered) @NonNull field ConsoleSpammingMockitoJUnitRunner$1.warningsCollector not initialized"
                },
                {
                    "url": "https://github.com/nimakarimipour/mockito/blob/docker/src/main/java/org/mockito/runners/VerboseMockitoJUnitRunner.java#L48",
                    "position": "WarningsCollector warningsCollector;",
                    "message": " (Covered) @NonNull field VerboseMockitoJUnitRunner$1.warningsCollector not initialized"
                }
            ],
            "size": 69
        },
        "LottieAndroid": {
            "errors": [
                {
                    "url": "https://github.com/nimakarimipour/lottie-android/blob/docker/lottie/src/main/java/com/airbnb/lottie/LottieTask.java#L131",
                    "position": "if (result.getValue() != null) {",
                    "message": " dereferenced expression result is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/lottie-android/blob/docker/lottie/src/main/java/com/airbnb/lottie/LottieResult.java#L19",
                    "position": "exception = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/lottie-android/blob/docker/lottie/src/main/java/com/airbnb/lottie/LottieResult.java#L24",
                    "position": "value = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/lottie-android/blob/docker/lottie/src/main/java/com/airbnb/lottie/model/Marker.java#L16",
                    "position": "this.name = name;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/lottie-android/blob/docker/lottie/src/main/java/com/airbnb/lottie/model/content/ShapeGroup.java#L20",
                    "position": "this.name = name;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/lottie-android/blob/docker/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java#L339",
                    "position": "composition = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/lottie-android/blob/docker/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java#L675",
                    "position": "int endFrame = (int) (endMarker.startFrame + (playEndMarkerStartFrame ? 1f : 0f));",
                    "message": " dereferenced expression endMarker is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/lottie-android/blob/docker/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java#L1035",
                    "position": "elements.get(i).getResolvedElement().addValueCallback(property, callback);",
                    "message": " dereferenced expression elements.get(i).getResolvedElement() is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/lottie-android/blob/docker/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/BaseKeyframeAnimation.java#L136",
                    "position": "return cachedGetValue;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/lottie-android/blob/docker/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/TransformKeyframeAnimation.java#L75",
                    "position": "skewMatrix1 = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/lottie-android/blob/docker/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/TransformKeyframeAnimation.java#L76",
                    "position": "skewMatrix2 = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/lottie-android/blob/docker/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/TransformKeyframeAnimation.java#L77",
                    "position": "skewMatrix3 = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/lottie-android/blob/docker/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/TransformKeyframeAnimation.java#L78",
                    "position": "skewValues = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/lottie-android/blob/docker/lottie/src/main/java/com/airbnb/lottie/model/content/ShapeData.java#L39",
                    "position": "return initialPoint;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/lottie-android/blob/docker/lottie/src/main/java/com/airbnb/lottie/value/Keyframe.java#L51",
                    "position": "this.interpolator = interpolator;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/lottie-android/blob/docker/lottie/src/main/java/com/airbnb/lottie/value/Keyframe.java#L60",
                    "position": "composition = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/lottie-android/blob/docker/lottie/src/main/java/com/airbnb/lottie/value/Keyframe.java#L63",
                    "position": "interpolator = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/lottie-android/blob/docker/lottie/src/main/java/com/airbnb/lottie/model/animatable/AnimatableTransform.java#L34",
                    "position": "this(null, null, null, null, null, null, null, null, null);",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/lottie-android/blob/docker/lottie/src/main/java/com/airbnb/lottie/manager/ImageAssetManager.java#L41",
                    "position": "context = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/lottie-android/blob/docker/lottie/src/main/java/com/airbnb/lottie/manager/ImageAssetManager.java#L60",
                    "position": "Bitmap ret = asset.getBitmap();",
                    "message": " dereferenced expression asset is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/lottie-android/blob/docker/lottie/src/main/java/com/airbnb/lottie/manager/ImageAssetManager.java#L61",
                    "position": "asset.setBitmap(null);",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/lottie-android/blob/docker/lottie/src/main/java/com/airbnb/lottie/manager/ImageAssetManager.java#L64",
                    "position": "Bitmap prevBitmap = imageAssets.get(id).getBitmap();",
                    "message": " dereferenced expression imageAssets.get(id) is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/lottie-android/blob/docker/lottie/src/main/java/com/airbnb/lottie/manager/ImageAssetManager.java#L123",
                    "position": "imageAssets.get(key).setBitmap(bitmap);",
                    "message": " dereferenced expression imageAssets.get(key) is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/lottie-android/blob/docker/lottie/src/main/java/com/airbnb/lottie/manager/FontAssetManager.java#L33",
                    "position": "assetManager = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/lottie-android/blob/docker/lottie/src/main/java/com/airbnb/lottie/TextDelegate.java#L27",
                    "position": "animationView = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/lottie-android/blob/docker/lottie/src/main/java/com/airbnb/lottie/TextDelegate.java#L28",
                    "position": "drawable = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/lottie-android/blob/docker/lottie/src/main/java/com/airbnb/lottie/TextDelegate.java#L34",
                    "position": "drawable = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/lottie-android/blob/docker/lottie/src/main/java/com/airbnb/lottie/TextDelegate.java#L40",
                    "position": "animationView = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/lottie-android/blob/docker/lottie/src/main/java/com/airbnb/lottie/model/layer/CompositionLayer.java#L54",
                    "position": "for (int i = layerModels.size() - 1; i >= 0; i--) {",
                    "message": " dereferenced expression layerModels is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/lottie-android/blob/docker/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java#L296",
                    "position": "lottieDrawable.setImagesAssetsFolder(ss.imageAssetsFolder);",
                    "message": " (Covered) passing @Nullable parameter 'ss.imageAssetsFolder' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/lottie-android/blob/docker/lottie/src/main/java/com/airbnb/lottie/animation/content/FillContent.java#L55",
                    "position": "colorAnimation = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/lottie-android/blob/docker/lottie/src/main/java/com/airbnb/lottie/animation/content/FillContent.java#L56",
                    "position": "opacityAnimation = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/lottie-android/blob/docker/lottie/src/main/java/com/airbnb/lottie/animation/content/BaseStrokeContent.java#L74",
                    "position": "dashPatternOffsetAnimation = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/lottie-android/blob/docker/lottie/src/main/java/com/airbnb/lottie/animation/content/BaseStrokeContent.java#L324",
                    "position": "this.trimPath = trimPath;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/lottie-android/blob/docker/lottie/src/main/java/com/airbnb/lottie/model/content/ShapeStroke.java#L46",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/lottie-android/blob/docker/lottie/src/main/java/com/airbnb/lottie/animation/content/PolystarContent.java#L62",
                    "position": "innerRadiusAnimation = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/lottie-android/blob/docker/lottie/src/main/java/com/airbnb/lottie/animation/content/PolystarContent.java#L63",
                    "position": "innerRoundednessAnimation = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/lottie-android/blob/docker/lottie/src/main/java/com/airbnb/lottie/animation/content/PolystarContent.java#L72",
                    "position": "layer.addAnimation(innerRadiusAnimation);",
                    "message": " read of @NonNull field innerRadiusAnimation before initialization"
                },
                {
                    "url": "https://github.com/nimakarimipour/lottie-android/blob/docker/lottie/src/main/java/com/airbnb/lottie/animation/content/PolystarContent.java#L73",
                    "position": "layer.addAnimation(innerRoundednessAnimation);",
                    "message": " read of @NonNull field innerRoundednessAnimation before initialization"
                },
                {
                    "url": "https://github.com/nimakarimipour/lottie-android/blob/docker/lottie/src/main/java/com/airbnb/lottie/animation/content/PolystarContent.java#L82",
                    "position": "innerRadiusAnimation.addUpdateListener(this);",
                    "message": " read of @NonNull field innerRadiusAnimation before initialization"
                },
                {
                    "url": "https://github.com/nimakarimipour/lottie-android/blob/docker/lottie/src/main/java/com/airbnb/lottie/animation/content/PolystarContent.java#L83",
                    "position": "innerRoundednessAnimation.addUpdateListener(this);",
                    "message": " read of @NonNull field innerRoundednessAnimation before initialization"
                },
                {
                    "url": "https://github.com/nimakarimipour/lottie-android/blob/docker/lottie/src/main/java/com/airbnb/lottie/model/content/PolystarShape.java#L30",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/lottie-android/blob/docker/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/ValueCallbackKeyframeAnimation.java#L22",
                    "position": "this.valueCallbackValue = valueCallbackValue;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/lottie-android/blob/docker/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/ValueCallbackKeyframeAnimation.java#L49",
                    "position": "return valueCallback.getValueInternal(0f, 0f, valueCallbackValue, valueCallbackValue, getProgress(), getProgress(), getProgress());",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/lottie-android/blob/docker/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/ValueCallbackKeyframeAnimation.java#L49",
                    "position": "return valueCallback.getValueInternal(0f, 0f, valueCallbackValue, valueCallbackValue, getProgress(), getProgress(), getProgress());",
                    "message": " dereferenced expression valueCallback is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/lottie-android/blob/docker/lottie/src/main/java/com/airbnb/lottie/animation/content/RepeaterContent.java#L44",
                    "position": "public RepeaterContent(LottieDrawable lottieDrawable, BaseLayer layer, Repeater repeater) {",
                    "message": " (Covered) initializer method does not guarantee @NonNull field contentGroup (line 42) is initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/lottie-android/blob/docker/lottie/src/main/java/com/airbnb/lottie/animation/content/RepeaterContent.java#L119",
                    "position": "float startOpacity = this.transform.getStartOpacity().getValue() / 100f;",
                    "message": " dereferenced expression this.transform.getStartOpacity() is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/lottie-android/blob/docker/lottie/src/main/java/com/airbnb/lottie/animation/content/RepeaterContent.java#L121",
                    "position": "float endOpacity = this.transform.getEndOpacity().getValue() / 100f;",
                    "message": " dereferenced expression this.transform.getEndOpacity() is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/lottie-android/blob/docker/lottie/src/main/java/com/airbnb/lottie/parser/PolystarShapeParser.java#L81",
                    "position": "name, type, points, position, rotation, innerRadius, outerRadius,",
                    "message": " (Covered) passing @Nullable parameter 'name' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/lottie-android/blob/docker/lottie/src/main/java/com/airbnb/lottie/parser/ShapeTrimPathParser.java#L58",
                    "position": "return new ShapeTrimPath(name, type, start, end, offset, hidden);",
                    "message": " (Covered) passing @Nullable parameter 'name' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/lottie-android/blob/docker/lottie/src/main/java/com/airbnb/lottie/parser/LayerParser.java#L57",
                    "position": "Layer.LayerType.PRE_COMP, -1, null, Collections.<Mask>emptyList(),",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/lottie-android/blob/docker/lottie/src/main/java/com/airbnb/lottie/parser/LayerParser.java#L277",
                    "position": "return new Layer(shapes, composition, layerName, layerId, layerType, parentId, refId,",
                    "message": " (Covered) passing @Nullable parameter 'layerType' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/lottie-android/blob/docker/lottie/src/main/java/com/airbnb/lottie/parser/FontCharacterParser.java#L78",
                    "position": "return new FontCharacter(shapes, character, size, width, style, fontFamily);",
                    "message": " (Covered) passing @Nullable parameter 'style' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/lottie-android/blob/docker/lottie/src/main/java/com/airbnb/lottie/parser/AnimatableTransformParser.java#L124",
                    "position": "return new AnimatableTransform(anchorPoint, position, scale, rotation, opacity, startOpacity, endOpacity, skew, skewAngle);",
                    "message": " (Covered) passing @Nullable parameter 'anchorPoint' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/lottie-android/blob/docker/lottie/src/main/java/com/airbnb/lottie/parser/ShapeStrokeParser.java#L100",
                    "position": "switch (n) {",
                    "message": " switch expression n is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/lottie-android/blob/docker/lottie/src/main/java/com/airbnb/lottie/parser/ShapeStrokeParser.java#L127",
                    "position": "name, offset, lineDashPattern, color, opacity, width, capType, joinType, miterLimit, hidden);",
                    "message": " (Covered) passing @Nullable parameter 'name' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/lottie-android/blob/docker/lottie/src/main/java/com/airbnb/lottie/parser/ShapePathParser.java#L49",
                    "position": "return new ShapePath(name, ind, shape, hidden);",
                    "message": " (Covered) passing @Nullable parameter 'name' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/lottie-android/blob/docker/lottie/src/main/java/com/airbnb/lottie/parser/GradientStrokeParser.java#L135",
                    "position": "if (n.equals(\"o\")) {",
                    "message": " dereferenced expression n is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/lottie-android/blob/docker/lottie/src/main/java/com/airbnb/lottie/parser/GradientStrokeParser.java#L158",
                    "position": "name, gradientType, color, opacity, startPoint, endPoint, width, capType, joinType,",
                    "message": " (Covered) passing @Nullable parameter 'name' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/lottie-android/blob/docker/lottie/src/main/java/com/airbnb/lottie/parser/MergePathsParser.java#L39",
                    "position": "return new MergePaths(name, mode, hidden);",
                    "message": " (Covered) passing @Nullable parameter 'name' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/lottie-android/blob/docker/lottie/src/main/java/com/airbnb/lottie/parser/AnimatablePathValueParser.java#L93",
                    "position": "return new AnimatableSplitDimensionPathValue(xAnimation, yAnimation);",
                    "message": " (Covered) passing @Nullable parameter 'xAnimation' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/lottie-android/blob/docker/lottie/src/main/java/com/airbnb/lottie/parser/RepeaterParser.java#L55",
                    "position": "return new Repeater(name, copies, offset, transform, hidden);",
                    "message": " (Covered) passing @Nullable parameter 'name' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/lottie-android/blob/docker/lottie/src/main/java/com/airbnb/lottie/parser/GradientFillParser.java#L98",
                    "position": "name, gradientType, fillType, color, opacity, startPoint, endPoint, null, null, hidden);",
                    "message": " (Covered) passing @Nullable parameter 'name' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/lottie-android/blob/docker/lottie/src/main/java/com/airbnb/lottie/parser/FontParser.java#L46",
                    "position": "return new Font(family, name, style, ascent);",
                    "message": " (Covered) passing @Nullable parameter 'family' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/lottie-android/blob/docker/lottie/src/main/java/com/airbnb/lottie/parser/ShapeFillParser.java#L66",
                    "position": "return new ShapeFill(name, fillEnabled, fillType, color, opacity, hidden);",
                    "message": " (Covered) passing @Nullable parameter 'name' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/lottie-android/blob/docker/lottie/src/main/java/com/airbnb/lottie/parser/RectangleShapeParser.java#L58",
                    "position": "return new RectangleShape(name, position, size, roundedness, hidden);",
                    "message": " (Covered) passing @Nullable parameter 'name' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/lottie-android/blob/docker/lottie/src/main/java/com/airbnb/lottie/parser/KeyframeParser.java#L53",
                    "position": "pathInterpolatorCache.put(hash, interpolator);",
                    "message": " dereferenced expression pathInterpolatorCache is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/lottie-android/blob/docker/lottie/src/main/java/com/airbnb/lottie/parser/KeyframeParser.java#L134",
                    "position": "if (e.getMessage().equals(\"The Path cannot loop back on itself.\")) {",
                    "message": " dereferenced expression e.getMessage() is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/lottie-android/blob/docker/lottie/src/main/java/com/airbnb/lottie/parser/KeyframeParser.java#L156",
                    "position": "Keyframe<T> keyframe = new Keyframe<>(composition, startValue, endValue, interpolator, startFrame, null);",
                    "message": " (Covered) passing @Nullable parameter 'startValue' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/lottie-android/blob/docker/lottie/src/main/java/com/airbnb/lottie/parser/moshi/LinkedHashTreeMap.java#L114",
                    "position": "V result = created.value;",
                    "message": " dereferenced expression created is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/lottie-android/blob/docker/lottie/src/main/java/com/airbnb/lottie/parser/moshi/LinkedHashTreeMap.java#L128",
                    "position": "e.next = e.prev = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/lottie-android/blob/docker/lottie/src/main/java/com/airbnb/lottie/parser/moshi/LinkedHashTreeMap.java#L128",
                    "position": "e.next = e.prev = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/lottie-android/blob/docker/lottie/src/main/java/com/airbnb/lottie/parser/moshi/LinkedHashTreeMap.java#L259",
                    "position": "node.next = node.prev = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/lottie-android/blob/docker/lottie/src/main/java/com/airbnb/lottie/parser/moshi/LinkedHashTreeMap.java#L259",
                    "position": "node.next = node.prev = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/lottie-android/blob/docker/lottie/src/main/java/com/airbnb/lottie/parser/moshi/LinkedHashTreeMap.java#L320",
                    "position": "node.parent = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/lottie-android/blob/docker/lottie/src/main/java/com/airbnb/lottie/parser/moshi/LinkedHashTreeMap.java#L352",
                    "position": "Node<K, V> rightLeft = right.left;",
                    "message": " dereferenced expression right is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/lottie-android/blob/docker/lottie/src/main/java/com/airbnb/lottie/parser/moshi/LinkedHashTreeMap.java#L371",
                    "position": "Node<K, V> leftLeft = left.left;",
                    "message": " dereferenced expression left is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/lottie-android/blob/docker/lottie/src/main/java/com/airbnb/lottie/parser/moshi/LinkedHashTreeMap.java#L413",
                    "position": "Node<K, V> pivotLeft = pivot.left;",
                    "message": " dereferenced expression pivot is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/lottie-android/blob/docker/lottie/src/main/java/com/airbnb/lottie/parser/moshi/LinkedHashTreeMap.java#L435",
                    "position": "Node<K, V> pivotLeft = pivot.left;",
                    "message": " dereferenced expression pivot is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/lottie-android/blob/docker/lottie/src/main/java/com/airbnb/lottie/parser/moshi/LinkedHashTreeMap.java#L494",
                    "position": "Node() {",
                    "message": " (Covered) initializer method does not guarantee @NonNull fields parent (line 471), value (line 487) are initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/lottie-android/blob/docker/lottie/src/main/java/com/airbnb/lottie/parser/moshi/LinkedHashTreeMap.java#L503",
                    "position": "Node(Node<K, V> parent, K key, int hash, Node<K, V> next, Node<K, V> prev) {",
                    "message": " (Covered) initializer method does not guarantee @NonNull field value (line 487) is initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/lottie-android/blob/docker/lottie/src/main/java/com/airbnb/lottie/parser/moshi/LinkedHashTreeMap.java#L495",
                    "position": "key = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/lottie-android/blob/docker/lottie/src/main/java/com/airbnb/lottie/parser/moshi/LinkedHashTreeMap.java#L649",
                    "position": "n.parent = stackTop;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/lottie-android/blob/docker/lottie/src/main/java/com/airbnb/lottie/parser/moshi/LinkedHashTreeMap.java#L664",
                    "position": "result.parent = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/lottie-android/blob/docker/lottie/src/main/java/com/airbnb/lottie/parser/moshi/LinkedHashTreeMap.java#L718",
                    "position": "node.left = node.parent = node.right = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/lottie-android/blob/docker/lottie/src/main/java/com/airbnb/lottie/parser/moshi/LinkedHashTreeMap.java#L726",
                    "position": "node.parent = stack;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/lottie-android/blob/docker/lottie/src/main/java/com/airbnb/lottie/parser/moshi/LinkedHashTreeMap.java#L781",
                    "position": "if (stackTop.parent != null) {",
                    "message": " dereferenced expression stackTop is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/lottie-android/blob/docker/lottie/src/main/java/com/airbnb/lottie/parser/moshi/JsonUtf8Reader.java#L628",
                    "position": "if (name.equals(options.strings[i])) {",
                    "message": " dereferenced expression name is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/lottie-android/blob/docker/lottie/src/main/java/com/airbnb/lottie/parser/moshi/JsonUtf8Reader.java#L639",
                    "position": "public String nextString() throws IOException {",
                    "message": " (Covered) method returns @Nullable, but superclass method com.airbnb.lottie.parser.moshi.JsonReader.nextString() returns @NonNull"
                },
                {
                    "url": "https://github.com/nimakarimipour/lottie-android/blob/docker/lottie/src/main/java/com/airbnb/lottie/parser/AnimatableTextPropertiesParser.java#L41",
                    "position": "return new AnimatableTextProperties(null, null, null, null);",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/lottie-android/blob/docker/lottie/src/main/java/com/airbnb/lottie/parser/AnimatableTextPropertiesParser.java#L75",
                    "position": "return new AnimatableTextProperties(color, stroke, strokeWidth, tracking);",
                    "message": " (Covered) passing @Nullable parameter 'color' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/lottie-android/blob/docker/lottie/src/main/java/com/airbnb/lottie/parser/MaskParser.java#L26",
                    "position": "switch (mode) {",
                    "message": " switch expression mode is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/lottie-android/blob/docker/lottie/src/main/java/com/airbnb/lottie/parser/MaskParser.java#L63",
                    "position": "return new Mask(maskMode, maskPath, opacity, inverted);",
                    "message": " (Covered) passing @Nullable parameter 'maskMode' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/lottie-android/blob/docker/lottie/src/main/java/com/airbnb/lottie/parser/CircleShapeParser.java#L57",
                    "position": "return new CircleShape(name, position, size, reversed, hidden);",
                    "message": " (Covered) passing @Nullable parameter 'name' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/lottie-android/blob/docker/lottie/src/main/java/com/airbnb/lottie/parser/LottieCompositionMoshiParser.java#L195",
                    "position": "new LottieImageAsset(width, height, id, imageFileName, relativeFolder);",
                    "message": " (Covered) passing @Nullable parameter 'id' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/lottie-android/blob/docker/lottie/src/main/java/com/airbnb/lottie/parser/DocumentDataParser.java#L91",
                    "position": "return new DocumentData(text, fontName, size, justification, tracking, lineHeight,",
                    "message": " (Covered) passing @Nullable parameter 'text' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/lottie-android/blob/docker/lottie/src/main/java/com/airbnb/lottie/L.java#L26",
                    "position": "private static String[] sections;",
                    "message": " (Covered) @NonNull static field sections not initialized"
                },
                {
                    "url": "https://github.com/nimakarimipour/lottie-android/blob/docker/lottie/src/main/java/com/airbnb/lottie/L.java#L28",
                    "position": "private static long[] startTimeNs;",
                    "message": " (Covered) @NonNull static field startTimeNs not initialized"
                }
            ],
            "size": 98
        },
        "MPAndroid": {
            "errors": [
                {
                    "url": "https://github.com/nimakarimipour/MPAndroidChart/blob/docker/MPChartLib/src/main/java/com/github/mikephil/charting/renderer/AxisRenderer.java#L51",
                    "position": "public AxisRenderer(ViewPortHandler viewPortHandler, @Nullable() Transformer trans, AxisBase axis) {",
                    "message": " (Covered) initializer method does not guarantee @NonNull fields mTrans (line 29), mGridPaint (line 34), mAxisLabelPaint (line 39), mAxisLinePaint (line 44), mLimitLinePaint (line 49) are initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/MPAndroidChart/blob/docker/MPChartLib/src/main/java/com/github/mikephil/charting/renderer/AxisRenderer.java#L53",
                    "position": "this.mTrans = trans;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/MPAndroidChart/blob/docker/MPChartLib/src/main/java/com/github/mikephil/charting/data/BaseEntry.java#L95",
                    "position": "return mData;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/MPAndroidChart/blob/docker/MPChartLib/src/main/java/com/github/mikephil/charting/data/LineDataSet.java#L26",
                    "position": "private List<Integer> mCircleColors = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/MPAndroidChart/blob/docker/MPChartLib/src/main/java/com/github/mikephil/charting/data/DataSet.java#L274",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/MPAndroidChart/blob/docker/MPChartLib/src/main/java/com/github/mikephil/charting/data/BaseDataSet.java#L97",
                    "position": "public BaseDataSet() {",
                    "message": " (Covered) initializer method does not guarantee @NonNull fields mValueFormatter (line 53), mValueTypeface (line 58) are initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/MPAndroidChart/blob/docker/MPChartLib/src/main/java/com/github/mikephil/charting/data/BaseDataSet.java#L28",
                    "position": "protected List<Integer> mColors = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/MPAndroidChart/blob/docker/MPChartLib/src/main/java/com/github/mikephil/charting/data/BaseDataSet.java#L33",
                    "position": "protected List<Integer> mValueColors = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/MPAndroidChart/blob/docker/MPChartLib/src/main/java/com/github/mikephil/charting/data/ChartData.java#L335",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/MPAndroidChart/blob/docker/MPChartLib/src/main/java/com/github/mikephil/charting/data/ChartData.java#L731",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/MPAndroidChart/blob/docker/MPChartLib/src/main/java/com/github/mikephil/charting/highlight/Highlight.java#L187",
                    "position": "return axis;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/MPAndroidChart/blob/docker/MPChartLib/src/main/java/com/github/mikephil/charting/charts/Chart.java#L177",
                    "position": "public Chart(Context context) {",
                    "message": " (Covered) initializer method does not guarantee @NonNull field mRenderer (line 155) is initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/MPAndroidChart/blob/docker/MPChartLib/src/main/java/com/github/mikephil/charting/charts/Chart.java#L185",
                    "position": "public Chart(Context context, AttributeSet attrs) {",
                    "message": " (Covered) initializer method does not guarantee @NonNull field mRenderer (line 155) is initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/MPAndroidChart/blob/docker/MPChartLib/src/main/java/com/github/mikephil/charting/charts/Chart.java#L193",
                    "position": "public Chart(Context context, AttributeSet attrs, int defStyle) {",
                    "message": " (Covered) initializer method does not guarantee @NonNull field mRenderer (line 155) is initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/MPAndroidChart/blob/docker/MPChartLib/src/main/java/com/github/mikephil/charting/charts/Chart.java#L76",
                    "position": "protected T mData = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/MPAndroidChart/blob/docker/MPChartLib/src/main/java/com/github/mikephil/charting/charts/Chart.java#L293",
                    "position": "mData = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/MPAndroidChart/blob/docker/MPChartLib/src/main/java/com/github/mikephil/charting/charts/Chart.java#L295",
                    "position": "mIndicesToHighlight = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/MPAndroidChart/blob/docker/MPChartLib/src/main/java/com/github/mikephil/charting/charts/Chart.java#L643",
                    "position": "mIndicesToHighlight = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/MPAndroidChart/blob/docker/MPChartLib/src/main/java/com/github/mikephil/charting/charts/Chart.java#L649",
                    "position": "mIndicesToHighlight = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/MPAndroidChart/blob/docker/MPChartLib/src/main/java/com/github/mikephil/charting/renderer/YAxisRenderer.java#L192",
                    "position": "mZeroLinePaint.setColor(mYAxis.getZeroLineColor());",
                    "message": " read of @NonNull field mZeroLinePaint before initialization"
                },
                {
                    "url": "https://github.com/nimakarimipour/MPAndroidChart/blob/docker/MPChartLib/src/main/java/com/github/mikephil/charting/renderer/BarChartRenderer.java#L107",
                    "position": "BarBuffer buffer = mBarBuffers[index];",
                    "message": " read of @NonNull field mBarBuffers before initialization"
                },
                {
                    "url": "https://github.com/nimakarimipour/MPAndroidChart/blob/docker/MPChartLib/src/main/java/com/github/mikephil/charting/data/BarEntry.java#L185",
                    "position": "return mRanges;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/MPAndroidChart/blob/docker/MPChartLib/src/main/java/com/github/mikephil/charting/utils/Fill.java#L104",
                    "position": "return mGradientColors;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/MPAndroidChart/blob/docker/MPChartLib/src/main/java/com/github/mikephil/charting/renderer/PieChartRenderer.java#L76",
                    "position": "public PieChartRenderer(PieChart chart, ChartAnimator animator, ViewPortHandler viewPortHandler) {",
                    "message": " (Covered) initializer method does not guarantee @NonNull fields mCenterTextLayout (line 59), mBitmapCanvas (line 74) are initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/MPAndroidChart/blob/docker/MPChartLib/src/main/java/com/github/mikephil/charting/renderer/PieChartRenderer.java#L467",
                    "position": "c.drawBitmap(mDrawBitmap.get(), 0, 0, null);",
                    "message": " dereferenced expression mDrawBitmap is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/MPAndroidChart/blob/docker/MPChartLib/src/main/java/com/github/mikephil/charting/renderer/PieChartRenderer.java#L712",
                    "position": "mBitmapCanvas = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/MPAndroidChart/blob/docker/MPChartLib/src/main/java/com/github/mikephil/charting/charts/PieChart.java#L120",
                    "position": "mXAxis = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/MPAndroidChart/blob/docker/MPChartLib/src/main/java/com/github/mikephil/charting/data/PieData.java#L66",
                    "position": "public IPieDataSet getDataSetByIndex(int index) {",
                    "message": " (Covered) method returns @Nullable, but superclass method com.github.mikephil.charting.data.ChartData.getDataSetByIndex(int) returns @NonNull"
                },
                {
                    "url": "https://github.com/nimakarimipour/MPAndroidChart/blob/docker/MPChartLib/src/main/java/com/github/mikephil/charting/renderer/LineChartRenderer.java#L139",
                    "position": "drawCubicFill(mBitmapCanvas, dataSet, cubicFillPath, trans, mXBounds);",
                    "message": " read of @NonNull field mBitmapCanvas before initialization"
                },
                {
                    "url": "https://github.com/nimakarimipour/MPAndroidChart/blob/docker/MPChartLib/src/main/java/com/github/mikephil/charting/renderer/LineChartRenderer.java#L144",
                    "position": "mBitmapCanvas.drawPath(cubicPath, mRenderPaint);",
                    "message": " read of @NonNull field mBitmapCanvas before initialization"
                },
                {
                    "url": "https://github.com/nimakarimipour/MPAndroidChart/blob/docker/MPChartLib/src/main/java/com/github/mikephil/charting/renderer/LineChartRenderer.java#L547",
                    "position": "mBitmapCanvas = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/MPAndroidChart/blob/docker/MPChartLib/src/main/java/com/github/mikephil/charting/charts/CombinedChart.java#L119",
                    "position": "public LineData getLineData() {",
                    "message": " (Covered) method returns @Nullable, but superclass method com.github.mikephil.charting.interfaces.dataprovider.LineDataProvider.getLineData() returns @NonNull"
                },
                {
                    "url": "https://github.com/nimakarimipour/MPAndroidChart/blob/docker/MPChartLib/src/main/java/com/github/mikephil/charting/charts/CombinedChart.java#L127",
                    "position": "public BarData getBarData() {",
                    "message": " (Covered) method returns @Nullable, but superclass method com.github.mikephil.charting.interfaces.dataprovider.BarDataProvider.getBarData() returns @NonNull"
                },
                {
                    "url": "https://github.com/nimakarimipour/MPAndroidChart/blob/docker/MPChartLib/src/main/java/com/github/mikephil/charting/charts/CombinedChart.java#L135",
                    "position": "public ScatterData getScatterData() {",
                    "message": " (Covered) method returns @Nullable, but superclass method com.github.mikephil.charting.interfaces.dataprovider.ScatterDataProvider.getScatterData() returns @NonNull"
                },
                {
                    "url": "https://github.com/nimakarimipour/MPAndroidChart/blob/docker/MPChartLib/src/main/java/com/github/mikephil/charting/charts/CombinedChart.java#L143",
                    "position": "public CandleData getCandleData() {",
                    "message": " (Covered) method returns @Nullable, but superclass method com.github.mikephil.charting.interfaces.dataprovider.CandleDataProvider.getCandleData() returns @NonNull"
                },
                {
                    "url": "https://github.com/nimakarimipour/MPAndroidChart/blob/docker/MPChartLib/src/main/java/com/github/mikephil/charting/charts/CombinedChart.java#L151",
                    "position": "public BubbleData getBubbleData() {",
                    "message": " (Covered) method returns @Nullable, but superclass method com.github.mikephil.charting.interfaces.dataprovider.BubbleDataProvider.getBubbleData() returns @NonNull"
                },
                {
                    "url": "https://github.com/nimakarimipour/MPAndroidChart/blob/docker/MPChartLib/src/main/java/com/github/mikephil/charting/charts/CombinedChart.java#L241",
                    "position": "int entryIndex = set.getEntryIndex(e);",
                    "message": " dereferenced expression set is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/MPAndroidChart/blob/docker/MPChartLib/src/main/java/com/github/mikephil/charting/listener/BarLineChartTouchListener.java#L182",
                    "position": "velocityTracker.computeCurrentVelocity(1000, Utils.getMaximumFlingVelocity());",
                    "message": " dereferenced expression velocityTracker is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/MPAndroidChart/blob/docker/MPChartLib/src/main/java/com/github/mikephil/charting/utils/Utils.java#L419",
                    "position": "tracker.computeCurrentVelocity(1000, mMaximumFlingVelocity);",
                    "message": " dereferenced expression tracker is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/MPAndroidChart/blob/docker/MPChartLib/src/main/java/com/github/mikephil/charting/jobs/AnimatedMoveViewJob.java#L20",
                    "position": "pool = ObjectPool.create(4, new AnimatedMoveViewJob(null, 0, 0, null, null, 0, 0, 0));",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/MPAndroidChart/blob/docker/MPChartLib/src/main/java/com/github/mikephil/charting/jobs/AnimatedMoveViewJob.java#L60",
                    "position": "return new AnimatedMoveViewJob(null, 0, 0, null, null, 0, 0, 0);",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/MPAndroidChart/blob/docker/MPChartLib/src/main/java/com/github/mikephil/charting/jobs/ZoomJob.java#L20",
                    "position": "pool = ObjectPool.create(1, new ZoomJob(null, 0, 0, 0, 0, null, null, null));",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/MPAndroidChart/blob/docker/MPChartLib/src/main/java/com/github/mikephil/charting/jobs/ZoomJob.java#L75",
                    "position": "return new ZoomJob(null, 0, 0, 0, 0, null, null, null);",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/MPAndroidChart/blob/docker/MPChartLib/src/main/java/com/github/mikephil/charting/jobs/MoveViewJob.java#L17",
                    "position": "pool = ObjectPool.create(2, new MoveViewJob(null, 0, 0, null, null));",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/MPAndroidChart/blob/docker/MPChartLib/src/main/java/com/github/mikephil/charting/jobs/AnimatedZoomJob.java#L24",
                    "position": "pool = ObjectPool.create(8, new AnimatedZoomJob(null, null, null, null, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0));",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/MPAndroidChart/blob/docker/MPChartLib/src/main/java/com/github/mikephil/charting/jobs/AnimatedZoomJob.java#L109",
                    "position": "return new AnimatedZoomJob(null, null, null, null, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/MPAndroidChart/blob/docker/MPChartLib/src/main/java/com/github/mikephil/charting/data/BarDataSet.java#L42",
                    "position": "protected List<Fill> mFills = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                }
            ],
            "size": 47
        },
        "PhotoView": {
            "errors": [
                {
                    "url": "https://github.com/nimakarimipour/PhotoView/blob/docker/photoview/src/main/java/com/github/chrisbanes/photoview/PhotoViewAttacher.java#L137",
                    "position": "if (mScaleDragDetector.isScaling()) {",
                    "message": " dereferenced expression mScaleDragDetector is @Nullable"
                }
            ],
            "size": 1
        },
        "Jadx": {
            "errors": [
                {
                    "url": "https://github.com/nimakarimipour/jadx/blob/docker/jadx-core/src/main/java/jadx/core/dex/instructions/args/ArgType.java#L180",
                    "position": "public ArgType selectFirst() {",
                    "message": " (Covered) method returns @Nullable, but superclass method jadx.core.dex.instructions.args.ArgType.selectFirst() returns @NonNull"
                },
                {
                    "url": "https://github.com/nimakarimipour/jadx/blob/docker/jadx-core/src/main/java/jadx/core/dex/instructions/args/ArgType.java#L585",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/jadx/blob/docker/jadx-core/src/main/java/jadx/core/dex/instructions/args/ArgType.java#L609",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/jadx/blob/docker/jadx-core/src/main/java/jadx/core/dex/instructions/args/ArgType.java#L625",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/jadx/blob/docker/jadx-core/src/main/java/jadx/core/dex/instructions/args/ArgType.java#L651",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/jadx/blob/docker/jadx-core/src/main/java/jadx/core/dex/instructions/args/ArgType.java#L779",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/jadx/blob/docker/jadx-core/src/main/java/jadx/core/dex/info/ClassInfo.java#L28",
                    "position": "private ClassInfo(RootNode root, ArgType type, boolean inner) {",
                    "message": " (Covered) initializer method does not guarantee @NonNull field pkg (line 18) is initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/jadx/blob/docker/jadx-core/src/main/java/jadx/core/dex/info/ClassInfo.java#L94",
                    "position": "return parentClass.getAliasPkg();",
                    "message": " dereferenced expression parentClass is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/jadx/blob/docker/jadx-core/src/main/java/jadx/core/dex/info/ClassInfo.java#L143",
                    "position": "pkg = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/jadx/blob/docker/jadx-core/src/main/java/jadx/core/dex/info/ClassInfo.java#L223",
                    "position": "return parentClass;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/jadx/blob/docker/jadx-core/src/main/java/jadx/core/dex/info/ClassInfo.java#L231",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/jadx/blob/docker/jadx-core/src/main/java/jadx/core/dex/nodes/ClassNode.java#L149",
                    "position": "accFlagsValue = (Integer) a.getValues().get(\"accessFlags\").getValue();",
                    "message": " dereferenced expression a.getValues().get(\"accessFlags\") is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/jadx/blob/docker/jadx-core/src/main/java/jadx/core/dex/nodes/ClassNode.java#L167",
                    "position": "this.clsData = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/jadx/blob/docker/jadx-core/src/main/java/jadx/core/dex/nodes/ClassNode.java#L316",
                    "position": "return superClass;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/jadx/blob/docker/jadx-core/src/main/java/jadx/core/dex/nodes/ClassNode.java#L522",
                    "position": "return accessFlags;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/jadx/blob/docker/jadx-core/src/main/java/jadx/core/dex/attributes/AttrNode.java#L63",
                    "position": "return storage.get(type);",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/jadx/blob/docker/jadx-core/src/main/java/jadx/core/dex/attributes/AttrNode.java#L68",
                    "position": "return storage.getAnnotation(cls);",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/jadx/blob/docker/jadx-core/src/main/java/jadx/api/ResourceFile.java#L56",
                    "position": "this.decompiler = decompiler;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/jadx/blob/docker/jadx-core/src/main/java/jadx/core/xmlgen/ResTableParser.java#L162",
                    "position": "PackageChunk pkg = new PackageChunk(id, name, typeStrings, keyStrings);",
                    "message": " (Covered) passing @Nullable parameter 'typeStrings' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/jadx/blob/docker/jadx-core/src/main/java/jadx/core/xmlgen/CommonBinaryParser.java#L13",
                    "position": "is.checkInt16(RES_STRING_POOL_TYPE, \"String pool expected\");",
                    "message": " read of @NonNull field is before initialization"
                },
                {
                    "url": "https://github.com/nimakarimipour/jadx/blob/docker/jadx-core/src/main/java/jadx/core/dex/nodes/MethodNode.java#L112",
                    "position": "this.codeReader = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/jadx/blob/docker/jadx-core/src/main/java/jadx/core/dex/nodes/MethodNode.java#L115",
                    "position": "this.codeReader = codeReader.copy();",
                    "message": " dereferenced expression codeReader is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/jadx/blob/docker/jadx-core/src/main/java/jadx/core/dex/nodes/MethodNode.java#L135",
                    "position": "blocks = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/jadx/blob/docker/jadx-core/src/main/java/jadx/core/dex/nodes/MethodNode.java#L137",
                    "position": "exitBlocks = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/jadx/blob/docker/jadx-core/src/main/java/jadx/core/dex/nodes/MethodNode.java#L185",
                    "position": "for (InsnNode insnNode : instructions) {",
                    "message": " enhanced-for expression instructions is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/jadx/blob/docker/jadx-core/src/main/java/jadx/core/dex/nodes/MethodNode.java#L331",
                    "position": "return instructions;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/jadx/blob/docker/jadx-core/src/main/java/jadx/core/dex/nodes/MethodNode.java#L356",
                    "position": "return enterBlock;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/jadx/blob/docker/jadx-core/src/main/java/jadx/core/dex/nodes/MethodNode.java#L463",
                    "position": "List<EncodedValue> types = (List<EncodedValue>) an.getDefaultValue().getValue();",
                    "message": " dereferenced expression an.getDefaultValue() is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/jadx/blob/docker/jadx-core/src/main/java/jadx/core/dex/nodes/MethodNode.java#L556",
                    "position": "return region;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/jadx/blob/docker/jadx-core/src/main/java/jadx/core/dex/visitors/typeinference/TypeCompare.java#L236",
                    "position": "TypeCompareEnum wildcardCompare = compareTypes(first.getWildcardType(), second.getWildcardType());",
                    "message": " (Covered) passing @Nullable parameter 'first.getWildcardType()' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/jadx/blob/docker/jadx-core/src/main/java/jadx/core/dex/instructions/args/RegisterArg.java#L99",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/jadx/blob/docker/jadx-core/src/main/java/jadx/core/dex/instructions/args/RegisterArg.java#L159",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/jadx/blob/docker/jadx-core/src/main/java/jadx/core/dex/nodes/InsnNode.java#L93",
                    "position": "return result;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/jadx/blob/docker/jadx-core/src/main/java/jadx/core/dex/nodes/BlockNode.java#L143",
                    "position": "this.doms = doms;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/jadx/blob/docker/jadx-core/src/main/java/jadx/core/dex/nodes/BlockNode.java#L147",
                    "position": "return domFrontier;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/jadx/blob/docker/jadx-core/src/main/java/jadx/core/dex/instructions/args/SSAVar.java#L220",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/jadx/blob/docker/jadx-core/src/main/java/jadx/core/dex/regions/Region.java#L15",
                    "position": "super(parent);",
                    "message": " (Covered) passing @Nullable parameter 'parent' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/jadx/blob/docker/jadx-core/src/main/java/jadx/core/codegen/CodeWriter.java#L109",
                    "position": "offset += str.length();",
                    "message": " dereferenced expression str is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/jadx/blob/docker/jadx-core/src/main/java/jadx/core/codegen/CodeWriter.java#L252",
                    "position": "buf = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/jadx/blob/docker/jadx-core/src/main/java/jadx/core/dex/attributes/nodes/MethodInlineAttr.java#L16",
                    "position": "private static final MethodInlineAttr INLINE_NOT_NEEDED = new MethodInlineAttr(null, null);",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/jadx/blob/docker/jadx-core/src/main/java/jadx/api/CodePosition.java#L20",
                    "position": "this.node = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/jadx/blob/docker/jadx-core/src/main/java/jadx/api/JavaClass.java#L35",
                    "position": "this.parent = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/jadx/blob/docker/jadx-core/src/main/java/jadx/api/JavaClass.java#L42",
                    "position": "this.decompiler = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/jadx/blob/docker/jadx-core/src/main/java/jadx/api/JadxDecompiler.java#L128",
                    "position": "root = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/jadx/blob/docker/jadx-core/src/main/java/jadx/api/JadxDecompiler.java#L340",
                    "position": "javaClass.getMethods().forEach(mth -> methodsMap.put(mth.getMethodNode(), mth));",
                    "message": " dereferenced expression javaClass is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/jadx/blob/docker/jadx-core/src/main/java/jadx/api/JadxDecompiler.java#L463",
                    "position": "jCls.decompile();",
                    "message": " dereferenced expression jCls is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/jadx/blob/docker/jadx-core/src/main/java/jadx/core/xmlgen/BinaryXMLParser.java#L71",
                    "position": "public BinaryXMLParser(RootNode rootNode) {",
                    "message": " (Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 45), strings (line 51), valuesParser (line 57), appPackageName (line 69) are initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/jadx/blob/docker/jadx-core/src/main/java/jadx/core/xmlgen/BinaryXMLParser.java#L92",
                    "position": "nsMap = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/jadx/blob/docker/jadx-core/src/main/java/jadx/core/xmlgen/entry/ValuesParser.java#L20",
                    "position": "private static Map<Integer, String> androidResMap;",
                    "message": " (Covered) @NonNull static field androidResMap not initialized"
                },
                {
                    "url": "https://github.com/nimakarimipour/jadx/blob/docker/jadx-core/src/main/java/jadx/core/xmlgen/entry/ValuesParser.java#L84",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/jadx/blob/docker/jadx-core/src/main/java/jadx/core/dex/instructions/mods/ConstructorInsn.java#L73",
                    "position": "public RegisterArg getInstanceArg() {",
                    "message": " (Covered) method returns @Nullable, but superclass method jadx.core.dex.instructions.BaseInvokeNode.getInstanceArg() returns @NonNull"
                },
                {
                    "url": "https://github.com/nimakarimipour/jadx/blob/docker/jadx-core/src/main/java/jadx/core/dex/instructions/InvokeNode.java#L52",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/jadx/blob/docker/jadx-core/src/main/java/jadx/core/xmlgen/entry/EntryConfig.java#L138",
                    "position": "this.localeScript = localeScript;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/jadx/blob/docker/jadx-core/src/main/java/jadx/core/xmlgen/entry/EntryConfig.java#L139",
                    "position": "this.localeVariant = localeVariant;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/jadx/blob/docker/jadx-core/src/main/java/jadx/core/clsp/ClsSet.java#L181",
                    "position": "return cls;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/jadx/blob/docker/jadx-core/src/main/java/jadx/core/clsp/ClsSet.java#L359",
                    "position": "nClass.setParents(readArgTypesArray(in));",
                    "message": " (Covered) passing @Nullable parameter 'readArgTypesArray(in)' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/jadx/blob/docker/jadx-core/src/main/java/jadx/core/clsp/ClsSet.java#L425",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/jadx/blob/docker/jadx-core/src/main/java/jadx/core/deobf/Deobfuscator.java#L328",
                    "position": "return result;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/jadx/blob/docker/jadx-core/src/main/java/jadx/core/codegen/ClassGen.java#L75",
                    "position": "this.parentGen = parentClsGen;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/jadx/blob/docker/jadx-core/src/main/java/jadx/core/dex/instructions/mods/TernaryInsn.java#L31",
                    "position": "private TernaryInsn() {",
                    "message": " (Covered) initializer method does not guarantee @NonNull field condition (line 14) is initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/jadx/blob/docker/jadx-core/src/main/java/jadx/core/dex/regions/conditions/IfCondition.java#L47",
                    "position": "this.compare = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/jadx/blob/docker/jadx-core/src/main/java/jadx/core/dex/regions/conditions/IfCondition.java#L63",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/jadx/blob/docker/jadx-core/src/main/java/jadx/core/utils/BlockUtils.java#L302",
                    "position": "if (!bitSet.isEmpty()) {",
                    "message": " dereferenced expression bitSet is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/jadx/blob/docker/jadx-core/src/main/java/jadx/core/utils/BlockUtils.java#L318",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/jadx/blob/docker/jadx-core/src/main/java/jadx/core/utils/BlockUtils.java#L721",
                    "position": "exitBitSet.clear();",
                    "message": " dereferenced expression exitBitSet is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/jadx/blob/docker/jadx-core/src/main/java/jadx/core/utils/BlockUtils.java#L739",
                    "position": "d.and(scPDoms);",
                    "message": " dereferenced expression d is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/jadx/blob/docker/jadx-core/src/main/java/jadx/core/utils/BlockUtils.java#L742",
                    "position": "d.set(block.getId());",
                    "message": " dereferenced expression d is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/jadx/blob/docker/jadx-core/src/main/java/jadx/core/utils/BlockUtils.java#L751",
                    "position": "postDoms.clear(block.getId());",
                    "message": " dereferenced expression postDoms is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/jadx/blob/docker/jadx-core/src/main/java/jadx/core/dex/instructions/IfNode.java#L65",
                    "position": "BlockNode tmp = thenBlock;",
                    "message": " read of @NonNull field thenBlock before initialization"
                },
                {
                    "url": "https://github.com/nimakarimipour/jadx/blob/docker/jadx-core/src/main/java/jadx/core/dex/instructions/IfNode.java#L66",
                    "position": "thenBlock = elseBlock;",
                    "message": " read of @NonNull field elseBlock before initialization"
                },
                {
                    "url": "https://github.com/nimakarimipour/jadx/blob/docker/jadx-core/src/main/java/jadx/core/dex/instructions/FillArrayData.java#L34",
                    "position": "this(payload.getData(), payload.getSize(), payload.getElementSize());",
                    "message": " dereferenced expression payload is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/jadx/blob/docker/jadx-core/src/main/java/jadx/core/utils/InsnUtils.java#L161",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/jadx/blob/docker/jadx-core/src/main/java/jadx/core/utils/InsnUtils.java#L176",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/jadx/blob/docker/jadx-core/src/main/java/jadx/core/utils/InsnRemover.java#L152",
                    "position": "unbindInsn(mth, wrap.getWrapInsn());",
                    "message": " (Covered) passing @Nullable parameter 'mth' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/jadx/blob/docker/jadx-core/src/main/java/jadx/core/xmlgen/ManifestAttributes.java#L67",
                    "position": "return instance;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/jadx/blob/docker/jadx-core/src/main/java/jadx/core/codegen/json/JsonCodeGen.java#L179",
                    "position": "jsonCodeLine.setSourceLine(lineMapping.get(line));",
                    "message": " (Covered) passing @Nullable parameter 'lineMapping.get(line)' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/jadx/blob/docker/jadx-core/src/main/java/jadx/core/dex/regions/conditions/IfRegion.java#L52",
                    "position": "this.elseRegion = elseRegion;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/jadx/blob/docker/jadx-core/src/main/java/jadx/core/dex/regions/loops/LoopRegion.java#L94",
                    "position": "List<InsnNode> insns = preCondition.getInstructions();",
                    "message": " dereferenced expression preCondition is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/jadx/blob/docker/jadx-core/src/main/java/jadx/core/dex/regions/loops/LoopRegion.java#L117",
                    "position": "if (!found && ifInsn.containsVar(res)) {",
                    "message": " dereferenced expression ifInsn is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/jadx/blob/docker/jadx-core/src/main/java/jadx/core/dex/instructions/SwitchData.java#L18",
                    "position": "this.size = payload.getSize();",
                    "message": " dereferenced expression payload is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/jadx/blob/docker/jadx-core/src/main/java/jadx/core/dex/instructions/SwitchInsn.java#L33",
                    "position": "public SwitchInsn(InsnArg arg, int dataTarget, boolean packed) {",
                    "message": " (Covered) initializer method does not guarantee @NonNull fields targetBlocks (line 29), defTargetBlock (line 31) are initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/jadx/blob/docker/jadx-core/src/main/java/jadx/core/dex/visitors/SimplifyVisitor.java#L49",
                    "position": "private MethodInfo stringGetBytesMth;",
                    "message": " (Covered) @NonNull field stringGetBytesMth not initialized"
                },
                {
                    "url": "https://github.com/nimakarimipour/jadx/blob/docker/jadx-core/src/main/java/jadx/core/dex/visitors/blocksmaker/BlockProcessor.java#L787",
                    "position": "block.setIDom(null);",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/jadx/blob/docker/jadx-core/src/main/java/jadx/core/dex/visitors/regions/RegionMaker.java#L321",
                    "position": "LoopRegion loopRegion = new LoopRegion(curRegion, loop, null, false);",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/jadx/blob/docker/jadx-core/src/main/java/jadx/core/dex/visitors/regions/RegionMaker.java#L441",
                    "position": "EdgeInsnAttr.addEdgeInsn(insertBlock, insertBlock.getSuccessors().get(0), breakInsn);",
                    "message": " (Covered) passing @Nullable parameter 'insertBlock' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/jadx/blob/docker/jadx-core/src/main/java/jadx/core/dex/visitors/regions/RegionMaker.java#L441",
                    "position": "EdgeInsnAttr.addEdgeInsn(insertBlock, insertBlock.getSuccessors().get(0), breakInsn);",
                    "message": " dereferenced expression insertBlock is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/jadx/blob/docker/jadx-core/src/main/java/jadx/core/dex/visitors/regions/IfMakerHelper.java#L41",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/jadx/blob/docker/jadx-core/src/main/java/jadx/core/dex/regions/conditions/IfInfo.java#L42",
                    "position": "this.thenBlock = thenBlock;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/jadx/blob/docker/jadx-core/src/main/java/jadx/core/dex/regions/conditions/IfInfo.java#L43",
                    "position": "this.elseBlock = elseBlock;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/jadx/blob/docker/jadx-core/src/main/java/jadx/core/dex/visitors/regions/variables/VarUsage.java#L17",
                    "position": "this.var = var;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/jadx/blob/docker/jadx-core/src/main/java/jadx/core/dex/visitors/regions/ProcessTryCatchRegions.java#L100",
                    "position": "if (!wrapBlocks(region, tb, dominator)) {",
                    "message": " (Covered) passing @Nullable parameter 'tb' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/jadx/blob/docker/jadx-core/src/main/java/jadx/core/dex/visitors/typeinference/TypeBoundConst.java#L23",
                    "position": "this.arg = arg;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/jadx/blob/docker/jadx-core/src/main/java/jadx/core/dex/visitors/typeinference/TypeInferenceVisitor.java#L87",
                    "position": "for (Function<MethodNode, Boolean> resolver : resolvers) {",
                    "message": " enhanced-for expression resolvers is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/jadx/blob/docker/jadx-core/src/main/java/jadx/core/dex/visitors/AttachMethodDetails.java#L41",
                    "position": "IMethodDetails methodDetails = methodUtils.getMethodDetails(insn.getCallMth());",
                    "message": " read of @NonNull field methodUtils before initialization"
                },
                {
                    "url": "https://github.com/nimakarimipour/jadx/blob/docker/jadx-core/src/main/java/jadx/core/dex/visitors/ExtractFieldInit.java#L261",
                    "position": "field.addAttr(FieldInitAttr.insnValue(classInitMth, assignInsn));",
                    "message": " dereferenced expression field is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/jadx/blob/docker/jadx-core/src/main/java/jadx/core/dex/visitors/ShadowFieldVisitor.java#L139",
                    "position": "FieldFixInfo fieldFixInfo = fixInfoMap.get(type.getObject());",
                    "message": " dereferenced expression fixInfoMap is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/jadx/blob/docker/jadx-core/src/main/java/jadx/core/dex/visitors/ShadowFieldVisitor.java#L143",
                    "position": "FieldFixType fieldFixType = fieldFixInfo.fieldFixMap.get(fieldInfo);",
                    "message": " dereferenced expression fieldFixInfo.fieldFixMap is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/jadx/blob/docker/jadx-core/src/main/java/jadx/core/dex/visitors/SignatureProcessor.java#L161",
                    "position": "TypeCompareEnum result = root.getTypeCompare().compareTypes(parsedType, currentType);",
                    "message": " read of @NonNull field root before initialization"
                },
                {
                    "url": "https://github.com/nimakarimipour/jadx/blob/docker/jadx-core/src/main/java/jadx/core/dex/nodes/parser/SignatureParser.java#L55",
                    "position": "List<EncodedValue> values = (List<EncodedValue>) a.getDefaultValue().getValue();",
                    "message": " dereferenced expression a.getDefaultValue() is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/jadx/blob/docker/jadx-core/src/main/java/jadx/core/dex/nodes/parser/SignatureParser.java#L164",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/jadx/blob/docker/jadx-core/src/main/java/jadx/core/dex/visitors/DeboxingVisitor.java#L85",
                    "position": "if (valueOfMths.contains(callMth)) {",
                    "message": " dereferenced expression valueOfMths is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/jadx/blob/docker/jadx-core/src/main/java/jadx/core/dex/visitors/MethodInvokeVisitor.java#L102",
                    "position": "List<IMethodDetails> overloadMethods = root.getMethodUtils().collectOverloadedMethods(callCls, callMth);",
                    "message": " read of @NonNull field root before initialization"
                },
                {
                    "url": "https://github.com/nimakarimipour/jadx/blob/docker/jadx-core/src/main/java/jadx/core/export/TemplateFile.java#L32",
                    "position": "private StringBuilder curVariable;",
                    "message": " (Covered) @NonNull field TemplateFile$ParserState.curVariable not initialized"
                }
            ],
            "size": 103
        },
        "Gson": {
            "errors": [
                {
                    "url": "https://github.com/nimakarimipour/gson/blob/docker/gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java#L92",
                    "position": "return node != null ? node.value : null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/gson/blob/docker/gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java#L106",
                    "position": "V result = created.value;",
                    "message": " dereferenced expression created is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/gson/blob/docker/gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java#L250",
                    "position": "node.left = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/gson/blob/docker/gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java#L258",
                    "position": "node.right = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/gson/blob/docker/gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java#L265",
                    "position": "node.left = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/gson/blob/docker/gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java#L268",
                    "position": "node.right = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/gson/blob/docker/gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java#L270",
                    "position": "replaceInParent(node, null);",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/gson/blob/docker/gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java#L458",
                    "position": "Node() {",
                    "message": " (Covered) initializer method does not guarantee @NonNull fields left (line 441), right (line 443), value (line 451) are initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/gson/blob/docker/gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java#L466",
                    "position": "Node(@Nullable() Node<K, V> parent, K key, Node<K, V> next, Node<K, V> prev) {",
                    "message": " (Covered) initializer method does not guarantee @NonNull fields left (line 441), right (line 443), value (line 451) are initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/gson/blob/docker/gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java#L459",
                    "position": "key = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/gson/blob/docker/gson/src/main/java/com/google/gson/TypeAdapter.java#L201",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/gson/blob/docker/gson/src/main/java/com/google/gson/TypeAdapter.java#L203",
                    "position": "return TypeAdapter.this.read(reader);",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/gson/blob/docker/gson/src/main/java/com/google/gson/stream/JsonReader.java#L855",
                    "position": "return result;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/gson/blob/docker/gson/src/main/java/com/google/gson/reflect/TypeToken.java#L311",
                    "position": "return new TypeToken<Object>($Gson$Types.newParameterizedTypeWithOwner(null, rawType, typeArguments));",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/gson/blob/docker/gson/src/main/java/com/google/gson/internal/reflect/UnsafeReflectionAccessor.java#L36",
                    "position": "private final Object theUnsafe = getUnsafeInstance();",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/gson/blob/docker/gson/src/main/java/com/google/gson/internal/reflect/UnsafeReflectionAccessor.java#L38",
                    "position": "private final Field overrideField = getOverrideField();",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/gson/blob/docker/gson/src/main/java/com/google/gson/internal/reflect/UnsafeReflectionAccessor.java#L60",
                    "position": "Method method = unsafeClass.getMethod(\"objectFieldOffset\", Field.class);",
                    "message": " dereferenced expression unsafeClass is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/gson/blob/docker/gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java#L115",
                    "position": "V result = created.value;",
                    "message": " dereferenced expression created is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/gson/blob/docker/gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java#L129",
                    "position": "e.next = e.prev = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/gson/blob/docker/gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java#L129",
                    "position": "e.next = e.prev = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/gson/blob/docker/gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java#L260",
                    "position": "node.next = node.prev = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/gson/blob/docker/gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java#L260",
                    "position": "node.next = node.prev = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/gson/blob/docker/gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java#L321",
                    "position": "node.parent = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/gson/blob/docker/gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java#L353",
                    "position": "Node<K, V> rightLeft = right.left;",
                    "message": " dereferenced expression right is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/gson/blob/docker/gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java#L372",
                    "position": "Node<K, V> leftLeft = left.left;",
                    "message": " dereferenced expression left is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/gson/blob/docker/gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java#L414",
                    "position": "Node<K, V> pivotLeft = pivot.left;",
                    "message": " dereferenced expression pivot is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/gson/blob/docker/gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java#L436",
                    "position": "Node<K, V> pivotLeft = pivot.left;",
                    "message": " dereferenced expression pivot is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/gson/blob/docker/gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java#L495",
                    "position": "Node() {",
                    "message": " (Covered) initializer method does not guarantee @NonNull fields parent (line 472), value (line 488) are initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/gson/blob/docker/gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java#L504",
                    "position": "Node(Node<K, V> parent, K key, int hash, Node<K, V> next, Node<K, V> prev) {",
                    "message": " (Covered) initializer method does not guarantee @NonNull field value (line 488) is initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/gson/blob/docker/gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java#L496",
                    "position": "key = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/gson/blob/docker/gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java#L650",
                    "position": "n.parent = stackTop;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/gson/blob/docker/gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java#L665",
                    "position": "result.parent = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/gson/blob/docker/gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java#L719",
                    "position": "node.left = node.parent = node.right = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/gson/blob/docker/gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java#L727",
                    "position": "node.parent = stack;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/gson/blob/docker/gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java#L782",
                    "position": "if (stackTop.parent != null) {",
                    "message": " dereferenced expression stackTop is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/gson/blob/docker/gson/src/main/java/com/google/gson/internal/Excluder.java#L131",
                    "position": "private TypeAdapter<T> delegate;",
                    "message": " (Covered) @NonNull field Excluder$1.delegate not initialized"
                },
                {
                    "url": "https://github.com/nimakarimipour/gson/blob/docker/gson/src/main/java/com/google/gson/internal/Excluder.java#L137",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/gson/blob/docker/gson/src/main/java/com/google/gson/internal/Excluder.java#L139",
                    "position": "return delegate().read(in);",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/gson/blob/docker/gson/src/main/java/com/google/gson/Gson.java#L223",
                    "position": "this.datePattern = datePattern;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/gson/blob/docker/gson/src/main/java/com/google/gson/Gson.java#L317",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/gson/blob/docker/gson/src/main/java/com/google/gson/Gson.java#L345",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/gson/blob/docker/gson/src/main/java/com/google/gson/Gson.java#L379",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/gson/blob/docker/gson/src/main/java/com/google/gson/Gson.java#L406",
                    "position": "return new AtomicLong(value.longValue());",
                    "message": " dereferenced expression value is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/gson/blob/docker/gson/src/main/java/com/google/gson/Gson.java#L428",
                    "position": "long value = longAdapter.read(in).longValue();",
                    "message": " dereferenced expression longAdapter.read(in) is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/gson/blob/docker/gson/src/main/java/com/google/gson/Gson.java#L943",
                    "position": "return object;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/gson/blob/docker/gson/src/main/java/com/google/gson/Gson.java#L950",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/gson/blob/docker/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java#L67",
                    "position": "typeAdapter = new TreeTypeAdapter(serializer, deserializer, gson, type, null);",
                    "message": " (Covered) passing @Nullable parameter 'serializer' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/gson/blob/docker/gson/src/main/java/com/google/gson/internal/$Gson$Types.java#L423",
                    "position": "this.ownerType = ownerType == null ? null : canonicalize(ownerType);",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/gson/blob/docker/gson/src/main/java/com/google/gson/internal/$Gson$Types.java#L525",
                    "position": "this.lowerBound = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/gson/blob/docker/gson/src/main/java/com/google/gson/internal/Streams.java#L49",
                    "position": "return TypeAdapters.JSON_ELEMENT.read(reader);",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/gson/blob/docker/gson/src/main/java/com/google/gson/internal/Streams.java#L118",
                    "position": "char[] chars;",
                    "message": " (Covered) @NonNull field Streams$AppendableWriter$CurrentWrite.chars not initialized"
                },
                {
                    "url": "https://github.com/nimakarimipour/gson/blob/docker/gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java#L53",
                    "position": "return typeToken.getRawType() == Date.class ? (TypeAdapter<T>) new DateTypeAdapter() : null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/gson/blob/docker/gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java#L182",
                    "position": "JsonReaderInternalAccess.INSTANCE.promoteNameToValue(in);",
                    "message": " dereferenced expression JsonReaderInternalAccess.INSTANCE is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/gson/blob/docker/gson/src/main/java/com/google/gson/internal/bind/TreeTypeAdapter.java#L139",
                    "position": "serializer = typeAdapter instanceof JsonSerializer ? (JsonSerializer<?>) typeAdapter : null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/gson/blob/docker/gson/src/main/java/com/google/gson/internal/bind/TreeTypeAdapter.java#L140",
                    "position": "deserializer = typeAdapter instanceof JsonDeserializer ? (JsonDeserializer<?>) typeAdapter : null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/gson/blob/docker/gson/src/main/java/com/google/gson/internal/bind/TreeTypeAdapter.java#L142",
                    "position": "this.exactType = exactType;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/gson/blob/docker/gson/src/main/java/com/google/gson/internal/bind/TreeTypeAdapter.java#L144",
                    "position": "this.hierarchyType = hierarchyType;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/gson/blob/docker/gson/src/main/java/com/google/gson/internal/bind/SqlDateTypeAdapter.java#L46",
                    "position": "return typeToken.getRawType() == java.sql.Date.class ? (TypeAdapter<T>) new SqlDateTypeAdapter() : null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/gson/blob/docker/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java#L142",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/gson/blob/docker/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java#L166",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/gson/blob/docker/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java#L185",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/gson/blob/docker/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java#L209",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/gson/blob/docker/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java#L232",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/gson/blob/docker/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java#L324",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/gson/blob/docker/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java#L345",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/gson/blob/docker/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java#L362",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/gson/blob/docker/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java#L381",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/gson/blob/docker/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java#L404",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/gson/blob/docker/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java#L428",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/gson/blob/docker/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java#L449",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/gson/blob/docker/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java#L470",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/gson/blob/docker/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java#L493",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/gson/blob/docker/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java#L512",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/gson/blob/docker/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java#L531",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/gson/blob/docker/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java#L534",
                    "position": "return \"null\".equals(nextString) ? null : new URL(nextString);",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/gson/blob/docker/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java#L551",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/gson/blob/docker/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java#L555",
                    "position": "return \"null\".equals(nextString) ? null : new URI(nextString);",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/gson/blob/docker/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java#L575",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/gson/blob/docker/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java#L595",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/gson/blob/docker/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java#L630",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/gson/blob/docker/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java#L638",
                    "position": "return date != null ? new Timestamp(date.getTime()) : null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/gson/blob/docker/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java#L667",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/gson/blob/docker/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java#L728",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/gson/blob/docker/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java#L883",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/gson/blob/docker/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java#L900",
                    "position": "return typeToken.equals(type) ? (TypeAdapter<T>) typeAdapter : null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/gson/blob/docker/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java#L912",
                    "position": "return typeToken.getRawType() == type ? (TypeAdapter<T>) typeAdapter : null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/gson/blob/docker/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java#L930",
                    "position": "return (rawType == unboxed || rawType == boxed) ? (TypeAdapter<T>) typeAdapter : null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/gson/blob/docker/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java#L948",
                    "position": "return (rawType == base || rawType == sub) ? (TypeAdapter<T>) typeAdapter : null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/gson/blob/docker/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java#L970",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/gson/blob/docker/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java#L985",
                    "position": "return result;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/gson/blob/docker/gson/src/main/java/com/google/gson/internal/bind/ArrayTypeAdapter.java#L46",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/gson/blob/docker/gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java#L46",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/gson/blob/docker/gson/src/main/java/com/google/gson/internal/bind/TimeTypeAdapter.java#L48",
                    "position": "return typeToken.getRawType() == Time.class ? (TypeAdapter<T>) new TimeTypeAdapter() : null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                }
            ],
            "size": 93
        },
        "EventBus": {
            "errors": [
                {
                    "url": "https://github.com/nimakarimipour/EventBus/blob/docker/EventBus/src/org/greenrobot/eventbus/EventBus.java#L140",
                    "position": "mainThreadSupport = builder.getMainThreadSupport();",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/EventBus/blob/docker/EventBus/src/org/greenrobot/eventbus/EventBus.java#L141",
                    "position": "mainThreadPoster = mainThreadSupport != null ? mainThreadSupport.createPoster(this) : null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/EventBus/blob/docker/EventBus/src/org/greenrobot/eventbus/EventBus.java#L315",
                    "position": "} else if (postingState.subscription.subscriberMethod.threadMode != ThreadMode.POSTING) {",
                    "message": " dereferenced expression postingState.subscription is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/EventBus/blob/docker/EventBus/src/org/greenrobot/eventbus/EventBus.java#L527",
                    "position": "if (subscription.active) {",
                    "message": " dereferenced expression subscription is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/EventBus/blob/docker/EventBus/src/org/greenrobot/eventbus/EventBus.java#L536",
                    "position": "handleSubscriberException(subscription, event, e.getCause());",
                    "message": " (Covered) passing @Nullable parameter 'event' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/EventBus/blob/docker/EventBus/src/org/greenrobot/eventbus/SubscriberMethodFinder.java#L236",
                    "position": "clazz = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/EventBus/blob/docker/EventBus/src/org/greenrobot/eventbus/SubscriberMethodFinder.java#L279",
                    "position": "clazz = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/EventBus/blob/docker/EventBus/src/org/greenrobot/eventbus/SubscriberMethodFinder.java#L286",
                    "position": "clazz = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/EventBus/blob/docker/EventBus/src/org/greenrobot/eventbus/util/AsyncExecutor.java#L106",
                    "position": "this.scope = scope;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/EventBus/blob/docker/EventBus/src/org/greenrobot/eventbus/util/ErrorDialogManager.java#L183",
                    "position": "public static ErrorDialogFragmentFactory<?> factory;",
                    "message": " (Covered) @NonNull static field factory not initialized"
                },
                {
                    "url": "https://github.com/nimakarimipour/EventBus/blob/docker/EventBus/src/org/greenrobot/eventbus/util/ErrorDialogManager.java#L143",
                    "position": "eventBus.unregister(this);",
                    "message": " dereferenced expression eventBus is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/EventBus/blob/docker/EventBus/src/org/greenrobot/eventbus/util/ErrorDialogManager.java#L218",
                    "position": "attachTo(activity, executionScope, finishAfterDialog, argumentsForErrorDialog);",
                    "message": " (Covered) passing @Nullable parameter 'argumentsForErrorDialog' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/EventBus/blob/docker/EventBus/src/org/greenrobot/eventbus/meta/AbstractSubscriberInfo.java#L37",
                    "position": "this.superSubscriberInfoClass = superSubscriberInfoClass;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                }
            ],
            "size": 13
        },
        "LitiEngine": {
            "errors": [
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/configuration/ClientConfiguration.java#L25",
                    "position": "ClientConfiguration() {",
                    "message": " (Covered) initializer method does not guarantee @NonNull fields country (line 12), language (line 14) are initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/util/Imaging.java#L316",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/util/Imaging.java#L442",
                    "position": "return scale(image, (int) newDimension.getWidth(), (int) newDimension.getHeight());",
                    "message": " dereferenced expression newDimension is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/util/Imaging.java#L478",
                    "position": "return scale(image, width, height, keepRatio, true);",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/util/Imaging.java#L571",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/util/io/URLAdapter.java#L26",
                    "position": "this(null);",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/util/io/XmlUtilities.java#L89",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/util/io/XmlUtilities.java#L95",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/util/ColorHelper.java#L44",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/util/ColorHelper.java#L75",
                    "position": "return decode(colorHexString, false);",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/util/geom/GeometricUtilities.java#L344",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/util/TimeUtilities.java#L9",
                    "position": "UNDEFINED(null),",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/util/ArrayUtilities.java#L542",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/entities/behavior/Path.java#L30",
                    "position": "this.start = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/entities/behavior/Path.java#L31",
                    "position": "this.target = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/attributes/AttributeModifier.java#L126",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/environment/Environment.java#L279",
                    "position": "this.renderListeners.get(renderType).add(listener);",
                    "message": " dereferenced expression this.renderListeners.get(renderType) is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/environment/Environment.java#L351",
                    "position": "this.miscEntities.get(entity.getRenderType()).put(entity.getMapId(), entity);",
                    "message": " dereferenced expression this.miscEntities.get(entity.getRenderType()) is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/environment/Environment.java#L446",
                    "position": "this.renderables.get(renderType).add(renderable);",
                    "message": " dereferenced expression this.renderables.get(renderType) is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/environment/Environment.java#L496",
                    "position": "this.miscEntities.get(renderType).clear();",
                    "message": " dereferenced expression this.miscEntities.get(renderType) is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/environment/Environment.java#L497",
                    "position": "this.renderListeners.get(renderType).clear();",
                    "message": " dereferenced expression this.renderListeners.get(renderType) is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/environment/Environment.java#L498",
                    "position": "this.renderables.get(renderType).clear();",
                    "message": " dereferenced expression this.renderables.get(renderType) is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/environment/Environment.java#L785",
                    "position": "return this.staticShadowLayer;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/environment/Environment.java#L1185",
                    "position": "return Collections.unmodifiableCollection(this.miscEntities.get(renderType).values());",
                    "message": " dereferenced expression this.miscEntities.get(renderType) is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/environment/Environment.java#L1353",
                    "position": "return this.map;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/environment/Environment.java#L2350",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/environment/Environment.java#L2355",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/environment/Environment.java#L2362",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/environment/Environment.java#L2405",
                    "position": "Game.graphics().renderEntities(g, this.miscEntities.get(renderType).values(), renderType == RenderType.NORMAL);",
                    "message": " dereferenced expression this.miscEntities.get(renderType) is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/environment/Environment.java#L2617",
                    "position": "for (EnvironmentRenderedListener listener : this.renderListeners.get(type)) {",
                    "message": " enhanced-for expression this.renderListeners.get(type) is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/entities/Entity.java#L317",
                    "position": "EntityMessageEvent event = this.fireMessageReceived(sender, ANY_MESSAGE, message, null);",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/entities/Entity.java#L417",
                    "position": "this.getEnvironment().getEntitiesByTag().get(tag).remove(this);",
                    "message": " dereferenced expression this.getEnvironment().getEntitiesByTag().get(tag) is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/entities/Entity.java#L496",
                    "position": "return this.environment;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/entities/Creature.java#L159",
                    "position": "return this.velocity;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/entities/StaticShadow.java#L44",
                    "position": "this.origin = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/entities/StaticShadow.java#L56",
                    "position": "this.origin = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/entities/StaticShadow.java#L118",
                    "position": "this.origin = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/entities/StaticShadow.java#L215",
                    "position": "if (shadowType.equals(StaticShadowType.DOWN)) {",
                    "message": " dereferenced expression shadowType is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/entities/LightSource.java#L358",
                    "position": "Game.world().environment().getAmbientLight().updateSection(this.getBoundingBox());",
                    "message": " dereferenced expression Game.world().environment().getAmbientLight() is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/environment/tilemap/xml/MapObject.java#L420",
                    "position": "protected void setLayer(@Nullable() MapObjectLayer layer) {",
                    "message": " (Covered) initializer method does not guarantee @NonNull fields type (line 35), x (line 38), y (line 42), tile (line 54), text (line 73) are initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/environment/tilemap/xml/MapObject.java#L201",
                    "position": "return this.name;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/environment/tilemap/xml/MapObject.java#L222",
                    "position": "public IPolyShape getPolygon() {",
                    "message": " (Covered) method returns @Nullable, but superclass method de.gurkenlabs.litiengine.environment.tilemap.IMapObject.getPolygon() returns @NonNull"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/environment/tilemap/xml/MapObject.java#L371",
                    "position": "return this.layer;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/environment/tilemap/xml/CustomPropertyProvider.java#L69",
                    "position": "return this.getProperties().get(propertyName);",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/environment/tilemap/xml/CustomPropertyProvider.java#L88",
                    "position": "return defaultValue;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/environment/tilemap/xml/CustomPropertyProvider.java#L188",
                    "position": "return this.getColorValue(propertyName, null);",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/environment/tilemap/xml/CustomPropertyProvider.java#L206",
                    "position": "return this.getEnumValue(propertyName, enumType, null);",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/environment/tilemap/xml/CustomPropertyProvider.java#L224",
                    "position": "return this.getFileValue(propertyName, null);",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/environment/tilemap/xml/MapObjectLayer.java#L126",
                    "position": "return this.color;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/environment/tilemap/xml/Layer.java#L215",
                    "position": "protected void setMap(@Nullable() TmxMap map) {",
                    "message": " (Covered) initializer method does not guarantee @NonNull fields name (line 21), renderType (line 52) are initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/environment/tilemap/xml/Layer.java#L167",
                    "position": "return this.parentMap;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/environment/tilemap/xml/TmxMap.java#L131",
                    "position": "public TmxMap() {",
                    "message": " (Covered) initializer method does not guarantee @NonNull fields renderorder (line 66), backgroundcolor (line 93), nextLayerId (line 97), nextObjectId (line 100), name (line 103) are initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/environment/tilemap/xml/TmxMap.java#L135",
                    "position": "public TmxMap(IMapOrientation orientation) {",
                    "message": " (Covered) initializer method does not guarantee @NonNull fields backgroundcolor (line 93), nextLayerId (line 97), nextObjectId (line 100), name (line 103) are initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/environment/tilemap/xml/TmxMap.java#L222",
                    "position": "public ITilesetEntry getTilesetEntry(int gid) {",
                    "message": " (Covered) method returns @Nullable, but superclass method de.gurkenlabs.litiengine.environment.tilemap.IMap.getTilesetEntry(int) returns @NonNull"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/environment/tilemap/xml/Tileset.java#L101",
                    "position": "public Tileset() {",
                    "message": " (Covered) initializer method does not guarantee @NonNull fields image (line 46), name (line 53), tileoffset (line 64), source (line 79), allTiles (line 91) are initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/environment/tilemap/xml/Tileset.java#L105",
                    "position": "public Tileset(Tileset source) {",
                    "message": " (Covered) initializer method does not guarantee @NonNull fields image (line 46), name (line 53), tileoffset (line 64), allTiles (line 91) are initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/environment/tilemap/xml/Tileset.java#L272",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/environment/tilemap/xml/MapImage.java#L37",
                    "position": "public MapImage() {",
                    "message": " (Covered) initializer method does not guarantee @NonNull fields source (line 18), transparentcolor (line 21), absolutePath (line 31) are initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/environment/tilemap/xml/MapImage.java#L47",
                    "position": "public MapImage(MapImage original) {",
                    "message": " (Covered) initializer method does not guarantee @NonNull fields source (line 18), transparentcolor (line 21), absolutePath (line 31) are initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/environment/tilemap/xml/TilesetEntry.java#L53",
                    "position": "public TilesetEntry() {",
                    "message": " (Covered) initializer method does not guarantee @NonNull fields tileset (line 25), animation (line 37), type (line 44), collisionData (line 47) are initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/environment/tilemap/xml/TilesetEntry.java#L64",
                    "position": "public TilesetEntry(Tileset tileset, int id) {",
                    "message": " (Covered) initializer method does not guarantee @NonNull fields animation (line 37), type (line 44), collisionData (line 47) are initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/environment/tilemap/xml/TilesetEntry.java#L100",
                    "position": "return this.tileset.getSpritesheet().getSprite(this.getId(), this.tileset.getMargin(), this.tileset.getSpacing());",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/environment/tilemap/xml/TilesetEntry.java#L100",
                    "position": "return this.tileset.getSpritesheet().getSprite(this.getId(), this.tileset.getMargin(), this.tileset.getSpacing());",
                    "message": " dereferenced expression this.tileset.getSpritesheet() is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/environment/tilemap/xml/TileAnimation.java#L23",
                    "position": "return this.frames;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/sound/Sound.java#L69",
                    "position": "return this.format;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/sound/SoundEvent.java#L20",
                    "position": "this.sound = sound;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/entities/EntityHitEvent.java#L26",
                    "position": "this.executor = ability != null ? ability.getExecutor() : null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/entities/EntityHitEvent.java#L28",
                    "position": "this.ability = ability;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/graphics/emitters/particles/Particle.java#L129",
                    "position": "return this.color;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/entities/EntityControllers.java#L45",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/entities/EntityControllers.java#L52",
                    "position": "controller.detach();",
                    "message": " dereferenced expression controller is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/environment/tilemap/MapObjectType.java#L28",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/environment/tilemap/MapObjectType.java#L33",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/graphics/animation/Animation.java#L334",
                    "position": "if (!this.isPlaying() || Game.time().since(this.lastFrameUpdate) < this.getCurrentKeyFrame().getDuration()) {",
                    "message": " dereferenced expression this.getCurrentKeyFrame() is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/input/GamepadManager.java#L158",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/input/Input.java#L57",
                    "position": "return gamePadManager;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/input/Input.java#L66",
                    "position": "return keyboard;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/input/Input.java#L75",
                    "position": "return mouse;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/tweening/TweenEngine.java#L38",
                    "position": "this.getTweens().get(target).put(type, tween);",
                    "message": " dereferenced expression this.getTweens().get(target) is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/tweening/TweenEngine.java#L57",
                    "position": "return this.getTweens().get(target).get(type);",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/tweening/TweenEngine.java#L118",
                    "position": "this.getTweens().get(target).remove(type);",
                    "message": " dereferenced expression this.getTweens().get(target) is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/tweening/TweenEngine.java#L151",
                    "position": "for (final Tween tween : this.getTweens().get(target).values()) {",
                    "message": " dereferenced expression this.getTweens().get(target) is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/resources/SpritesheetResource.java#L45",
                    "position": "this.setImage(Codec.encode(sprite.getImage(), sprite.getImageFormat()));",
                    "message": " (Covered) passing @Nullable parameter 'Codec.encode(sprite.getImage(), sprite.getImageFormat())' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/resources/SpritesheetResource.java#L52",
                    "position": "this.setImage(Codec.encode(image));",
                    "message": " (Covered) passing @Nullable parameter 'Codec.encode(image)' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/resources/NamedResource.java#L16",
                    "position": "return this.name;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/resources/ResourcesContainer.java#L259",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/resources/ResourcesContainer.java#L264",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/resources/ResourcesContainer.java#L391",
                    "position": "String alias = this.getAlias(identifier, newResource);",
                    "message": " (Covered) passing @Nullable parameter 'newResource' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/resources/Spritesheets.java#L70",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/resources/Spritesheets.java#L74",
                    "position": "return this.loadedSpritesheets.get(name);",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/resources/Spritesheets.java#L97",
                    "position": "return new Spritesheet(image, path, spriteWidth, spriteHeight);",
                    "message": " (Covered) passing @Nullable parameter 'image' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/resources/Maps.java#L189",
                    "position": "data.setValue(TileData.encode(data));",
                    "message": " (Covered) passing @Nullable parameter 'TileData.encode(data)' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/resources/Maps.java#L262",
                    "position": "layer.addMapObject(mapObject);",
                    "message": " dereferenced expression layer is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/resources/Strings.java#L49",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/resources/Strings.java#L56",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/resources/Resources.java#L344",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/GameRandom.java#L180",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/GameRandom.java#L188",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/Game.java#L98",
                    "position": "private static GameLoop gameLoop;",
                    "message": " (Covered) @NonNull static field gameLoop not initialized"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/Game.java#L302",
                    "position": "return gameWindow;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/Game.java#L649",
                    "position": "gameLoop = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/sound/SoundEngine.java#L175",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/sound/SoundEngine.java#L741",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/sound/SoundEngine.java#L745",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/physics/PhysicsEngine.java#L82",
                    "position": "this.collisionEntities.get(entity.getCollisionType()).add(entity);",
                    "message": " dereferenced expression this.collisionEntities.get(entity.getCollisionType()) is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/physics/PhysicsEngine.java#L87",
                    "position": "this.collisionEntities.get(Collision.ANY).add(entity);",
                    "message": " dereferenced expression this.collisionEntities.get(Collision.ANY) is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/physics/PhysicsEngine.java#L104",
                    "position": "this.collisionEntities.get(entity.getCollisionType()).remove(entity);",
                    "message": " dereferenced expression this.collisionEntities.get(entity.getCollisionType()) is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/physics/PhysicsEngine.java#L109",
                    "position": "this.collisionEntities.get(Collision.ANY).remove(entity);",
                    "message": " dereferenced expression this.collisionEntities.get(Collision.ANY) is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/physics/PhysicsEngine.java#L121",
                    "position": "this.collisionEntities.get(type).clear();",
                    "message": " dereferenced expression this.collisionEntities.get(type) is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/physics/PhysicsEngine.java#L122",
                    "position": "this.collisionBoxes.get(type).clear();",
                    "message": " dereferenced expression this.collisionBoxes.get(type) is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/physics/PhysicsEngine.java#L124",
                    "position": "this.setBounds(null);",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/physics/PhysicsEngine.java#L543",
                    "position": "for (final ICollisionEntity collisionEntity : this.collisionEntities.get(collision)) {",
                    "message": " enhanced-for expression this.collisionEntities.get(collision) is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/physics/PhysicsEngine.java#L560",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/physics/PhysicsEngine.java#L692",
                    "position": "this.collisionBoxes.get(type).clear();",
                    "message": " dereferenced expression this.collisionBoxes.get(type) is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/physics/PhysicsEngine.java#L693",
                    "position": "this.collisionBoxes.get(type).addAll(this.collisionEntities.get(type).stream().map(ICollisionEntity::getCollisionBox).collect(Collectors.toList()));",
                    "message": " dereferenced expression this.collisionEntities.get(type) is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/physics/PhysicsEngine.java#L813",
                    "position": "fireCollisionEvents(entity, intersectionX, intersectionY);",
                    "message": " (Covered) passing @Nullable parameter 'intersectionX' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/physics/PhysicsEngine.java#L864",
                    "position": "CollisionEvent event = new CollisionEvent(collider, involvedEntities);",
                    "message": " (Covered) passing @Nullable parameter 'involvedEntities' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/physics/PhysicsEngine.java#L868",
                    "position": "for (ICollisionEntity involved : involvedEntities) {",
                    "message": " enhanced-for expression involvedEntities is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/gui/screens/ScreenManager.java#L135",
                    "position": "final ScreenChangedEvent event = new ScreenChangedEvent(this.current(), previous);",
                    "message": " (Covered) passing @Nullable parameter 'this.current()' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/GameWindow.java#L75",
                    "position": "this.hostControl.setTitle(Game.info().getTitle());",
                    "message": " dereferenced expression Game.info() is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/environment/GameWorld.java#L271",
                    "position": "return this.environment;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/environment/GameWorld.java#L290",
                    "position": "this.setCamera(null);",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/environment/GameWorld.java#L319",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/environment/GameWorld.java#L335",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/graphics/RenderComponent.java#L112",
                    "position": "g = (Graphics2D) this.currentBufferStrategy.getDrawGraphics();",
                    "message": " read of @NonNull field currentBufferStrategy before initialization"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/graphics/RenderComponent.java#L119",
                    "position": "final Screen currentScreen = Game.screens().current();",
                    "message": " dereferenced expression Game.screens() is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/gui/GuiComponent.java#L35",
                    "position": "protected static final Font ICON_FONT;",
                    "message": " (Covered) @NonNull static field ICON_FONT not initialized"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/gui/GuiComponent.java#L41",
                    "position": "ICON_FONT = icon != null ? icon.deriveFont(16f) : null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/gui/Appearance.java#L34",
                    "position": "public Appearance() {",
                    "message": " (Covered) initializer method does not guarantee @NonNull fields foreColor (line 18), backgroundColor1 (line 20) are initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/physics/RaycastHit.java#L16",
                    "position": "this.point = point;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/gui/Menu.java#L23",
                    "position": "this(x, y, width, height, null, items);",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/gui/ListField.java#L127",
                    "position": "public ListField(final double x, final double y, final double width, final double height, final Object[][] content, final int shownRows, final int shownColumns) {",
                    "message": " (Covered) initializer method does not guarantee @NonNull fields verticalSlider (line 57), horizontalSlider (line 59) are initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/gui/ListField.java#L200",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/gui/GuiProperties.java#L50",
                    "position": "return defaultFont;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/gui/SpeechBubble.java#L148",
                    "position": "final float startX = (float) (entityCenter.getX() - deltaX);",
                    "message": " dereferenced expression entityCenter is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/gui/SpeechBubble.java#L233",
                    "position": "while (measurer.getPosition() < this.currentText.length()) {",
                    "message": " dereferenced expression this.currentText is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/gui/DropdownListField.java#L40",
                    "position": "public DropdownListField(final double x, final double y, final double width, final double height, final Object[] content, final int elementsShown) {",
                    "message": " (Covered) initializer method does not guarantee @NonNull fields contentList (line 23), dropDownButton (line 28) are initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/environment/EntitySpawner.java#L110",
                    "position": "return this.spawnpoints;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/environment/tilemap/xml/GroupLayer.java#L20",
                    "position": "private List<ILayer> layers;",
                    "message": " (Covered) @NonNull field layers not initialized"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/environment/tilemap/xml/ImageLayer.java#L15",
                    "position": "private MapImage image;",
                    "message": " (Covered) @NonNull field image not initialized"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/environment/tilemap/xml/Tile.java#L52",
                    "position": "public Tile() {",
                    "message": " (Covered) initializer method does not guarantee @NonNull fields tileCoordinate (line 37), tilesetEntry (line 39) are initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/environment/tilemap/xml/Tile.java#L81",
                    "position": "public Tile(int gidBitmask) {",
                    "message": " (Covered) initializer method does not guarantee @NonNull fields tileCoordinate (line 37), tilesetEntry (line 39) are initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/environment/tilemap/xml/CustomPropertyAdapter.java#L98",
                    "position": "if (this.type.equals(PropertyType.STRING)) {",
                    "message": " dereferenced expression this.type is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/environment/tilemap/xml/CustomPropertyAdapter.java#L139",
                    "position": "Map<String, ICustomProperty> map = new HashMap<>(v.properties.size());",
                    "message": " dereferenced expression v.properties is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/environment/tilemap/xml/TileData.java#L105",
                    "position": "public TileData() {",
                    "message": " (Covered) initializer method does not guarantee @NonNull fields encoding (line 64), compression (line 67) are initialized along all control-flow paths (remember to check for exceptions or early returns)."
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/environment/tilemap/xml/TileData.java#L53",
                    "position": "public static final String NONE = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/environment/tilemap/xml/TileData.java#L366",
                    "position": "this.value = v;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/environment/tilemap/xml/TileChunk.java#L33",
                    "position": "return this.value;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/environment/tilemap/xml/TileLayer.java#L18",
                    "position": "private TileData data = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/environment/tilemap/xml/TileLayer.java#L88",
                    "position": "return this.tileList;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/environment/tilemap/MapUtilities.java#L224",
                    "position": "return mapObject.getPolyline().getAbsolutePoints(mapObject.getLocation());",
                    "message": " dereferenced expression mapObject.getPolyline() is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/environment/tilemap/MapUtilities.java#L273",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/environment/tilemap/MapOrientations.java#L90",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/environment/tilemap/MapOrientations.java#L113",
                    "position": "public Rectangle2D getBounds(Point tile, IMap map) {",
                    "message": " (Covered) method returns @Nullable, but superclass method de.gurkenlabs.litiengine.environment.tilemap.IMapOrientation.getBounds(java.awt.Point,de.gurkenlabs.litiengine.environment.tilemap.IMap) returns @NonNull"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/physics/StickyForce.java#L32",
                    "position": "this.forceEntiy = null;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/graphics/Camera.java#L145",
                    "position": "this.focus = this.clampToMap(focus);",
                    "message": " (Covered) passing @Nullable parameter 'focus' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/graphics/Camera.java#L227",
                    "position": "this.focus = new Point2D.Double(this.focus.getX() * diff + this.targetFocus.getX() * (1.0 - diff), this.focus.getY() * diff + this.targetFocus.getY() * (1.0 - diff));",
                    "message": " dereferenced expression this.targetFocus is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/graphics/animation/AnimationController.java#L176",
                    "position": "public AffineTransform getAffineTransform() {",
                    "message": " (Covered) method returns @Nullable, but superclass method de.gurkenlabs.litiengine.graphics.animation.IAnimationController.getAffineTransform() returns @NonNull"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/graphics/animation/AnimationController.java#L187",
                    "position": "return this.currentAnimation;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/graphics/animation/AnimationController.java#L207",
                    "position": "sprite = effect.apply(sprite);",
                    "message": " (Covered) passing @Nullable parameter 'sprite' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/graphics/animation/AnimationController.java#L366",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/graphics/animation/PropAnimationController.java#L129",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/graphics/animation/CreatureAnimationController.java#L260",
                    "position": "return getFallbackSpriteName(state, dir);",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/graphics/emitters/EntityEmitter.java#L72",
                    "position": "public Point2D getLocation() {",
                    "message": " (Covered) method returns @Nullable, but superclass method de.gurkenlabs.litiengine.entities.Entity.getLocation() returns @NonNull"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/graphics/emitters/particles/SpriteParticle.java#L84",
                    "position": "this.animation.getDefault().setLooping(loopSprite);",
                    "message": " dereferenced expression this.animation.getDefault() is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/graphics/emitters/particles/SpriteParticle.java#L84",
                    "position": "this.animation.getDefault().setLooping(loopSprite);",
                    "message": " read of @NonNull field animation before initialization"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/entities/behavior/StateMachine.java#L40",
                    "position": "this.currentState = transition.getNextState();",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/entities/behavior/AStarNode.java#L127",
                    "position": "this.setPredecessor(null);",
                    "message": " (Covered) passing @Nullable parameter 'null' where @NonNull is required"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/entities/behavior/AStarGrid.java#L102",
                    "position": "return this.getNode(point.getX(), point.getY());",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                },
                {
                    "url": "https://github.com/nimakarimipour/litiengine/blob/docker/src/de/gurkenlabs/litiengine/entities/behavior/AStarGrid.java#L212",
                    "position": "return null;",
                    "message": " (Covered) returning @Nullable expression from method with @NonNull return type"
                }
            ],
            "size": 170
        },
        "Retrofit": {
            "errors": [
                {
                    "url": "https://github.com/nimakarimipour/retrofit/blob/docker/retrofit/src/main/java/retrofit2/RequestBuilder.java#L136",
                    "position": "for (int i = 0, limit = input.length(); i < limit; i += Character.charCount(codePoint)) {",
                    "message": " dereferenced expression input is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/retrofit/blob/docker/retrofit/src/main/java/retrofit2/RequestBuilder.java#L198",
                    "position": "urlBuilder.addEncodedQueryParameter(name, value);",
                    "message": " dereferenced expression urlBuilder is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/retrofit/blob/docker/retrofit/src/main/java/retrofit2/RequestBuilder.java#L201",
                    "position": "urlBuilder.addQueryParameter(name, value);",
                    "message": " dereferenced expression urlBuilder is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/retrofit/blob/docker/retrofit/src/main/java/retrofit2/RequestBuilder.java#L208",
                    "position": "formBuilder.addEncoded(name, value);",
                    "message": " dereferenced expression formBuilder is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/retrofit/blob/docker/retrofit/src/main/java/retrofit2/RequestBuilder.java#L210",
                    "position": "formBuilder.add(name, value);",
                    "message": " dereferenced expression formBuilder is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/retrofit/blob/docker/retrofit/src/main/java/retrofit2/RequestBuilder.java#L216",
                    "position": "multipartBuilder.addPart(headers, body);",
                    "message": " dereferenced expression multipartBuilder is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/retrofit/blob/docker/retrofit/src/main/java/retrofit2/RequestBuilder.java#L221",
                    "position": "multipartBuilder.addPart(part);",
                    "message": " dereferenced expression multipartBuilder is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/retrofit/blob/docker/retrofit/src/main/java/retrofit2/RequestFactory.java#L85",
                    "position": "httpMethod = builder.httpMethod;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/retrofit/blob/docker/retrofit/src/main/java/retrofit2/RequestFactory.java#L92",
                    "position": "parameterHandlers = builder.parameterHandlers;",
                    "message": " (Covered) assigning @Nullable expression to @NonNull field"
                },
                {
                    "url": "https://github.com/nimakarimipour/retrofit/blob/docker/retrofit/src/main/java/retrofit2/RequestFactory.java#L791",
                    "position": "ParameterHandler<?> otherHandler = parameterHandlers[i];",
                    "message": " dereferenced expression parameterHandlers is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/retrofit/blob/docker/retrofit/src/main/java/retrofit2/RequestFactory.java#L828",
                    "position": "if (!relativeUrlParamNames.contains(name)) {",
                    "message": " dereferenced expression relativeUrlParamNames is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/retrofit/blob/docker/retrofit/src/main/java/retrofit2/OkHttpCall.java#L145",
                    "position": "call.cancel();",
                    "message": " dereferenced expression call is @Nullable"
                },
                {
                    "url": "https://github.com/nimakarimipour/retrofit/blob/docker/retrofit/src/main/java/retrofit2/OkHttpCall.java#L148",
                    "position": "call.enqueue(",
                    "message": " dereferenced expression call is @Nullable"
                }
            ],
            "size": 13
        }
    }
}