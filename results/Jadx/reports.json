{"reports": [{"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) passing @Nullable parameter 'argType.getArrayElement()' where @NonNull is required", "(Covered) passing @Nullable parameter 'boundType.getArrayElement()' where @NonNull is required", "(Covered) passing @Nullable parameter 'replaceType.getArrayElement()' where @NonNull is required", "(Covered) passing @Nullable parameter 'first.getArrayElement()' where @NonNull is required", "(Covered) passing @Nullable parameter 'type.getArrayElement()' where @NonNull is required", "(Covered) passing @Nullable parameter 'elemType' where @NonNull is required", "(Covered) passing @Nullable parameter 'elType' where @NonNull is required", "(Covered) passing @Nullable parameter 'type.getArrayElement()' where @NonNull is required", "(Covered) passing @Nullable parameter 'type.getArrayElement()' where @NonNull is required", "dereferenced expression insnElementType is @Nullable", "(Covered) passing @Nullable parameter 'insnElementType' where @NonNull is required", "dereferenced expression insnElementType is @Nullable", "(Covered) passing @Nullable parameter 'arrType.getArrayElement()' where @NonNull is required", "dereferenced expression elType is @Nullable"], "class": "jadx.core.dex.instructions.args.ArgType", "method": "getArrayElement()", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/instructions/args/ArgType.java", "pkg": "jadx.core.dex.instructions.args", "jump": 12, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) passing @Nullable parameter 'argType.getGenericTypes()' where @NonNull is required", "(Covered) passing @Nullable parameter 'type.getGenericTypes()' where @NonNull is required", "(Covered) passing @Nullable parameter 'actualTypes' where @NonNull is required", "dereferenced expression actualTypes is @Nullable", "(Covered) passing @Nullable parameter 'genericTypes' where @NonNull is required", "(Covered) passing @Nullable parameter 'genericTypes' where @NonNull is required", "(Covered) passing @Nullable parameter 'firstGenericTypes' where @NonNull is required", "(Covered) passing @Nullable parameter 'secondGenericTypes' where @NonNull is required", "dereferenced expression firstGenericTypes is @Nullable", "dereferenced expression secondGenericTypes is @Nullable", "(Covered) passing @Nullable parameter 'genericTypes' where @NonNull is required", "enhanced-for expression genericTypes is @Nullable"], "class": "jadx.core.dex.instructions.args.ArgType", "method": "getGenericTypes()", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/instructions/args/ArgType.java", "pkg": "jadx.core.dex.instructions.args", "jump": 12, "inject": "true", "param": ""}, {"location": "CLASS_FIELD", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["dereferenced expression buf is @Nullable", "dereferenced expression buf is @Nullable", "dereferenced expression buf is @Nullable", "dereferenced expression buf is @Nullable", "dereferenced expression buf is @Nullable", "dereferenced expression buf is @Nullable", "dereferenced expression buf is @Nullable", "dereferenced expression buf is @Nullable", "dereferenced expression buf is @Nullable", "dereferenced expression buf is @Nullable", "dereferenced expression buf is @Nullable"], "class": "jadx.core.codegen.CodeWriter", "method": "", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/codegen/CodeWriter.java", "pkg": "jadx.core.codegen", "jump": 10, "inject": "true", "param": "buf"}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["dereferenced expression argType.getPrimitiveType() is @Nullable", "dereferenced expression getPrimitiveType() is @Nullable", "(Covered) passing @Nullable parameter 'candidateType.getPrimitiveType()' where @NonNull is required", "(Covered) passing @Nullable parameter 'candidateType.getPrimitiveType()' where @NonNull is required", "dereferenced expression firstPrimitiveType is @Nullable", "dereferenced expression type.getPrimitiveType() is @Nullable", "dereferenced expression stype is @Nullable", "switch expression type.getPrimitiveType() is @Nullable", "switch expression type.getPrimitiveType() is @Nullable", "(Covered) passing @Nullable parameter 'insnElementType.getPrimitiveType()' where @NonNull is required"], "class": "jadx.core.dex.instructions.args.ArgType", "method": "getPrimitiveType()", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/instructions/args/ArgType.java", "pkg": "jadx.core.dex.instructions.args", "jump": 9, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field condition (line 15) is initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) passing @Nullable parameter 'gType' where @NonNull is required", "(Covered) passing @Nullable parameter 'sp.consumeType()' where @NonNull is required", "(Covered) passing @Nullable parameter 'parsedRetType' where @NonNull is required", "(Covered) passing @Nullable parameter 'parsedRetType' where @NonNull is required", "(Covered) passing @Nullable parameter 'consumeType()' where @NonNull is required", "(Covered) passing @Nullable parameter 'consumeType()' where @NonNull is required", "(Covered) passing @Nullable parameter 'consumeType()' where @NonNull is required"], "class": "jadx.core.dex.nodes.parser.SignatureParser", "method": "consumeType()", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/nodes/parser/SignatureParser.java", "pkg": "jadx.core.dex.nodes.parser", "jump": 6, "inject": "true", "param": ""}, {"location": "CLASS_FIELD", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) passing @Nullable parameter 'condition' where @NonNull is required", "(Covered) passing @Nullable parameter 'condition' where @NonNull is required", "dereferenced expression condition is @Nullable", "(Covered) passing @Nullable parameter 'that.condition' where @NonNull is required", "dereferenced expression condition is @Nullable", "dereferenced expression condition is @Nullable"], "class": "jadx.core.dex.instructions.mods.TernaryInsn", "method": "", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/instructions/mods/TernaryInsn.java", "pkg": "jadx.core.dex.instructions.mods", "jump": 6, "inject": "true", "param": "condition"}, {"location": "CLASS_FIELD", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 47), strings (line 51), valuesParser (line 54), appPackageName (line 61) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "dereferenced expression nsMap is @Nullable", "dereferenced expression nsMap is @Nullable", "dereferenced expression nsMap is @Nullable", "dereferenced expression nsMap is @Nullable", "dereferenced expression nsMap is @Nullable", "dereferenced expression nsMap is @Nullable"], "class": "jadx.core.xmlgen.BinaryXMLParser", "method": "", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/xmlgen/BinaryXMLParser.java", "pkg": "jadx.core.xmlgen", "jump": 5, "inject": "true", "param": "nsMap"}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.dex.info.ConstStorage", "method": "getConstField(jadx.core.dex.nodes.ClassNode,java.lang.Object,boolean)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/info/ConstStorage.java", "pkg": "jadx.core.dex.info", "jump": 5, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) passing @Nullable parameter 'assignInsn' where @NonNull is required", "(Covered) passing @Nullable parameter '((RegisterArg) arg).getAssignInsn()' where @NonNull is required", "(Covered) passing @Nullable parameter 'instArgAssignInsn' where @NonNull is required", "(Covered) passing @Nullable parameter 'arg.getAssignInsn()' where @NonNull is required", "(Covered) passing @Nullable parameter 'assignInsn' where @NonNull is required", "dereferenced expression assignInsn is @Nullable"], "class": "jadx.core.dex.instructions.args.RegisterArg", "method": "getAssignInsn()", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/instructions/args/RegisterArg.java", "pkg": "jadx.core.dex.instructions.args", "jump": 4, "inject": "true", "param": ""}, {"location": "CLASS_FIELD", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["dereferenced expression parentClass is @Nullable", "(Covered) passing @Nullable parameter 'parentClass' where @NonNull is required", "(Covered) passing @Nullable parameter 'parentClass' where @NonNull is required", "(Covered) passing @Nullable parameter 'parentClass' where @NonNull is required", "(Covered) passing @Nullable parameter 'parentClass' where @NonNull is required"], "class": "jadx.core.dex.info.ClassInfo", "method": "", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/info/ClassInfo.java", "pkg": "jadx.core.dex.info", "jump": 4, "inject": "true", "param": "parentClass"}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) passing @Nullable parameter 'str' where @NonNull is required", "(Covered) passing @Nullable parameter 'str' where @NonNull is required", "(Covered) passing @Nullable parameter 'str' where @NonNull is required", "(Covered) passing @Nullable parameter 'parent' where @NonNull is required"], "class": "jadx.core.xmlgen.entry.ValuesParser", "method": "decodeValue(int,int)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/xmlgen/entry/ValuesParser.java", "pkg": "jadx.core.xmlgen.entry", "jump": 4, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) passing @Nullable parameter 'retType' where @NonNull is required", "(Covered) passing @Nullable parameter 'genericRetType' where @NonNull is required", "(Covered) passing @Nullable parameter 'objType' where @NonNull is required", "(Covered) passing @Nullable parameter 'outerType' where @NonNull is required", "(Covered) passing @Nullable parameter 'readArgType(in)' where @NonNull is required"], "class": "jadx.core.clsp.ClsSet", "method": "readArgType(java.io.DataInputStream)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/clsp/ClsSet.java", "pkg": "jadx.core.clsp", "jump": 4, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["dereferenced expression bound is @Nullable", "(Covered) passing @Nullable parameter 'type.getWildcardBound()' where @NonNull is required", "(Covered) passing @Nullable parameter 'replaceType.getWildcardBound()' where @NonNull is required", "dereferenced expression bound is @Nullable"], "class": "jadx.core.dex.instructions.args.ArgType", "method": "getWildcardBound()", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/instructions/args/ArgType.java", "pkg": "jadx.core.dex.instructions.args", "jump": 3, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) passing @Nullable parameter 'callMth' where @NonNull is required", "(Covered) passing @Nullable parameter 'callMth' where @NonNull is required", "(Covered) passing @Nullable parameter 'callMth' where @NonNull is required", "(Covered) passing @Nullable parameter 'callMth' where @NonNull is required"], "class": "jadx.core.dex.nodes.RootNode", "method": "resolveMethod(@org.jetbrains.annotations.NotNull jadx.core.dex.info.MethodInfo)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/nodes/RootNode.java", "pkg": "jadx.core.dex.nodes", "jump": 3, "inject": "true", "param": ""}, {"location": "CLASS_FIELD", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "dereferenced expression androidResMap is @Nullable", "dereferenced expression androidResMap is @Nullable", "dereferenced expression androidResMap is @Nullable"], "class": "jadx.core.xmlgen.entry.ValuesParser", "method": "", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/xmlgen/entry/ValuesParser.java", "pkg": "jadx.core.xmlgen.entry", "jump": 2, "inject": "true", "param": "androidResMap"}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) passing @Nullable parameter 'getSingleArg(returnInsn)' where @NonNull is required", "(Covered) passing @Nullable parameter 'getSingleArg(returnInsn)' where @NonNull is required", "(Covered) passing @Nullable parameter 'getSingleArg(castInsn)' where @NonNull is required"], "class": "jadx.core.utils.InsnUtils", "method": "getSingleArg(jadx.core.dex.nodes.InsnNode)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/utils/InsnUtils.java", "pkg": "jadx.core.utils", "jump": 2, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) method returns @Nullable, but superclass method jadx.core.dex.instructions.args.Named.getName() returns @NonNull", "(Covered) passing @Nullable parameter 'mthArg.getName()' where @NonNull is required", "(Covered) passing @Nullable parameter 'oldArgReg.getName()' where @NonNull is required"], "class": "jadx.core.dex.instructions.args.RegisterArg", "method": "getName()", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/instructions/args/RegisterArg.java", "pkg": "jadx.core.dex.instructions.args", "jump": 2, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field condition (line 15) is initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field region (line 32) is initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) passing @Nullable parameter 'condInfo' where @NonNull is required", "(Covered) passing @Nullable parameter 'currentIf' where @NonNull is required"], "class": "jadx.core.dex.visitors.regions.IfMakerHelper", "method": "makeIfInfo(jadx.core.dex.nodes.BlockNode)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/visitors/regions/IfMakerHelper.java", "pkg": "jadx.core.dex.visitors.regions", "jump": 2, "inject": "true", "param": ""}, {"location": "CLASS_FIELD", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) passing @Nullable parameter 'exitBlocks' where @NonNull is required", "dereferenced expression this.exitBlocks is @Nullable"], "class": "jadx.core.dex.nodes.MethodNode", "method": "", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/nodes/MethodNode.java", "pkg": "jadx.core.dex.nodes", "jump": 2, "inject": "true", "param": "exitBlocks"}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.utils.BlockUtils", "method": "bitSetToOneBlock(jadx.core.dex.nodes.MethodNode,java.util.BitSet)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/utils/BlockUtils.java", "pkg": "jadx.core.utils", "jump": 2, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field condition (line 15) is initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.dex.visitors.MarkMethodsForInline", "method": "addInlineAttr(jadx.core.dex.nodes.MethodNode,jadx.core.dex.nodes.InsnNode)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/visitors/MarkMethodsForInline.java", "pkg": "jadx.core.dex.visitors", "jump": 1, "inject": "true", "param": ""}, {"location": "CLASS_FIELD", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), appPackageName (line 61) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "dereferenced expression valuesParser is @Nullable"], "class": "jadx.core.xmlgen.BinaryXMLParser", "method": "", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/xmlgen/BinaryXMLParser.java", "pkg": "jadx.core.xmlgen", "jump": 1, "inject": "true", "param": "valuesParser"}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) passing @Nullable parameter 'getName()' where @NonNull is required"], "class": "jadx.core.dex.instructions.args.SSAVar", "method": "getName()", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/instructions/args/SSAVar.java", "pkg": "jadx.core.dex.instructions.args", "jump": 1, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) passing @Nullable parameter 'b' where @NonNull is required", "(Covered) passing @Nullable parameter 'b' where @NonNull is required"], "class": "jadx.core.dex.info.ClassInfo", "method": "getTopParentClass()", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/info/ClassInfo.java", "pkg": "jadx.core.dex.info", "jump": 1, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field condition (line 28) is initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.dex.regions.conditions.IfCondition", "method": "fromIfBlock(jadx.core.dex.nodes.BlockNode)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/regions/conditions/IfCondition.java", "pkg": "jadx.core.dex.regions.conditions", "jump": 1, "inject": "true", "param": ""}, {"location": "METHOD_PARAM", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field condition (line 15) is initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field region (line 32) is initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) passing @Nullable parameter 'thenBlock' where @NonNull is required"], "class": "jadx.core.dex.regions.conditions.IfInfo", "method": "IfInfo(jadx.core.dex.regions.conditions.IfInfo,jadx.core.dex.nodes.BlockNode,jadx.core.dex.nodes.BlockNode)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/regions/conditions/IfInfo.java", "pkg": "jadx.core.dex.regions.conditions", "jump": 1, "inject": "true", "param": "thenBlock"}, {"location": "CLASS_FIELD", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field condition (line 15) is initialized along all control-flow paths (remember to check for exceptions or early returns).", "dereferenced expression parser.curVariable is @Nullable", "dereferenced expression parser.curVariable is @Nullable"], "class": "jadx.core.export.TemplateFile.ParserState", "method": "", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/export/TemplateFile.java", "pkg": "jadx.core.export", "jump": 1, "inject": "true", "param": "curVariable"}, {"location": "METHOD_PARAM", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field condition (line 15) is initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) passing @Nullable parameter 'header' where @NonNull is required"], "class": "jadx.core.dex.regions.loops.LoopRegion", "method": "LoopRegion(jadx.core.dex.nodes.IRegion,jadx.core.dex.attributes.nodes.LoopInfo,jadx.core.dex.nodes.BlockNode,boolean)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/regions/loops/LoopRegion.java", "pkg": "jadx.core.dex.regions.loops", "jump": 1, "inject": "true", "param": "header"}, {"location": "CLASS_FIELD", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) passing @Nullable parameter 'pkg' where @NonNull is required", "(Covered) passing @Nullable parameter 'pkg' where @NonNull is required", "(Covered) passing @Nullable parameter 'pkg' where @NonNull is required"], "class": "jadx.core.dex.info.ClassInfo", "method": "", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/info/ClassInfo.java", "pkg": "jadx.core.dex.info", "jump": 1, "inject": "true", "param": "pkg"}, {"location": "CLASS_FIELD", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), valuesParser (line 54), appPackageName (line 61) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "dereferenced expression strings is @Nullable"], "class": "jadx.core.xmlgen.BinaryXMLParser", "method": "", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/xmlgen/BinaryXMLParser.java", "pkg": "jadx.core.xmlgen", "jump": 1, "inject": "true", "param": "strings"}, {"location": "METHOD_PARAM", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) passing @Nullable parameter 'start' where @NonNull is required", "dereferenced expression start is @Nullable", "(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field condition (line 15) is initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field region (line 32) is initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.dex.attributes.nodes.EdgeInsnAttr", "method": "addEdgeInsn(jadx.core.dex.nodes.BlockNode,jadx.core.dex.nodes.BlockNode,jadx.core.dex.nodes.InsnNode)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/attributes/nodes/EdgeInsnAttr.java", "pkg": "jadx.core.dex.attributes.nodes", "jump": 1, "inject": "true", "param": "start"}, {"location": "METHOD_PARAM", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field condition (line 15) is initialized along all control-flow paths (remember to check for exceptions or early returns).", "dereferenced expression tb is @Nullable"], "class": "jadx.core.dex.visitors.regions.ProcessTryCatchRegions", "method": "wrapBlocks(jadx.core.dex.nodes.IRegion,jadx.core.dex.trycatch.TryCatchBlock,jadx.core.dex.nodes.BlockNode)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/visitors/regions/ProcessTryCatchRegions.java", "pkg": "jadx.core.dex.visitors.regions", "jump": 1, "inject": "true", "param": "tb"}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) method returns @Nullable, but superclass method jadx.core.dex.instructions.BaseInvokeNode.getInstanceArg() returns @NonNull", "(Covered) passing @Nullable parameter 'invokeNode.getInstanceArg()' where @NonNull is required"], "class": "jadx.core.dex.instructions.InvokeNode", "method": "getInstanceArg()", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/instructions/InvokeNode.java", "pkg": "jadx.core.dex.instructions", "jump": 1, "inject": "true", "param": ""}, {"location": "CLASS_FIELD", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull field classes (line 79) is initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) passing @Nullable parameter 'root' where @NonNull is required"], "class": "jadx.api.JadxDecompiler", "method": "", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/api/JadxDecompiler.java", "pkg": "jadx.api", "jump": 1, "inject": "true", "param": "root"}, {"location": "CLASS_FIELD", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull field parentClass (line 69) is initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.dex.nodes.ClassNode", "method": "", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/nodes/ClassNode.java", "pkg": "jadx.core.dex.nodes", "jump": 1, "inject": "true", "param": "accessFlags"}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": [], "class": "jadx.core.clsp.ClsSet", "method": "getCls(java.lang.String,java.util.Map<java.lang.String,jadx.core.clsp.ClspClass>)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/clsp/ClsSet.java", "pkg": "jadx.core.clsp", "jump": 1, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": [], "class": "jadx.core.dex.instructions.args.ArgType", "method": "parse(char)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/instructions/args/ArgType.java", "pkg": "jadx.core.dex.instructions.args", "jump": 1, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) passing @Nullable parameter 'wrappedInsn' where @NonNull is required", "(Covered) passing @Nullable parameter 'getWrappedInsn(getSingleArg(castInsn))' where @NonNull is required"], "class": "jadx.core.utils.InsnUtils", "method": "getWrappedInsn(jadx.core.dex.instructions.args.InsnArg)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/utils/InsnUtils.java", "pkg": "jadx.core.utils", "jump": 1, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field condition (line 15) is initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.api.ResourcesLoader.ResourceDecoder", "method": "decode(long,java.io.InputStream)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/api/ResourcesLoader.java", "pkg": "jadx.api", "jump": 1, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": [], "class": "jadx.core.dex.nodes.RootNode", "method": "resolveClass(jadx.core.dex.info.ClassInfo)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/nodes/RootNode.java", "pkg": "jadx.core.dex.nodes", "jump": 1, "inject": "true", "param": ""}, {"location": "CLASS_FIELD", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) passing @Nullable parameter 'blocks' where @NonNull is required"], "class": "jadx.core.dex.nodes.MethodNode", "method": "", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/nodes/MethodNode.java", "pkg": "jadx.core.dex.nodes", "jump": 1, "inject": "true", "param": "blocks"}, {"location": "CLASS_FIELD", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "dereferenced expression nsMapGenerated is @Nullable"], "class": "jadx.core.xmlgen.BinaryXMLParser", "method": "", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/xmlgen/BinaryXMLParser.java", "pkg": "jadx.core.xmlgen", "jump": 1, "inject": "true", "param": "nsMapGenerated"}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field condition (line 15) is initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.dex.visitors.EnumVisitor", "method": "castConstructorInsn(jadx.core.dex.nodes.InsnNode)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/visitors/EnumVisitor.java", "pkg": "jadx.core.dex.visitors", "jump": 1, "inject": "true", "param": ""}, {"location": "METHOD_PARAM", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull field idom (line 38) is initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field condition (line 15) is initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.dex.nodes.BlockNode", "method": "setIDom(jadx.core.dex.nodes.BlockNode)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/nodes/BlockNode.java", "pkg": "jadx.core.dex.nodes", "jump": 1, "inject": "true", "param": "idom"}, {"location": "METHOD_PARAM", "annotation": "org.jetbrains.annotations.Nullable", "errors": [], "class": "jadx.core.dex.attributes.nodes.MethodInlineAttr", "method": "MethodInlineAttr(jadx.core.dex.nodes.InsnNode,int[])", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/attributes/nodes/MethodInlineAttr.java", "pkg": "jadx.core.dex.attributes.nodes", "jump": 1, "inject": "true", "param": "insn"}, {"location": "METHOD_PARAM", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) passing @Nullable parameter 'keyStrings' where @NonNull is required"], "class": "jadx.core.xmlgen.ResTableParser.PackageChunk", "method": "PackageChunk(int,java.lang.String,java.lang.String[],java.lang.String[])", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/xmlgen/ResTableParser.java", "pkg": "jadx.core.xmlgen", "jump": 1, "inject": "true", "param": "typeStrings"}, {"location": "CLASS_FIELD", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) passing @Nullable parameter 'appPackageName' where @NonNull is required"], "class": "jadx.core.xmlgen.BinaryXMLParser", "method": "", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/xmlgen/BinaryXMLParser.java", "pkg": "jadx.core.xmlgen", "jump": 1, "inject": "true", "param": "appPackageName"}, {"location": "METHOD_PARAM", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field condition (line 15) is initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) @NonNull field sourceLine not initialized"], "class": "jadx.core.codegen.json.cls.JsonCodeLine", "method": "setSourceLine(java.lang.Integer)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/codegen/json/cls/JsonCodeLine.java", "pkg": "jadx.core.codegen.json.cls", "jump": 1, "inject": "true", "param": "sourceLine"}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.xmlgen.BinaryXMLParser", "method": "getAttributeNS(int)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/xmlgen/BinaryXMLParser.java", "pkg": "jadx.core.xmlgen", "jump": 0, "inject": "true", "param": ""}, {"location": "METHOD_PARAM", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field condition (line 15) is initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.dex.visitors.typeinference.TypeBoundConst", "method": "TypeBoundConst(jadx.core.dex.visitors.typeinference.BoundEnum,jadx.core.dex.instructions.args.ArgType,jadx.core.dex.instructions.args.RegisterArg)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/visitors/typeinference/TypeBoundConst.java", "pkg": "jadx.core.dex.visitors.typeinference", "jump": 0, "inject": "true", "param": "arg"}, {"location": "CLASS_FIELD", "annotation": "org.jetbrains.annotations.Nullable", "errors": [], "class": "jadx.core.dex.nodes.MethodNode", "method": "", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/nodes/MethodNode.java", "pkg": "jadx.core.dex.nodes", "jump": 0, "inject": "true", "param": "region"}, {"location": "CLASS_FIELD", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field condition (line 15) is initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.dex.visitors.regions.RegionStack.State", "method": "", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/visitors/regions/RegionStack.java", "pkg": "jadx.core.dex.visitors.regions", "jump": 0, "inject": "true", "param": "region"}, {"location": "CLASS_FIELD", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull field accessFlags (line 54) is initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.dex.nodes.ClassNode", "method": "", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/nodes/ClassNode.java", "pkg": "jadx.core.dex.nodes", "jump": 0, "inject": "true", "param": "parentClass"}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) method returns @Nullable, but superclass method jadx.api.JavaNode.getTopParentClass() returns @NonNull"], "class": "jadx.api.JavaPackage", "method": "getTopParentClass()", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/api/JavaPackage.java", "pkg": "jadx.api", "jump": 0, "inject": "true", "param": ""}, {"location": "METHOD_PARAM", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["dereferenced expression javaClass is @Nullable"], "class": "jadx.api.JadxDecompiler", "method": "loadJavaClass(jadx.api.JavaClass)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/api/JadxDecompiler.java", "pkg": "jadx.api", "jump": 0, "inject": "true", "param": "javaClass"}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) passing @Nullable parameter 'lastPut' where @NonNull is required"], "class": "jadx.core.utils.Utils", "method": "<T>last(java.util.List<T>)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/utils/Utils.java", "pkg": "jadx.core.utils", "jump": 0, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": [], "class": "jadx.core.dex.nodes.ClassNode", "method": "searchField(jadx.core.dex.info.FieldInfo)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/nodes/ClassNode.java", "pkg": "jadx.core.dex.nodes", "jump": 0, "inject": "true", "param": ""}, {"location": "METHOD_PARAM", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field condition (line 15) is initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.dex.nodes.BlockNode", "method": "setDoms(java.util.BitSet)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/nodes/BlockNode.java", "pkg": "jadx.core.dex.nodes", "jump": 0, "inject": "true", "param": "doms"}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.dex.info.ConstStorage.ValueStorage", "method": "get(java.lang.Object)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/info/ConstStorage.java", "pkg": "jadx.core.dex.info", "jump": 0, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field condition (line 15) is initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.codegen.NameGen", "method": "makeNameFromInvoke(jadx.core.dex.info.MethodInfo)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/codegen/NameGen.java", "pkg": "jadx.core.codegen", "jump": 0, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field condition (line 15) is initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field region (line 32) is initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.dex.visitors.regions.RegionMaker", "method": "makeEndlessLoop(jadx.core.dex.nodes.IRegion,jadx.core.dex.visitors.regions.RegionStack,jadx.core.dex.attributes.nodes.LoopInfo,jadx.core.dex.nodes.BlockNode)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/visitors/regions/RegionMaker.java", "pkg": "jadx.core.dex.visitors.regions", "jump": 0, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) passing @Nullable parameter 'argType.getInnerType()' where @NonNull is required"], "class": "jadx.core.dex.instructions.args.ArgType", "method": "getInnerType()", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/instructions/args/ArgType.java", "pkg": "jadx.core.dex.instructions.args", "jump": 0, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.dex.attributes.AttributeStorage", "method": "<T>get(jadx.core.dex.attributes.AType<T>)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/attributes/AttributeStorage.java", "pkg": "jadx.core.dex.attributes", "jump": 0, "inject": "true", "param": ""}, {"location": "METHOD_PARAM", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) passing @Nullable parameter 'message' where @NonNull is required"], "class": "jadx.core.utils.exceptions.JadxOverflowException", "method": "JadxOverflowException(java.lang.String)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/utils/exceptions/JadxOverflowException.java", "pkg": "jadx.core.utils.exceptions", "jump": 0, "inject": "true", "param": "message"}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field condition (line 15) is initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) passing @Nullable parameter 'makeConstraint(var.getAssign())' where @NonNull is required", "(Covered) passing @Nullable parameter 'makeConstraint(regArg)' where @NonNull is required"], "class": "jadx.core.dex.visitors.typeinference.TypeSearch", "method": "makeConstraint(jadx.core.dex.instructions.args.RegisterArg)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/visitors/typeinference/TypeSearch.java", "pkg": "jadx.core.dex.visitors.typeinference", "jump": 0, "inject": "true", "param": ""}, {"location": "METHOD_PARAM", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "dereferenced expression bitSet is @Nullable"], "class": "jadx.core.utils.BlockUtils", "method": "copyBlocksBitSet(jadx.core.dex.nodes.MethodNode,java.util.BitSet)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/utils/BlockUtils.java", "pkg": "jadx.core.utils", "jump": 0, "inject": "true", "param": "bitSet"}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field condition (line 15) is initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.dex.visitors.typeinference.TypeSearch", "method": "makeMoveConstraint(jadx.core.dex.nodes.InsnNode,jadx.core.dex.instructions.args.RegisterArg)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/visitors/typeinference/TypeSearch.java", "pkg": "jadx.core.dex.visitors.typeinference", "jump": 0, "inject": "true", "param": ""}, {"location": "METHOD_PARAM", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) passing @Nullable parameter 'type' where @NonNull is required", "(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field condition (line 15) is initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.dex.trycatch.TryCatchBlock", "method": "addHandler(jadx.core.dex.nodes.MethodNode,int,jadx.core.dex.info.ClassInfo)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/trycatch/TryCatchBlock.java", "pkg": "jadx.core.dex.trycatch", "jump": 0, "inject": "true", "param": "type"}, {"location": "METHOD_PARAM", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field condition (line 15) is initialized along all control-flow paths (remember to check for exceptions or early returns).", "dereferenced expression payload is @Nullable", "(Covered) initializer method does not guarantee @NonNull field region (line 32) is initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.dex.instructions.FillArrayData", "method": "FillArrayData(jadx.api.plugins.input.insns.custom.IArrayPayload)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/instructions/FillArrayData.java", "pkg": "jadx.core.dex.instructions", "jump": 0, "inject": "true", "param": "payload"}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.clsp.ClspGraph", "method": "searchCommonParent(java.util.Set<java.lang.String>,jadx.core.clsp.ClspClass)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/clsp/ClspGraph.java", "pkg": "jadx.core.clsp", "jump": 0, "inject": "true", "param": ""}, {"location": "METHOD_PARAM", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field condition (line 15) is initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.xmlgen.ResXmlGen", "method": "addSimpleValue(jadx.core.codegen.CodeWriter,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/xmlgen/ResXmlGen.java", "pkg": "jadx.core.xmlgen", "jump": 0, "inject": "true", "param": "attrName"}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) passing @Nullable parameter 'callMthNode' where @NonNull is required"], "class": "jadx.core.dex.nodes.RootNode", "method": "deepResolveMethod(@org.jetbrains.annotations.NotNull jadx.core.dex.info.MethodInfo)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/nodes/RootNode.java", "pkg": "jadx.core.dex.nodes", "jump": 0, "inject": "true", "param": ""}, {"location": "METHOD_PARAM", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field condition (line 15) is initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.dex.nodes.BlockNode", "method": "setDomFrontier(java.util.BitSet)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/nodes/BlockNode.java", "pkg": "jadx.core.dex.nodes", "jump": 0, "inject": "true", "param": "domFrontier"}, {"location": "METHOD_PARAM", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) passing @Nullable parameter 'parent' where @NonNull is required", "(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field condition (line 15) is initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field region (line 32) is initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.dex.regions.Region", "method": "Region(jadx.core.dex.nodes.IRegion)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/regions/Region.java", "pkg": "jadx.core.dex.regions", "jump": 0, "inject": "true", "param": "parent"}, {"location": "METHOD_PARAM", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field condition (line 15) is initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field region (line 32) is initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field outBlock (line 20) is initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.dex.regions.conditions.IfInfo", "method": "setOutBlock(jadx.core.dex.nodes.BlockNode)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/regions/conditions/IfInfo.java", "pkg": "jadx.core.dex.regions.conditions", "jump": 0, "inject": "true", "param": "outBlock"}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.dex.attributes.AttributeStorage", "method": "getAnnotation(java.lang.String)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/attributes/AttributeStorage.java", "pkg": "jadx.core.dex.attributes", "jump": 0, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) passing @Nullable parameter 'valueMap.get(insn.getKey(i))' where @NonNull is required"], "class": "jadx.core.dex.attributes.nodes.EnumMapAttr.KeyValueMap", "method": "get(java.lang.Object)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/attributes/nodes/EnumMapAttr.java", "pkg": "jadx.core.dex.attributes.nodes", "jump": 0, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": [], "class": "jadx.core.dex.nodes.ClassNode", "method": "searchFieldByName(java.lang.String)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/nodes/ClassNode.java", "pkg": "jadx.core.dex.nodes", "jump": 0, "inject": "true", "param": ""}, {"location": "CLASS_FIELD", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field condition (line 15) is initialized along all control-flow paths (remember to check for exceptions or early returns).", "dereferenced expression fieldFixInfo.fieldFixMap is @Nullable"], "class": "jadx.core.dex.visitors.ShadowFieldVisitor.FieldFixInfo", "method": "", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/visitors/ShadowFieldVisitor.java", "pkg": "jadx.core.dex.visitors", "jump": 0, "inject": "true", "param": "fieldFixMap"}, {"location": "CLASS_FIELD", "annotation": "org.jetbrains.annotations.Nullable", "errors": [], "class": "jadx.core.dex.nodes.MethodNode", "method": "", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/nodes/MethodNode.java", "pkg": "jadx.core.dex.nodes", "jump": 0, "inject": "true", "param": "enterBlock"}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field condition (line 15) is initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field region (line 32) is initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) method returns @Nullable, but superclass method jadx.api.ICodeCache.get(java.lang.String) returns @NonNull"], "class": "jadx.api.impl.InMemoryCodeCache", "method": "get(java.lang.String)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/api/impl/InMemoryCodeCache.java", "pkg": "jadx.api.impl", "jump": 0, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.utils.BlockUtils", "method": "getBlockByWrappedInsn(jadx.core.dex.nodes.MethodNode,jadx.core.dex.nodes.InsnNode)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/utils/BlockUtils.java", "pkg": "jadx.core.utils", "jump": 0, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": [], "class": "jadx.core.dex.nodes.ClassNode", "method": "searchMethodByShortId(java.lang.String)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/nodes/ClassNode.java", "pkg": "jadx.core.dex.nodes", "jump": 0, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) passing @Nullable parameter 'readArgTypesArray(in)' where @NonNull is required"], "class": "jadx.core.clsp.ClsSet", "method": "readArgTypesArray(java.io.DataInputStream)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/clsp/ClsSet.java", "pkg": "jadx.core.clsp", "jump": 0, "inject": "true", "param": ""}, {"location": "METHOD_PARAM", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) passing @Nullable parameter 'localeVariant' where @NonNull is required"], "class": "jadx.core.xmlgen.entry.EntryConfig", "method": "EntryConfig(short,short,char[],char[],byte,byte,int,byte,byte,byte,short,short,short,byte,byte,short,short,short,char[],char[],byte,byte,boolean,int)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/xmlgen/entry/EntryConfig.java", "pkg": "jadx.core.xmlgen.entry", "jump": 0, "inject": "true", "param": "localeScript"}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field condition (line 15) is initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.dex.visitors.SimplifyVisitor", "method": "convertInvoke(jadx.core.dex.nodes.MethodNode,jadx.core.dex.instructions.InvokeNode)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/visitors/SimplifyVisitor.java", "pkg": "jadx.core.dex.visitors", "jump": 0, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field condition (line 15) is initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.deobf.PackageNode", "method": "getInnerPackageByName(java.lang.String)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/deobf/PackageNode.java", "pkg": "jadx.core.deobf", "jump": 0, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.utils.BlockUtils", "method": "getNextBlock(jadx.core.dex.nodes.BlockNode)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/utils/BlockUtils.java", "pkg": "jadx.core.utils", "jump": 0, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) method returns @Nullable, but superclass method jadx.api.JavaNode.getDeclaringClass() returns @NonNull"], "class": "jadx.api.JavaPackage", "method": "getDeclaringClass()", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/api/JavaPackage.java", "pkg": "jadx.api", "jump": 0, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) method returns @Nullable, but superclass method jadx.core.dex.instructions.BaseInvokeNode.getInstanceArg() returns @NonNull"], "class": "jadx.core.dex.instructions.mods.ConstructorInsn", "method": "getInstanceArg()", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/instructions/mods/ConstructorInsn.java", "pkg": "jadx.core.dex.instructions.mods", "jump": 0, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) passing @Nullable parameter 'field' where @NonNull is required"], "class": "jadx.core.dex.nodes.RootNode", "method": "resolveField(jadx.core.dex.info.FieldInfo)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/nodes/RootNode.java", "pkg": "jadx.core.dex.nodes", "jump": 0, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field condition (line 15) is initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.api.ResourcesLoader", "method": "<T>decodeStream(jadx.api.ResourceFile,jadx.api.ResourcesLoader.ResourceDecoder<T>)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/api/ResourcesLoader.java", "pkg": "jadx.api", "jump": 0, "inject": "true", "param": ""}, {"location": "CLASS_FIELD", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field condition (line 15) is initialized along all control-flow paths (remember to check for exceptions or early returns).", "dereferenced expression preCondition is @Nullable"], "class": "jadx.core.dex.regions.loops.LoopRegion", "method": "", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/regions/loops/LoopRegion.java", "pkg": "jadx.core.dex.regions.loops", "jump": 0, "inject": "true", "param": "preCondition"}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field condition (line 15) is initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.xmlgen.XmlDeobf", "method": "getNewClassName(jadx.core.dex.nodes.RootNode,java.lang.String)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/xmlgen/XmlDeobf.java", "pkg": "jadx.core.xmlgen", "jump": 0, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.utils.BlockUtils", "method": "searchBlockWithPhi(jadx.core.dex.nodes.MethodNode,jadx.core.dex.instructions.PhiInsn)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/utils/BlockUtils.java", "pkg": "jadx.core.utils", "jump": 0, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field condition (line 15) is initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field region (line 32) is initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.dex.visitors.regions.RegionMaker", "method": "processHandlersOutBlocks(jadx.core.dex.nodes.MethodNode,java.util.Set<jadx.core.dex.trycatch.TryCatchBlock>)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/visitors/regions/RegionMaker.java", "pkg": "jadx.core.dex.visitors.regions", "jump": 0, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field condition (line 15) is initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field region (line 32) is initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) method returns @Nullable, but superclass method jadx.core.dex.attributes.AttributeStorage.getAnnotation(java.lang.String) returns @NonNull"], "class": "jadx.core.dex.attributes.EmptyAttrStorage", "method": "getAnnotation(java.lang.String)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/attributes/EmptyAttrStorage.java", "pkg": "jadx.core.dex.attributes", "jump": 0, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field condition (line 15) is initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.codegen.NameGen", "method": "fromName(java.lang.String)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/codegen/NameGen.java", "pkg": "jadx.core.codegen", "jump": 0, "inject": "true", "param": ""}, {"location": "METHOD_PARAM", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field condition (line 15) is initialized along all control-flow paths (remember to check for exceptions or early returns).", "dereferenced expression payload is @Nullable", "(Covered) initializer method does not guarantee @NonNull field region (line 32) is initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.dex.instructions.SwitchData", "method": "SwitchData(jadx.api.plugins.input.insns.custom.ISwitchPayload)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/instructions/SwitchData.java", "pkg": "jadx.core.dex.instructions", "jump": 0, "inject": "true", "param": "payload"}, {"location": "METHOD_PARAM", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field condition (line 15) is initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field region (line 32) is initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.dex.visitors.regions.variables.VarUsage", "method": "VarUsage(jadx.core.dex.instructions.args.SSAVar)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/visitors/regions/variables/VarUsage.java", "pkg": "jadx.core.dex.visitors.regions.variables", "jump": 0, "inject": "true", "param": "var"}, {"location": "METHOD_PARAM", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field condition (line 15) is initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) passing @Nullable parameter 'result' where @NonNull is required"], "class": "jadx.core.dex.instructions.mods.TernaryInsn", "method": "TernaryInsn(jadx.core.dex.regions.conditions.IfCondition,jadx.core.dex.instructions.args.RegisterArg,jadx.core.dex.instructions.args.InsnArg,jadx.core.dex.instructions.args.InsnArg)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/instructions/mods/TernaryInsn.java", "pkg": "jadx.core.dex.instructions.mods", "jump": 0, "inject": "true", "param": "result"}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.clsp.ClspGraph", "method": "getMethodDetails(jadx.core.dex.info.MethodInfo)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/clsp/ClspGraph.java", "pkg": "jadx.core.clsp", "jump": 0, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.utils.BlockUtils", "method": "foundWrappedInsn(jadx.core.dex.nodes.InsnNode,jadx.core.dex.nodes.InsnNode)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/utils/BlockUtils.java", "pkg": "jadx.core.utils", "jump": 0, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field condition (line 15) is initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.dex.visitors.EnumVisitor", "method": "extractEnumFieldsFromFilledArray(jadx.core.dex.nodes.ClassNode,jadx.core.dex.nodes.InsnNode,jadx.core.dex.nodes.BlockNode,java.util.List<jadx.core.dex.nodes.InsnNode>)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/visitors/EnumVisitor.java", "pkg": "jadx.core.dex.visitors", "jump": 0, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field condition (line 15) is initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field region (line 32) is initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) method returns @Nullable, but superclass method jadx.core.dex.attributes.AttributeStorage.<T>get(jadx.core.dex.attributes.AType<T>) returns @NonNull"], "class": "jadx.core.dex.attributes.EmptyAttrStorage", "method": "<T>get(jadx.core.dex.attributes.AType<T>)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/attributes/EmptyAttrStorage.java", "pkg": "jadx.core.dex.attributes", "jump": 0, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": [], "class": "jadx.core.dex.nodes.RootNode", "method": "deepResolveField(@org.jetbrains.annotations.NotNull jadx.core.dex.nodes.ClassNode,jadx.core.dex.info.FieldInfo)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/nodes/RootNode.java", "pkg": "jadx.core.dex.nodes", "jump": 0, "inject": "true", "param": ""}, {"location": "CLASS_FIELD", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["enhanced-for expression instructions is @Nullable"], "class": "jadx.core.dex.nodes.MethodNode", "method": "", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/nodes/MethodNode.java", "pkg": "jadx.core.dex.nodes", "jump": 0, "inject": "true", "param": "instructions"}, {"location": "METHOD_PARAM", "annotation": "org.jetbrains.annotations.Nullable", "errors": [], "class": "jadx.api.ResourceFile", "method": "ResourceFile(jadx.api.JadxDecompiler,java.lang.String,jadx.api.ResourceType)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/api/ResourceFile.java", "pkg": "jadx.api", "jump": 0, "inject": "true", "param": "decompiler"}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": [], "class": "jadx.api.JadxDecompiler", "method": "getDefinitionPosition(jadx.api.JavaNode)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/api/JadxDecompiler.java", "pkg": "jadx.api", "jump": 0, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": [], "class": "jadx.core.dex.nodes.ClassNode", "method": "searchMethod(jadx.core.dex.info.MethodInfo)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/nodes/ClassNode.java", "pkg": "jadx.core.dex.nodes", "jump": 0, "inject": "true", "param": ""}, {"location": "CLASS_FIELD", "annotation": "org.jetbrains.annotations.Nullable", "errors": [], "class": "jadx.api.JadxArgs", "method": "", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/api/JadxArgs.java", "pkg": "jadx.api", "jump": 0, "inject": "true", "param": "classFilter"}, {"location": "CLASS_FIELD", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field condition (line 15) is initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.xmlgen.ManifestAttributes", "method": "", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/xmlgen/ManifestAttributes.java", "pkg": "jadx.core.xmlgen", "jump": 0, "inject": "true", "param": "instance"}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field condition (line 15) is initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field region (line 32) is initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) method returns @Nullable, but superclass method jadx.api.ICodeCache.get(java.lang.String) returns @NonNull"], "class": "jadx.api.impl.NoOpCodeCache", "method": "get(java.lang.String)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/api/impl/NoOpCodeCache.java", "pkg": "jadx.api.impl", "jump": 0, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": [], "class": "jadx.core.dex.instructions.args.SSAVar", "method": "getImmutableType()", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/instructions/args/SSAVar.java", "pkg": "jadx.core.dex.instructions.args", "jump": 0, "inject": "true", "param": ""}, {"location": "CLASS_FIELD", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields accessFlags (line 54), parentClass (line 69) are initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.dex.nodes.ClassNode", "method": "", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/nodes/ClassNode.java", "pkg": "jadx.core.dex.nodes", "jump": 0, "inject": "true", "param": "superClass"}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) passing @Nullable parameter 'returnInsn' where @NonNull is required"], "class": "jadx.core.utils.BlockUtils", "method": "getLastInsn(jadx.core.dex.nodes.IBlock)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/utils/BlockUtils.java", "pkg": "jadx.core.utils", "jump": 0, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) passing @Nullable parameter 'first.getWildcardType()' where @NonNull is required"], "class": "jadx.core.dex.instructions.args.ArgType", "method": "getWildcardType()", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/instructions/args/ArgType.java", "pkg": "jadx.core.dex.instructions.args", "jump": 0, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) passing @Nullable parameter 'returnBlock' where @NonNull is required"], "class": "jadx.core.utils.Utils", "method": "<T>getOne(java.util.List<T>)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/utils/Utils.java", "pkg": "jadx.core.utils", "jump": 0, "inject": "true", "param": ""}, {"location": "METHOD_PARAM", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.xmlgen.BinaryXMLParser", "method": "decodeAttribute(int,int,int,java.lang.String,java.lang.String)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/xmlgen/BinaryXMLParser.java", "pkg": "jadx.core.xmlgen", "jump": 0, "inject": "true", "param": "shortNsName"}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": [], "class": "jadx.core.dex.nodes.RootNode", "method": "deepResolveMethod(@org.jetbrains.annotations.NotNull jadx.core.dex.nodes.ClassNode,java.lang.String)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/nodes/RootNode.java", "pkg": "jadx.core.dex.nodes", "jump": 0, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) method returns @Nullable, but superclass method jadx.core.dex.instructions.args.ArgType.selectFirst() returns @NonNull"], "class": "jadx.core.dex.instructions.args.ArgType.KnownType", "method": "selectFirst()", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/instructions/args/ArgType.java", "pkg": "jadx.core.dex.instructions.args", "jump": 0, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.utils.BlockUtils", "method": "foundWrappedInsnInCondition(jadx.core.dex.regions.conditions.IfCondition,jadx.core.dex.nodes.InsnNode)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/utils/BlockUtils.java", "pkg": "jadx.core.utils", "jump": 0, "inject": "true", "param": ""}, {"location": "METHOD_PARAM", "annotation": "org.jetbrains.annotations.Nullable", "errors": [], "class": "jadx.core.dex.info.MethodInfo", "method": "makeShortId(java.lang.String,java.util.List<jadx.core.dex.instructions.args.ArgType>,jadx.core.dex.instructions.args.ArgType)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/info/MethodInfo.java", "pkg": "jadx.core.dex.info", "jump": -1, "inject": "true", "param": "retType"}, {"location": "METHOD_PARAM", "annotation": "org.jetbrains.annotations.Nullable", "errors": [], "class": "jadx.core.utils.InsnRemover", "method": "InsnRemover(jadx.core.dex.nodes.MethodNode,jadx.core.dex.nodes.BlockNode)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/utils/InsnRemover.java", "pkg": "jadx.core.utils", "jump": -1, "inject": "true", "param": "block"}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": [], "class": "jadx.api.JadxDecompiler", "method": "getJavaNodeAtPosition(jadx.api.ICodeInfo,int,int)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/api/JadxDecompiler.java", "pkg": "jadx.api", "jump": -1, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field condition (line 15) is initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.dex.visitors.SimplifyVisitor", "method": "simplifyArith(jadx.core.dex.instructions.ArithNode)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/visitors/SimplifyVisitor.java", "pkg": "jadx.core.dex.visitors", "jump": -1, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": [], "class": "jadx.core.dex.instructions.args.RegisterArg", "method": "getImmutableType()", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/instructions/args/RegisterArg.java", "pkg": "jadx.core.dex.instructions.args", "jump": -1, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": [], "class": "jadx.core.dex.attributes.annotations.AnnotationsList", "method": "pack(java.util.List<jadx.api.plugins.input.data.annotations.IAnnotation>)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/attributes/annotations/AnnotationsList.java", "pkg": "jadx.core.dex.attributes.annotations", "jump": -1, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.utils.EncodedValueUtils", "method": "convertToConstValue(jadx.core.dex.nodes.RootNode,jadx.api.plugins.input.data.annotations.EncodedValue)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/utils/EncodedValueUtils.java", "pkg": "jadx.core.utils", "jump": -1, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field condition (line 15) is initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.deobf.DeobfPresets", "method": "getForFld(jadx.core.dex.info.FieldInfo)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/deobf/DeobfPresets.java", "pkg": "jadx.core.deobf", "jump": -1, "inject": "true", "param": ""}, {"location": "METHOD_PARAM", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field condition (line 15) is initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field region (line 32) is initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.dex.regions.conditions.IfRegion", "method": "setElseRegion(jadx.core.dex.nodes.IContainer)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/regions/conditions/IfRegion.java", "pkg": "jadx.core.dex.regions.conditions", "jump": -1, "inject": "true", "param": "elseRegion"}, {"location": "METHOD_PARAM", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field condition (line 15) is initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.xmlgen.ResXmlGen", "method": "addSimpleValue(jadx.core.codegen.CodeWriter,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/xmlgen/ResXmlGen.java", "pkg": "jadx.core.xmlgen", "jump": -1, "inject": "true", "param": "attrValue"}, {"location": "METHOD_PARAM", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull field result (line 30) is initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.dex.nodes.InsnNode", "method": "setResult(jadx.core.dex.instructions.args.RegisterArg)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/nodes/InsnNode.java", "pkg": "jadx.core.dex.nodes", "jump": -1, "inject": "true", "param": "res"}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": [], "class": "jadx.core.dex.instructions.args.SSAVar", "method": "getOnlyOneUseInPhi()", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/instructions/args/SSAVar.java", "pkg": "jadx.core.dex.instructions.args", "jump": -1, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field condition (line 15) is initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.dex.visitors.RenameVisitor", "method": "getRootPkg(java.lang.String)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/visitors/RenameVisitor.java", "pkg": "jadx.core.dex.visitors", "jump": -1, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field condition (line 15) is initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field region (line 32) is initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.dex.visitors.regions.RegionMaker", "method": "traverse(jadx.core.dex.nodes.IRegion,jadx.core.dex.nodes.BlockNode,jadx.core.dex.visitors.regions.RegionStack)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/visitors/regions/RegionMaker.java", "pkg": "jadx.core.dex.visitors.regions", "jump": -1, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field condition (line 15) is initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) passing @Nullable parameter 'makeUseBound(regArg)' where @NonNull is required"], "class": "jadx.core.dex.visitors.typeinference.TypeInferenceVisitor", "method": "makeUseBound(jadx.core.dex.instructions.args.RegisterArg)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/visitors/typeinference/TypeInferenceVisitor.java", "pkg": "jadx.core.dex.visitors.typeinference", "jump": -1, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.xmlgen.ResourceStorage", "method": "getRename(int)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/xmlgen/ResourceStorage.java", "pkg": "jadx.core.xmlgen", "jump": -1, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": [], "class": "jadx.api.JavaClass", "method": "getSourceLine(int)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/api/JavaClass.java", "pkg": "jadx.api", "jump": -1, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field condition (line 15) is initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.dex.visitors.blocksmaker.BlockProcessor", "method": "getInsnsFromEnd(jadx.core.dex.nodes.BlockNode,int)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/visitors/blocksmaker/BlockProcessor.java", "pkg": "jadx.core.dex.visitors.blocksmaker", "jump": -1, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field condition (line 15) is initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.deobf.Deobfuscator", "method": "getFieldAlias(jadx.core.dex.nodes.FieldNode)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/deobf/Deobfuscator.java", "pkg": "jadx.core.deobf", "jump": -1, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": [], "class": "jadx.core.dex.nodes.ClassNode", "method": "searchFieldByNameAndType(jadx.core.dex.info.FieldInfo)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/nodes/ClassNode.java", "pkg": "jadx.core.dex.nodes", "jump": -1, "inject": "true", "param": ""}, {"location": "METHOD_PARAM", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field condition (line 15) is initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field region (line 32) is initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) passing @Nullable parameter 'elseBlock' where @NonNull is required"], "class": "jadx.core.dex.regions.conditions.IfInfo", "method": "IfInfo(jadx.core.dex.regions.conditions.IfInfo,jadx.core.dex.nodes.BlockNode,jadx.core.dex.nodes.BlockNode)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/regions/conditions/IfInfo.java", "pkg": "jadx.core.dex.regions.conditions", "jump": -1, "inject": "true", "param": "elseBlock"}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) passing @Nullable parameter 'phiArg' where @NonNull is required"], "class": "jadx.core.dex.instructions.PhiInsn", "method": "getArgBySsaVar(jadx.core.dex.instructions.args.SSAVar)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/instructions/PhiInsn.java", "pkg": "jadx.core.dex.instructions", "jump": -1, "inject": "true", "param": ""}, {"location": "METHOD_PARAM", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field condition (line 15) is initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field region (line 32) is initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.dex.visitors.regions.LoopRegionVisitor", "method": "checkInvoke(jadx.core.dex.nodes.InsnNode,java.lang.String,java.lang.String)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/visitors/regions/LoopRegionVisitor.java", "pkg": "jadx.core.dex.visitors.regions", "jump": -1, "inject": "true", "param": "declClsFullName"}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field condition (line 15) is initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.dex.visitors.EnumVisitor", "method": "extractEnumFieldsFromInvoke(jadx.core.dex.nodes.ClassNode,jadx.core.dex.nodes.BlockNode,jadx.core.dex.instructions.InvokeNode,java.util.List<jadx.core.dex.nodes.InsnNode>)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/visitors/EnumVisitor.java", "pkg": "jadx.core.dex.visitors", "jump": -1, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field condition (line 15) is initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field region (line 32) is initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.dex.visitors.regions.RegionMaker", "method": "makeLoopRegion(jadx.core.dex.nodes.IRegion,jadx.core.dex.attributes.nodes.LoopInfo,java.util.List<jadx.core.dex.nodes.BlockNode>)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/visitors/regions/RegionMaker.java", "pkg": "jadx.core.dex.visitors.regions", "jump": -1, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": [], "class": "jadx.core.dex.attributes.annotations.AnnotationsList", "method": "get(java.lang.String)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/attributes/annotations/AnnotationsList.java", "pkg": "jadx.core.dex.attributes.annotations", "jump": -1, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field condition (line 15) is initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.dex.visitors.blocksmaker.helpers.InsnsSlice", "method": "getBlock(jadx.core.dex.nodes.InsnNode)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/visitors/blocksmaker/helpers/InsnsSlice.java", "pkg": "jadx.core.dex.visitors.blocksmaker.helpers", "jump": -1, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": [], "class": "jadx.api.ResourceFile", "method": "createResourceFile(jadx.api.JadxDecompiler,java.lang.String,jadx.api.ResourceType)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/api/ResourceFile.java", "pkg": "jadx.api", "jump": -1, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.utils.files.FileUtils", "method": "toFile(java.lang.String)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/utils/files/FileUtils.java", "pkg": "jadx.core.utils.files", "jump": -1, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field condition (line 15) is initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.dex.visitors.EnumVisitor", "method": "getValuesInitInsn(jadx.core.dex.nodes.MethodNode,jadx.core.dex.nodes.FieldNode)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/visitors/EnumVisitor.java", "pkg": "jadx.core.dex.visitors", "jump": -1, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field condition (line 15) is initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.deobf.Deobfuscator", "method": "getMthOverride(java.util.List<jadx.core.dex.nodes.MethodNode>,java.lang.String)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/deobf/Deobfuscator.java", "pkg": "jadx.core.deobf", "jump": -1, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.utils.BlockUtils", "method": "traverseWhileDominates(jadx.core.dex.nodes.BlockNode,jadx.core.dex.nodes.BlockNode)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/utils/BlockUtils.java", "pkg": "jadx.core.utils", "jump": -1, "inject": "true", "param": ""}, {"location": "METHOD_PARAM", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.xmlgen.BinaryXMLParser", "method": "isDeobfCandidateAttr(java.lang.String,java.lang.String)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/xmlgen/BinaryXMLParser.java", "pkg": "jadx.core.xmlgen", "jump": -1, "inject": "true", "param": "shortNsName"}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field condition (line 15) is initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field region (line 32) is initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.dex.visitors.regions.RegionMaker", "method": "processLoop(jadx.core.dex.nodes.IRegion,jadx.core.dex.attributes.nodes.LoopInfo,jadx.core.dex.visitors.regions.RegionStack)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/visitors/regions/RegionMaker.java", "pkg": "jadx.core.dex.visitors.regions", "jump": -1, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field condition (line 15) is initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.dex.visitors.RenameVisitor", "method": "fixClsShortName(jadx.api.JadxArgs,java.lang.String)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/visitors/RenameVisitor.java", "pkg": "jadx.core.dex.visitors", "jump": -1, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.utils.InsnUtils", "method": "checkInsnType(jadx.core.dex.nodes.InsnNode,jadx.core.dex.instructions.InsnType)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/utils/InsnUtils.java", "pkg": "jadx.core.utils", "jump": -1, "inject": "true", "param": ""}, {"location": "METHOD_PARAM", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field condition (line 15) is initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) passing @Nullable parameter 'res' where @NonNull is required"], "class": "jadx.core.dex.instructions.ArithNode", "method": "ArithNode(jadx.core.dex.instructions.ArithOp,jadx.core.dex.instructions.args.RegisterArg,jadx.core.dex.instructions.args.InsnArg,jadx.core.dex.instructions.args.InsnArg)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/instructions/ArithNode.java", "pkg": "jadx.core.dex.instructions", "jump": -1, "inject": "true", "param": "res"}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.utils.BlockUtils", "method": "getNextBlockToPath(jadx.core.dex.nodes.BlockNode,jadx.core.dex.nodes.BlockNode)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/utils/BlockUtils.java", "pkg": "jadx.core.utils", "jump": -1, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field condition (line 15) is initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.deobf.DeobfPresets", "method": "getForMth(jadx.core.dex.info.MethodInfo)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/deobf/DeobfPresets.java", "pkg": "jadx.core.deobf", "jump": -1, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.utils.InsnUtils", "method": "recursiveInsnCheck(jadx.core.dex.nodes.InsnNode,jadx.core.dex.instructions.InsnType,java.util.function.Predicate<jadx.core.dex.nodes.InsnNode>)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/utils/InsnUtils.java", "pkg": "jadx.core.utils", "jump": -1, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field condition (line 15) is initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.dex.visitors.EnumVisitor", "method": "getConstString(jadx.core.dex.nodes.RootNode,jadx.core.dex.instructions.args.InsnArg)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/visitors/EnumVisitor.java", "pkg": "jadx.core.dex.visitors", "jump": -1, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field condition (line 15) is initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field region (line 32) is initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.dex.visitors.regions.RegionMaker", "method": "traverseMonitorExitsCross(jadx.core.dex.nodes.BlockNode,java.util.Set<jadx.core.dex.nodes.BlockNode>,java.util.Set<jadx.core.dex.nodes.BlockNode>)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/visitors/regions/RegionMaker.java", "pkg": "jadx.core.dex.visitors.regions", "jump": -1, "inject": "true", "param": ""}, {"location": "CLASS_FIELD", "annotation": "org.jetbrains.annotations.Nullable", "errors": [], "class": "jadx.core.dex.instructions.args.SSAVar", "method": "", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/instructions/args/SSAVar.java", "pkg": "jadx.core.dex.instructions.args", "jump": -1, "inject": "true", "param": "codeVar"}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field condition (line 15) is initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field region (line 32) is initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.dex.visitors.regions.RegionMaker", "method": "processSwitch(jadx.core.dex.nodes.IRegion,jadx.core.dex.nodes.BlockNode,jadx.core.dex.instructions.SwitchInsn,jadx.core.dex.visitors.regions.RegionStack)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/visitors/regions/RegionMaker.java", "pkg": "jadx.core.dex.visitors.regions", "jump": -1, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field condition (line 15) is initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.dex.visitors.SimplifyVisitor", "method": "getConstString(jadx.core.dex.instructions.args.InsnArg)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/visitors/SimplifyVisitor.java", "pkg": "jadx.core.dex.visitors", "jump": -1, "inject": "true", "param": ""}, {"location": "CLASS_FIELD", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field condition (line 15) is initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.xmlgen.XmlSecurity", "method": "", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/xmlgen/XmlSecurity.java", "pkg": "jadx.core.xmlgen", "jump": -1, "inject": "true", "param": "secureDbf"}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field condition (line 15) is initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field region (line 32) is initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.dex.visitors.regions.RegionMaker", "method": "searchFallThroughCase(jadx.core.dex.nodes.BlockNode,jadx.core.dex.nodes.BlockNode,java.util.BitSet)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/visitors/regions/RegionMaker.java", "pkg": "jadx.core.dex.visitors.regions", "jump": -1, "inject": "true", "param": ""}, {"location": "CLASS_FIELD", "annotation": "org.jetbrains.annotations.Nullable", "errors": [], "class": "jadx.core.dex.nodes.MethodNode", "method": "", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/nodes/MethodNode.java", "pkg": "jadx.core.dex.nodes", "jump": -1, "inject": "true", "param": "argsList"}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field condition (line 15) is initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field region (line 32) is initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.dex.visitors.PrepareForCodeGen", "method": "searchConstructorCall(jadx.core.dex.nodes.MethodNode)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/visitors/PrepareForCodeGen.java", "pkg": "jadx.core.dex.visitors", "jump": -1, "inject": "true", "param": ""}, {"location": "METHOD_PARAM", "annotation": "org.jetbrains.annotations.Nullable", "errors": [], "class": "jadx.core.utils.exceptions.JadxException", "method": "JadxException(jadx.core.dex.nodes.ClassNode,java.lang.String,java.lang.Throwable)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/utils/exceptions/JadxException.java", "pkg": "jadx.core.utils.exceptions", "jump": -1, "inject": "true", "param": "th"}, {"location": "METHOD_PARAM", "annotation": "org.jetbrains.annotations.Nullable", "errors": [], "class": "jadx.core.dex.attributes.nodes.NotificationAttrNode", "method": "addWarnComment(java.lang.String,java.lang.Throwable)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/attributes/nodes/NotificationAttrNode.java", "pkg": "jadx.core.dex.attributes.nodes", "jump": -1, "inject": "true", "param": "exc"}, {"location": "METHOD_PARAM", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field condition (line 15) is initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.codegen.json.JsonCodeGen", "method": "processCls(jadx.core.dex.nodes.ClassNode,jadx.core.codegen.ClassGen)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/codegen/json/JsonCodeGen.java", "pkg": "jadx.core.codegen.json", "jump": -1, "inject": "true", "param": "parentCodeGen"}, {"location": "METHOD_PARAM", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field condition (line 15) is initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field region (line 32) is initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.dex.visitors.regions.RegionStack", "method": "removeExit(jadx.core.dex.nodes.BlockNode)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/visitors/regions/RegionStack.java", "pkg": "jadx.core.dex.visitors.regions", "jump": -1, "inject": "true", "param": "exit"}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.clsp.ClspGraph", "method": "getCommonAncestor(java.lang.String,java.lang.String)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/clsp/ClspGraph.java", "pkg": "jadx.core.clsp", "jump": -1, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field condition (line 15) is initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.dex.visitors.ReSugarCode", "method": "getEnumMap(jadx.core.dex.nodes.MethodNode,jadx.core.dex.nodes.FieldNode)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/visitors/ReSugarCode.java", "pkg": "jadx.core.dex.visitors", "jump": -1, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.dex.info.ConstStorage", "method": "getConstFieldByLiteralArg(jadx.core.dex.nodes.ClassNode,jadx.core.dex.instructions.args.LiteralArg)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/info/ConstStorage.java", "pkg": "jadx.core.dex.info", "jump": -1, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.utils.StringUtils", "method": "escapeWhiteSpaceChar(char)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/utils/StringUtils.java", "pkg": "jadx.core.utils", "jump": -1, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field condition (line 15) is initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.dex.visitors.typeinference.TypeInferenceVisitor", "method": "getSsaImmutableType(jadx.core.dex.instructions.args.SSAVar)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/visitors/typeinference/TypeInferenceVisitor.java", "pkg": "jadx.core.dex.visitors.typeinference", "jump": -1, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": [], "class": "jadx.core.dex.instructions.args.ArgType", "method": "<R>visitTypes(java.util.function.Function<jadx.core.dex.instructions.args.ArgType,R>)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/instructions/args/ArgType.java", "pkg": "jadx.core.dex.instructions.args", "jump": -1, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field condition (line 15) is initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.xmlgen.ResXmlGen", "method": "getTypeAsString(int)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/xmlgen/ResXmlGen.java", "pkg": "jadx.core.xmlgen", "jump": -1, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field condition (line 15) is initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.dex.visitors.MarkFinallyVisitor", "method": "checkTempSlice(jadx.core.dex.visitors.blocksmaker.helpers.InsnsSlice)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/visitors/MarkFinallyVisitor.java", "pkg": "jadx.core.dex.visitors", "jump": -1, "inject": "true", "param": ""}, {"location": "METHOD_PARAM", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field condition (line 15) is initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.dex.nodes.BlockNode", "method": "equals(java.lang.Object)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/nodes/BlockNode.java", "pkg": "jadx.core.dex.nodes", "jump": -1, "inject": "true", "param": "obj"}, {"location": "METHOD_PARAM", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.codegen.InsnGen", "method": "makeInsn(jadx.core.dex.nodes.InsnNode,jadx.core.codegen.CodeWriter,jadx.core.codegen.InsnGen.Flags)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java", "pkg": "jadx.core.codegen", "jump": -1, "inject": "true", "param": "flag"}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.xmlgen.entry.ValuesParser", "method": "getSimpleValueString(jadx.core.xmlgen.entry.ResourceEntry)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/xmlgen/entry/ValuesParser.java", "pkg": "jadx.core.xmlgen.entry", "jump": -1, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.clsp.ClspGraph", "method": "getClsDetails(jadx.core.dex.instructions.args.ArgType)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/clsp/ClspGraph.java", "pkg": "jadx.core.clsp", "jump": -1, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": [], "class": "jadx.core.dex.nodes.RootNode", "method": "searchClassByFullAlias(java.lang.String)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/nodes/RootNode.java", "pkg": "jadx.core.dex.nodes", "jump": -1, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field condition (line 15) is initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.codegen.NameGen", "method": "makeNameFromInsn(jadx.core.dex.nodes.InsnNode)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/codegen/NameGen.java", "pkg": "jadx.core.codegen", "jump": -1, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field condition (line 15) is initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field region (line 32) is initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.dex.visitors.regions.TernaryMod", "method": "getTernaryInsnBlock(jadx.core.dex.nodes.IContainer)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/visitors/regions/TernaryMod.java", "pkg": "jadx.core.dex.visitors.regions", "jump": -1, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": [], "class": "jadx.api.JadxDecompiler", "method": "getJavaClassByNode(jadx.core.dex.nodes.ClassNode)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/api/JadxDecompiler.java", "pkg": "jadx.api", "jump": -1, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.xmlgen.ResourceStorage", "method": "searchEntryWithSameName(jadx.core.xmlgen.entry.ResourceEntry)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/xmlgen/ResourceStorage.java", "pkg": "jadx.core.xmlgen", "jump": -1, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field condition (line 15) is initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.dex.nodes.parser.SignatureParser", "method": "consumeUntil(char)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/nodes/parser/SignatureParser.java", "pkg": "jadx.core.dex.nodes.parser", "jump": -1, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field condition (line 15) is initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.codegen.TypeGen", "method": "literalToRawString(jadx.core.dex.instructions.args.LiteralArg)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/codegen/TypeGen.java", "pkg": "jadx.core.codegen", "jump": -1, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field condition (line 15) is initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.dex.visitors.ProcessInstructionsVisitor", "method": "getInsnAtOffset(jadx.core.dex.nodes.InsnNode[],int)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/visitors/ProcessInstructionsVisitor.java", "pkg": "jadx.core.dex.visitors", "jump": -1, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field condition (line 15) is initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.dex.visitors.blocksmaker.BlockProcessor", "method": "getMoveExceptionRegister(jadx.core.dex.nodes.BlockNode)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/visitors/blocksmaker/BlockProcessor.java", "pkg": "jadx.core.dex.visitors.blocksmaker", "jump": -1, "inject": "true", "param": ""}, {"location": "CLASS_FIELD", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field condition (line 15) is initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.codegen.json.cls.JsonField", "method": "", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/codegen/json/cls/JsonField.java", "pkg": "jadx.core.codegen.json.cls", "jump": -1, "inject": "true", "param": "type"}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field condition (line 15) is initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field region (line 32) is initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.dex.visitors.regions.IfMakerHelper", "method": "restructureIf(jadx.core.dex.nodes.MethodNode,jadx.core.dex.nodes.BlockNode,jadx.core.dex.regions.conditions.IfInfo)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/visitors/regions/IfMakerHelper.java", "pkg": "jadx.core.dex.visitors.regions", "jump": -1, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.utils.StringUtils", "method": "escapeXmlChar(char)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/utils/StringUtils.java", "pkg": "jadx.core.utils", "jump": -1, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field condition (line 15) is initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.dex.visitors.SimplifyVisitor", "method": "getArgFromAppend(jadx.core.dex.nodes.InsnNode)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/visitors/SimplifyVisitor.java", "pkg": "jadx.core.dex.visitors", "jump": -1, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.utils.InsnUtils", "method": "searchInsn(jadx.core.dex.nodes.MethodNode,jadx.core.dex.instructions.InsnType,java.util.function.Predicate<jadx.core.dex.nodes.InsnNode>)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/utils/InsnUtils.java", "pkg": "jadx.core.utils", "jump": -1, "inject": "true", "param": ""}, {"location": "CLASS_FIELD", "annotation": "org.jetbrains.annotations.Nullable", "errors": [], "class": "jadx.core.dex.nodes.MethodNode", "method": "", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/nodes/MethodNode.java", "pkg": "jadx.core.dex.nodes", "jump": -1, "inject": "true", "param": "thisArg"}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": [], "class": "jadx.core.dex.nodes.RootNode", "method": "deepResolveField(@org.jetbrains.annotations.NotNull jadx.core.dex.info.FieldInfo)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/nodes/RootNode.java", "pkg": "jadx.core.dex.nodes", "jump": -1, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field condition (line 15) is initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.dex.nodes.parser.SignatureParser", "method": "getSignature(jadx.core.dex.attributes.IAttributeNode)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/nodes/parser/SignatureParser.java", "pkg": "jadx.core.dex.nodes.parser", "jump": -1, "inject": "true", "param": ""}, {"location": "CLASS_FIELD", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields accessFlags (line 54), parentClass (line 69) are initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.dex.nodes.ClassNode", "method": "", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/nodes/ClassNode.java", "pkg": "jadx.core.dex.nodes", "jump": -1, "inject": "true", "param": "smali"}, {"location": "METHOD_PARAM", "annotation": "org.jetbrains.annotations.Nullable", "errors": [], "class": "jadx.core.dex.info.ClassInfo", "method": "makeFullClsName(java.lang.String,java.lang.String,jadx.core.dex.info.ClassInfo,boolean,boolean)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/info/ClassInfo.java", "pkg": "jadx.core.dex.info", "jump": -1, "inject": "true", "param": "parentClass"}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": [], "class": "jadx.api.JadxDecompiler", "method": "getJavaFieldByNode(jadx.core.dex.nodes.FieldNode)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/api/JadxDecompiler.java", "pkg": "jadx.api", "jump": -1, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field condition (line 15) is initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.dex.visitors.MarkMethodsForInline", "method": "process(jadx.core.dex.nodes.MethodNode)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/visitors/MarkMethodsForInline.java", "pkg": "jadx.core.dex.visitors", "jump": -1, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.utils.files.FileUtils", "method": "bytesToHex(byte[])", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/utils/files/FileUtils.java", "pkg": "jadx.core.utils.files", "jump": -1, "inject": "true", "param": ""}, {"location": "METHOD_PARAM", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.codegen.ClassGen", "method": "ClassGen(jadx.core.dex.nodes.ClassNode,jadx.core.codegen.ClassGen,boolean,boolean,boolean)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/codegen/ClassGen.java", "pkg": "jadx.core.codegen", "jump": -1, "inject": "true", "param": "parentClsGen"}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": [], "class": "jadx.api.JadxDecompiler", "method": "getJavaMethodByNode(jadx.core.dex.nodes.MethodNode)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/api/JadxDecompiler.java", "pkg": "jadx.api", "jump": -1, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field condition (line 15) is initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.dex.visitors.ShadowFieldVisitor", "method": "getFieldInfo(jadx.core.dex.nodes.InsnNode)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/visitors/ShadowFieldVisitor.java", "pkg": "jadx.core.dex.visitors", "jump": -1, "inject": "true", "param": ""}, {"location": "METHOD_PARAM", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field condition (line 15) is initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.dex.visitors.typeinference.TypeInferenceVisitor", "method": "makePossibleTypesList(jadx.core.dex.instructions.args.ArgType,jadx.core.dex.instructions.args.SSAVar)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/visitors/typeinference/TypeInferenceVisitor.java", "pkg": "jadx.core.dex.visitors.typeinference", "jump": -1, "inject": "true", "param": "var"}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field condition (line 15) is initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.dex.nodes.parser.SignatureParser", "method": "fromNode(jadx.core.dex.attributes.IAttributeNode)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/nodes/parser/SignatureParser.java", "pkg": "jadx.core.dex.nodes.parser", "jump": -1, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": [], "class": "jadx.core.dex.nodes.ClassNode", "method": "getDefaultConstructor()", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/nodes/ClassNode.java", "pkg": "jadx.core.dex.nodes", "jump": -1, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field condition (line 15) is initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.deobf.DeobfPresets", "method": "getForCls(jadx.core.dex.info.ClassInfo)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/deobf/DeobfPresets.java", "pkg": "jadx.core.deobf", "jump": -1, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.xmlgen.entry.ValuesParser", "method": "decodeNameRef(int)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/xmlgen/entry/ValuesParser.java", "pkg": "jadx.core.xmlgen.entry", "jump": -1, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.dex.nodes.utils.MethodUtils", "method": "getMethodGenericReturnType(jadx.core.dex.instructions.BaseInvokeNode)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/nodes/utils/MethodUtils.java", "pkg": "jadx.core.dex.nodes.utils", "jump": -1, "inject": "true", "param": ""}, {"location": "METHOD_PARAM", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field condition (line 15) is initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field region (line 32) is initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.dex.visitors.regions.RegionMaker", "method": "addBreakLabel(jadx.core.dex.nodes.Edge,jadx.core.dex.nodes.BlockNode,jadx.core.dex.nodes.InsnNode)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/visitors/regions/RegionMaker.java", "pkg": "jadx.core.dex.visitors.regions", "jump": -1, "inject": "true", "param": "exit"}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.dex.info.InfoStorage", "method": "getCls(jadx.core.dex.instructions.args.ArgType)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/info/InfoStorage.java", "pkg": "jadx.core.dex.info", "jump": -1, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field condition (line 15) is initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field region (line 32) is initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.dex.visitors.regions.IfMakerHelper", "method": "getNextIf(jadx.core.dex.regions.conditions.IfInfo,jadx.core.dex.nodes.BlockNode)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/visitors/regions/IfMakerHelper.java", "pkg": "jadx.core.dex.visitors.regions", "jump": -1, "inject": "true", "param": ""}, {"location": "CLASS_FIELD", "annotation": "org.jetbrains.annotations.Nullable", "errors": [], "class": "jadx.api.JadxDecompiler", "method": "", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/api/JadxDecompiler.java", "pkg": "jadx.api", "jump": -1, "inject": "true", "param": "resources"}, {"location": "CLASS_FIELD", "annotation": "org.jetbrains.annotations.Nullable", "errors": [], "class": "jadx.core.dex.info.ClassInfo", "method": "", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/info/ClassInfo.java", "pkg": "jadx.core.dex.info", "jump": -1, "inject": "true", "param": "alias"}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.utils.BlockUtils", "method": "getTopBlock(java.util.Collection<jadx.core.dex.nodes.BlockNode>)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/utils/BlockUtils.java", "pkg": "jadx.core.utils", "jump": -1, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": [], "class": "jadx.core.dex.instructions.PhiInsn", "method": "getBlockByArg(jadx.core.dex.instructions.args.RegisterArg)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/instructions/PhiInsn.java", "pkg": "jadx.core.dex.instructions", "jump": -1, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.dex.info.InfoStorage", "method": "getByUniqId(int)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/info/InfoStorage.java", "pkg": "jadx.core.dex.info", "jump": -1, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field condition (line 15) is initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.deobf.Deobfuscator", "method": "getOverrideMethodsNode(java.util.Set<jadx.core.dex.info.MethodInfo>)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/deobf/Deobfuscator.java", "pkg": "jadx.core.deobf", "jump": -1, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.clsp.ClspGraph", "method": "getClspClass(jadx.core.dex.instructions.args.ArgType)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/clsp/ClspGraph.java", "pkg": "jadx.core.clsp", "jump": -1, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.utils.InsnUtils", "method": "getConstValueByInsn(jadx.core.dex.nodes.RootNode,jadx.core.dex.nodes.InsnNode)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/utils/InsnUtils.java", "pkg": "jadx.core.utils", "jump": -1, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.utils.InsnUtils", "method": "searchSingleReturnInsn(jadx.core.dex.nodes.MethodNode,java.util.function.Predicate<jadx.core.dex.nodes.InsnNode>)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/utils/InsnUtils.java", "pkg": "jadx.core.utils", "jump": -1, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field condition (line 15) is initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.dex.visitors.usage.UseSet", "method": "get(K)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/visitors/usage/UseSet.java", "pkg": "jadx.core.dex.visitors.usage", "jump": -1, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": [], "class": "jadx.core.dex.instructions.args.ArgType", "method": "getOuterType()", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/instructions/args/ArgType.java", "pkg": "jadx.core.dex.instructions.args", "jump": -1, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field condition (line 15) is initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.dex.visitors.EnumVisitor", "method": "extractEnumFieldsFromInsn(jadx.core.dex.nodes.ClassNode,jadx.core.dex.nodes.BlockNode,jadx.core.dex.nodes.InsnNode,java.util.List<jadx.core.dex.nodes.InsnNode>)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/visitors/EnumVisitor.java", "pkg": "jadx.core.dex.visitors", "jump": -1, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": [], "class": "jadx.core.dex.attributes.nodes.EnumMapAttr", "method": "getMap(jadx.core.dex.nodes.FieldNode)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/attributes/nodes/EnumMapAttr.java", "pkg": "jadx.core.dex.attributes.nodes", "jump": -1, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.utils.BlockUtils", "method": "searchInsnParent(jadx.core.dex.nodes.MethodNode,jadx.core.dex.nodes.InsnNode)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/utils/BlockUtils.java", "pkg": "jadx.core.utils", "jump": -1, "inject": "true", "param": ""}, {"location": "METHOD_PARAM", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.dex.nodes.utils.MethodUtils", "method": "processMethodArgsOverloaded(jadx.core.dex.instructions.args.ArgType,jadx.core.dex.info.MethodInfo,java.util.List<jadx.core.dex.nodes.IMethodDetails>)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/nodes/utils/MethodUtils.java", "pkg": "jadx.core.dex.nodes.utils", "jump": -1, "inject": "true", "param": "collectedMths"}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field condition (line 15) is initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.codegen.NameGen", "method": "getAliasForObject(java.lang.String)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/codegen/NameGen.java", "pkg": "jadx.core.codegen", "jump": -1, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": [], "class": "jadx.core.dex.nodes.ClassNode", "method": "searchMethodByShortName(java.lang.String)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/nodes/ClassNode.java", "pkg": "jadx.core.dex.nodes", "jump": -1, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.utils.StringUtils", "method": "getSpecialStringForChar(int)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/utils/StringUtils.java", "pkg": "jadx.core.utils", "jump": -1, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field condition (line 15) is initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field region (line 32) is initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.dex.visitors.shrink.ArgsInfo", "method": "checkInline(int,jadx.core.dex.instructions.args.RegisterArg)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/visitors/shrink/ArgsInfo.java", "pkg": "jadx.core.dex.visitors.shrink", "jump": -1, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field condition (line 15) is initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.dex.visitors.MarkMethodsForInline", "method": "inlineMth(jadx.core.dex.nodes.MethodNode,jadx.core.dex.nodes.BlockNode,jadx.core.dex.nodes.BlockNode)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/visitors/MarkMethodsForInline.java", "pkg": "jadx.core.dex.visitors", "jump": -1, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": [], "class": "jadx.api.JadxDecompiler", "method": "convertNode(java.lang.Object)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/api/JadxDecompiler.java", "pkg": "jadx.api", "jump": -1, "inject": "true", "param": ""}, {"location": "CLASS_FIELD", "annotation": "org.jetbrains.annotations.Nullable", "errors": [], "class": "jadx.api.JadxDecompiler", "method": "", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/api/JadxDecompiler.java", "pkg": "jadx.api", "jump": -1, "inject": "true", "param": "xmlParser"}, {"location": "METHOD_PARAM", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.codegen.MethodGen", "method": "needLabel(jadx.core.dex.nodes.InsnNode,jadx.core.dex.nodes.InsnNode)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/codegen/MethodGen.java", "pkg": "jadx.core.codegen", "jump": -1, "inject": "true", "param": "prevInsn"}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field condition (line 15) is initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.dex.nodes.parser.SignatureParser", "method": "consumeObjectType(boolean)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/nodes/parser/SignatureParser.java", "pkg": "jadx.core.dex.nodes.parser", "jump": -1, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field condition (line 15) is initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.dex.visitors.EnumVisitor", "method": "searchFieldPutInsn(jadx.core.dex.nodes.ClassNode,jadx.core.dex.nodes.BlockNode,jadx.core.dex.nodes.FieldNode)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/visitors/EnumVisitor.java", "pkg": "jadx.core.dex.visitors", "jump": -1, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field condition (line 15) is initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.dex.visitors.SimplifyVisitor", "method": "processCast(jadx.core.dex.nodes.MethodNode,jadx.core.dex.instructions.IndexInsnNode)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/visitors/SimplifyVisitor.java", "pkg": "jadx.core.dex.visitors", "jump": -1, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": [], "class": "jadx.core.dex.nodes.MethodNode", "method": "getDebugInfo()", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/nodes/MethodNode.java", "pkg": "jadx.core.dex.nodes", "jump": -1, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.clsp.ClspGraph", "method": "getMethodFromClass(jadx.core.clsp.ClspClass,jadx.core.dex.info.MethodInfo)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/clsp/ClspGraph.java", "pkg": "jadx.core.clsp", "jump": -1, "inject": "true", "param": ""}, {"location": "METHOD_PARAM", "annotation": "org.jetbrains.annotations.Nullable", "errors": [], "class": "jadx.core.dex.instructions.args.RegisterArg", "method": "duplicate(int,jadx.core.dex.instructions.args.ArgType,jadx.core.dex.instructions.args.SSAVar)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/instructions/args/RegisterArg.java", "pkg": "jadx.core.dex.instructions.args", "jump": -1, "inject": "true", "param": "sVar"}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.ProcessClass", "method": "process(jadx.core.dex.nodes.ClassNode,boolean)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/ProcessClass.java", "pkg": "jadx.core", "jump": -2, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field condition (line 15) is initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field region (line 32) is initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.dex.visitors.regions.RegionMaker", "method": "processMonitorEnter(jadx.core.dex.nodes.IRegion,jadx.core.dex.nodes.BlockNode,jadx.core.dex.nodes.InsnNode,jadx.core.dex.visitors.regions.RegionStack)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/visitors/regions/RegionMaker.java", "pkg": "jadx.core.dex.visitors.regions", "jump": -2, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": [], "class": "jadx.core.dex.instructions.args.InsnArg", "method": "wrapInstruction(jadx.core.dex.nodes.MethodNode,jadx.core.dex.nodes.InsnNode,boolean)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/instructions/args/InsnArg.java", "pkg": "jadx.core.dex.instructions.args", "jump": -2, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field condition (line 15) is initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.dex.visitors.DeboxingVisitor", "method": "checkForReplace(jadx.core.dex.instructions.InvokeNode)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/visitors/DeboxingVisitor.java", "pkg": "jadx.core.dex.visitors", "jump": -2, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.codegen.InsnGen", "method": "getClassForSuperCall(jadx.core.codegen.CodeWriter,jadx.core.dex.info.MethodInfo)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java", "pkg": "jadx.core.codegen", "jump": -2, "inject": "true", "param": ""}, {"location": "METHOD_PARAM", "annotation": "org.jetbrains.annotations.Nullable", "errors": [], "class": "jadx.core.utils.exceptions.JadxException", "method": "JadxException(jadx.core.dex.nodes.MethodNode,java.lang.String,java.lang.Throwable)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/utils/exceptions/JadxException.java", "pkg": "jadx.core.utils.exceptions", "jump": -2, "inject": "true", "param": "th"}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": [], "class": "jadx.core.dex.nodes.RootNode", "method": "resolveClass(jadx.core.dex.instructions.args.ArgType)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/nodes/RootNode.java", "pkg": "jadx.core.dex.nodes", "jump": -2, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.dex.nodes.utils.TypeUtils", "method": "replaceClassGenerics(jadx.core.dex.instructions.args.ArgType,jadx.core.dex.instructions.args.ArgType)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/nodes/utils/TypeUtils.java", "pkg": "jadx.core.dex.nodes.utils", "jump": -2, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.utils.BlockUtils", "method": "getBlockByInsn(jadx.core.dex.nodes.MethodNode,jadx.core.dex.nodes.InsnNode)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/utils/BlockUtils.java", "pkg": "jadx.core.utils", "jump": -2, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field condition (line 15) is initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.dex.visitors.ModVisitor", "method": "getParentInsnSkipMove(jadx.core.dex.instructions.args.RegisterArg)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/visitors/ModVisitor.java", "pkg": "jadx.core.dex.visitors", "jump": -2, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field condition (line 15) is initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.dex.visitors.SimplifyVisitor", "method": "simplifyStringConstructor(jadx.core.dex.nodes.MethodNode,jadx.core.dex.instructions.mods.ConstructorInsn)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/visitors/SimplifyVisitor.java", "pkg": "jadx.core.dex.visitors", "jump": -2, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.utils.RegionUtils", "method": "getLastBlock(jadx.core.dex.nodes.IContainer)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/utils/RegionUtils.java", "pkg": "jadx.core.utils", "jump": -2, "inject": "true", "param": ""}, {"location": "CLASS_FIELD", "annotation": "org.jetbrains.annotations.Nullable", "errors": [], "class": "jadx.api.JadxDecompiler", "method": "", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/api/JadxDecompiler.java", "pkg": "jadx.api", "jump": -2, "inject": "true", "param": "classes"}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": [], "class": "jadx.core.dex.nodes.MethodNode", "method": "getLoopForBlock(jadx.core.dex.nodes.BlockNode)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/nodes/MethodNode.java", "pkg": "jadx.core.dex.nodes", "jump": -2, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.utils.RegionUtils", "method": "getBlockContainer(jadx.core.dex.nodes.IContainer,jadx.core.dex.nodes.BlockNode)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/utils/RegionUtils.java", "pkg": "jadx.core.utils", "jump": -2, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field condition (line 15) is initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.dex.visitors.typeinference.TypeInferenceVisitor", "method": "getCommonTypeForPhiArgs(jadx.core.dex.instructions.PhiInsn)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/visitors/typeinference/TypeInferenceVisitor.java", "pkg": "jadx.core.dex.visitors.typeinference", "jump": -2, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.utils.BlockUtils", "method": "selectOtherSafe(jadx.core.dex.nodes.BlockNode,java.util.List<jadx.core.dex.nodes.BlockNode>)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/utils/BlockUtils.java", "pkg": "jadx.core.utils", "jump": -2, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field condition (line 15) is initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.dex.visitors.EnumVisitor", "method": "getConstructorInsn(jadx.core.dex.nodes.InsnNode)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/visitors/EnumVisitor.java", "pkg": "jadx.core.dex.visitors", "jump": -2, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field condition (line 15) is initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field region (line 32) is initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.dex.visitors.regions.IfMakerHelper", "method": "checkForTernaryInCondition(jadx.core.dex.regions.conditions.IfInfo)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/visitors/regions/IfMakerHelper.java", "pkg": "jadx.core.dex.visitors.regions", "jump": -2, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field condition (line 15) is initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.dex.visitors.typeinference.TypeInferenceVisitor", "method": "checkBlockForInsnInsert(jadx.core.dex.nodes.BlockNode)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/visitors/typeinference/TypeInferenceVisitor.java", "pkg": "jadx.core.dex.visitors.typeinference", "jump": -2, "inject": "true", "param": ""}, {"location": "METHOD_PARAM", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) passing @Nullable parameter 'sVar' where @NonNull is required"], "class": "jadx.core.dex.instructions.args.RegisterArg", "method": "duplicate(int,jadx.core.dex.instructions.args.SSAVar)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/instructions/args/RegisterArg.java", "pkg": "jadx.core.dex.instructions.args", "jump": -2, "inject": "true", "param": "sVar"}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field condition (line 15) is initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.deobf.Deobfuscator", "method": "getMethodAlias(jadx.core.dex.nodes.MethodNode)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/deobf/Deobfuscator.java", "pkg": "jadx.core.deobf", "jump": -2, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field condition (line 15) is initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.dex.visitors.MarkFinallyVisitor", "method": "searchFromFirstBlock(jadx.core.dex.nodes.BlockNode,jadx.core.dex.nodes.BlockNode,jadx.core.dex.visitors.blocksmaker.helpers.FinallyExtractInfo)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/visitors/MarkFinallyVisitor.java", "pkg": "jadx.core.dex.visitors", "jump": -2, "inject": "true", "param": ""}, {"location": "METHOD_PARAM", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field condition (line 15) is initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.utils.ErrorsCounter", "method": "formatMsg(jadx.core.dex.nodes.IDexNode,java.lang.String)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/utils/ErrorsCounter.java", "pkg": "jadx.core.utils", "jump": -2, "inject": "true", "param": "msg"}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.utils.BlockUtils", "method": "searchWrappedInsnParent(jadx.core.dex.nodes.MethodNode,jadx.core.dex.nodes.InsnNode)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/utils/BlockUtils.java", "pkg": "jadx.core.utils", "jump": -2, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field condition (line 15) is initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.utils.kotlin.KotlinMetadataUtils", "method": "getParamAsList(jadx.api.plugins.input.data.annotations.IAnnotation,java.lang.String)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/utils/kotlin/KotlinMetadataUtils.java", "pkg": "jadx.core.utils.kotlin", "jump": -2, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field condition (line 15) is initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.dex.visitors.EnumVisitor", "method": "createEnumFieldByConstructor(jadx.core.dex.nodes.ClassNode,jadx.core.dex.nodes.FieldNode,jadx.core.dex.instructions.mods.ConstructorInsn)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/visitors/EnumVisitor.java", "pkg": "jadx.core.dex.visitors", "jump": -2, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field condition (line 15) is initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.dex.visitors.ModVisitor", "method": "getFirstUseSkipMove(jadx.core.dex.instructions.args.RegisterArg)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/visitors/ModVisitor.java", "pkg": "jadx.core.dex.visitors", "jump": -2, "inject": "true", "param": ""}, {"location": "METHOD_PARAM", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) passing @Nullable parameter 'mth' where @NonNull is required"], "class": "jadx.core.utils.InsnRemover", "method": "unbindArgUsage(jadx.core.dex.nodes.MethodNode,jadx.core.dex.instructions.args.InsnArg)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/utils/InsnRemover.java", "pkg": "jadx.core.utils", "jump": -2, "inject": "true", "param": "mth"}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) passing @Nullable parameter 'BlockUtils.getPathCross(mth, thenBlock, elseBlock)' where @NonNull is required"], "class": "jadx.core.utils.BlockUtils", "method": "getPathCross(jadx.core.dex.nodes.MethodNode,jadx.core.dex.nodes.BlockNode,jadx.core.dex.nodes.BlockNode)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/utils/BlockUtils.java", "pkg": "jadx.core.utils", "jump": -2, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.utils.InsnUtils", "method": "getConstValueByArg(jadx.core.dex.nodes.RootNode,jadx.core.dex.instructions.args.InsnArg)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/utils/InsnUtils.java", "pkg": "jadx.core.utils", "jump": -2, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field condition (line 15) is initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.dex.visitors.ConstructorVisitor", "method": "removeAssignChain(jadx.core.dex.nodes.MethodNode,jadx.core.dex.nodes.InsnNode,jadx.core.utils.InsnRemover,jadx.core.dex.instructions.InsnType)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/visitors/ConstructorVisitor.java", "pkg": "jadx.core.dex.visitors", "jump": -2, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field condition (line 15) is initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.dex.visitors.SimplifyVisitor", "method": "simplifyInsn(jadx.core.dex.nodes.MethodNode,jadx.core.dex.nodes.InsnNode)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/visitors/SimplifyVisitor.java", "pkg": "jadx.core.dex.visitors", "jump": -2, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.codegen.AnnotationGen", "method": "getAnnotationDefaultValue(java.lang.String)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/codegen/AnnotationGen.java", "pkg": "jadx.core.codegen", "jump": -2, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field condition (line 15) is initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.dex.visitors.OverrideMethodVisitor", "method": "updateArgType(jadx.core.dex.nodes.MethodNode,jadx.core.dex.nodes.IMethodDetails,java.util.List<jadx.core.dex.instructions.args.ArgType>,int)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/visitors/OverrideMethodVisitor.java", "pkg": "jadx.core.dex.visitors", "jump": -3, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.dex.nodes.utils.TypeUtils", "method": "replaceMethodGenerics(jadx.core.dex.instructions.BaseInvokeNode,jadx.core.dex.nodes.IMethodDetails,jadx.core.dex.instructions.args.ArgType)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/nodes/utils/TypeUtils.java", "pkg": "jadx.core.dex.nodes.utils", "jump": -3, "inject": "true", "param": ""}, {"location": "CLASS_FIELD", "annotation": "org.jetbrains.annotations.Nullable", "errors": [], "class": "jadx.core.dex.instructions.args.SSAVar", "method": "", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/instructions/args/SSAVar.java", "pkg": "jadx.core.dex.instructions.args", "jump": -3, "inject": "true", "param": "usedInPhi"}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field condition (line 15) is initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.dex.visitors.typeinference.TypeInferenceVisitor", "method": "makeInvokeUseBound(jadx.core.dex.instructions.args.RegisterArg,jadx.core.dex.instructions.BaseInvokeNode)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/visitors/typeinference/TypeInferenceVisitor.java", "pkg": "jadx.core.dex.visitors.typeinference", "jump": -3, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field condition (line 15) is initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.xmlgen.ManifestAttributes", "method": "decode(java.lang.String,long)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/xmlgen/ManifestAttributes.java", "pkg": "jadx.core.xmlgen", "jump": -3, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field condition (line 15) is initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field region (line 32) is initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.dex.visitors.regions.RegionMaker", "method": "processIf(jadx.core.dex.nodes.IRegion,jadx.core.dex.nodes.BlockNode,jadx.core.dex.instructions.IfNode,jadx.core.dex.visitors.regions.RegionStack)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/visitors/regions/RegionMaker.java", "pkg": "jadx.core.dex.visitors.regions", "jump": -3, "inject": "true", "param": ""}, {"location": "METHOD_PARAM", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field condition (line 15) is initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field region (line 32) is initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) passing @Nullable parameter 'res' where @NonNull is required"], "class": "jadx.core.dex.instructions.InsnDecoder", "method": "insn(jadx.core.dex.instructions.InsnType,jadx.core.dex.instructions.args.RegisterArg,jadx.core.dex.instructions.args.InsnArg)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/instructions/InsnDecoder.java", "pkg": "jadx.core.dex.instructions", "jump": -3, "inject": "true", "param": "res"}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field condition (line 15) is initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.utils.kotlin.KotlinMetadataUtils", "method": "getClassName(jadx.core.dex.nodes.ClassNode)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/utils/kotlin/KotlinMetadataUtils.java", "pkg": "jadx.core.utils.kotlin", "jump": -3, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field condition (line 15) is initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.dex.visitors.SignatureProcessor", "method": "checkArgTypes(jadx.core.dex.nodes.MethodNode,jadx.core.dex.nodes.parser.SignatureParser,java.util.List<jadx.core.dex.instructions.args.ArgType>)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/visitors/SignatureProcessor.java", "pkg": "jadx.core.dex.visitors", "jump": -3, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field condition (line 15) is initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.dex.visitors.EnumVisitor", "method": "processEnumFieldByField(jadx.core.dex.nodes.ClassNode,jadx.core.dex.nodes.InsnNode,jadx.core.dex.nodes.BlockNode,java.util.List<jadx.core.dex.nodes.InsnNode>)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/visitors/EnumVisitor.java", "pkg": "jadx.core.dex.visitors", "jump": -3, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.utils.RegionUtils", "method": "getLastInsn(jadx.core.dex.nodes.IContainer)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/utils/RegionUtils.java", "pkg": "jadx.core.utils", "jump": -3, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field condition (line 15) is initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.dex.visitors.MarkFinallyVisitor", "method": "isStartBlock(jadx.core.dex.nodes.BlockNode,jadx.core.dex.nodes.BlockNode,jadx.core.dex.visitors.blocksmaker.helpers.FinallyExtractInfo)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/visitors/MarkFinallyVisitor.java", "pkg": "jadx.core.dex.visitors", "jump": -3, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field condition (line 15) is initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.dex.visitors.EnumVisitor", "method": "processEnumFiledByRegister(jadx.core.dex.nodes.ClassNode,jadx.core.dex.instructions.args.RegisterArg,jadx.core.dex.nodes.BlockNode,java.util.List<jadx.core.dex.nodes.InsnNode>)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/visitors/EnumVisitor.java", "pkg": "jadx.core.dex.visitors", "jump": -4, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.dex.visitors.typeinference.TypeUpdate", "method": "checkType(java.util.Set<jadx.core.dex.instructions.args.ArgType>,jadx.core.dex.instructions.args.ArgType)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/visitors/typeinference/TypeUpdate.java", "pkg": "jadx.core.dex.visitors.typeinference", "jump": -4, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.dex.info.ConstStorage", "method": "getResourceField(java.lang.Integer,jadx.core.dex.nodes.RootNode)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/info/ConstStorage.java", "pkg": "jadx.core.dex.info", "jump": -4, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field condition (line 15) is initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.dex.visitors.SimplifyVisitor", "method": "convertStringBuilderChain(jadx.core.dex.nodes.MethodNode,jadx.core.dex.instructions.InvokeNode,java.util.List<jadx.core.dex.nodes.InsnNode>)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/visitors/SimplifyVisitor.java", "pkg": "jadx.core.dex.visitors", "jump": -4, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field condition (line 15) is initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.dex.visitors.ConstructorVisitor", "method": "processConstructor(jadx.core.dex.nodes.MethodNode,jadx.core.dex.instructions.mods.ConstructorInsn)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/visitors/ConstructorVisitor.java", "pkg": "jadx.core.dex.visitors", "jump": -4, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field condition (line 15) is initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.export.TemplateFile", "method": "process(jadx.core.export.TemplateFile.ParserState,char)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/export/TemplateFile.java", "pkg": "jadx.core.export", "jump": -4, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.dex.nodes.utils.TypeUtils", "method": "replaceTypeVariablesUsingMap(jadx.core.dex.instructions.args.ArgType,java.util.Map<jadx.core.dex.instructions.args.ArgType,jadx.core.dex.instructions.args.ArgType>)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/nodes/utils/TypeUtils.java", "pkg": "jadx.core.dex.nodes.utils", "jump": -4, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field condition (line 15) is initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field region (line 32) is initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.dex.visitors.regions.IfMakerHelper", "method": "mergeNestedIfNodes(jadx.core.dex.regions.conditions.IfInfo)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/visitors/regions/IfMakerHelper.java", "pkg": "jadx.core.dex.visitors.regions", "jump": -4, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.dex.regions.conditions.IfCondition", "method": "simplifyCmpOp(jadx.core.dex.regions.conditions.Compare)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/regions/conditions/IfCondition.java", "pkg": "jadx.core.dex.regions.conditions", "jump": -4, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field condition (line 15) is initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field region (line 32) is initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.dex.visitors.regions.IfMakerHelper", "method": "getNextIfNodeInfo(jadx.core.dex.regions.conditions.IfInfo,jadx.core.dex.nodes.BlockNode)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/visitors/regions/IfMakerHelper.java", "pkg": "jadx.core.dex.visitors.regions", "jump": -4, "inject": "true", "param": ""}, {"location": "METHOD_PARAM", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field condition (line 15) is initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field region (line 32) is initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.dex.visitors.regions.RegionStack", "method": "addExit(jadx.core.dex.nodes.BlockNode)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/visitors/regions/RegionStack.java", "pkg": "jadx.core.dex.visitors.regions", "jump": -4, "inject": "true", "param": "exit"}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field condition (line 15) is initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.deobf.Deobfuscator", "method": "getAliasFromSourceFile(jadx.core.dex.nodes.ClassNode)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/deobf/Deobfuscator.java", "pkg": "jadx.core.deobf", "jump": -5, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field condition (line 15) is initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.dex.visitors.SimplifyVisitor", "method": "convertFieldArith(jadx.core.dex.nodes.MethodNode,jadx.core.dex.nodes.InsnNode)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/visitors/SimplifyVisitor.java", "pkg": "jadx.core.dex.visitors", "jump": -5, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field condition (line 15) is initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.dex.visitors.ReSugarCode", "method": "checkEnumMapAccess(jadx.core.dex.nodes.RootNode,jadx.core.dex.nodes.InsnNode)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/visitors/ReSugarCode.java", "pkg": "jadx.core.dex.visitors", "jump": -6, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields nsMapGenerated (line 46), strings (line 50), valuesParser (line 53), appPackageName (line 60) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field condition (line 15) is initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field region (line 32) is initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.dex.visitors.regions.LoopRegionVisitor", "method": "checkArrayForEach(jadx.core.dex.nodes.MethodNode,jadx.core.dex.regions.loops.LoopRegion,jadx.core.dex.nodes.InsnNode,jadx.core.dex.nodes.InsnNode,jadx.core.dex.regions.conditions.IfCondition)", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/visitors/regions/LoopRegionVisitor.java", "pkg": "jadx.core.dex.visitors.regions", "jump": -14, "inject": "true", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) passing @Nullable parameter 'argType.getArrayElement()' where @NonNull is required", "(Covered) passing @Nullable parameter 'boundType.getArrayElement()' where @NonNull is required", "(Covered) passing @Nullable parameter 'replaceType.getArrayElement()' where @NonNull is required", "(Covered) passing @Nullable parameter 'first.getArrayElement()' where @NonNull is required", "(Covered) passing @Nullable parameter 'type.getArrayElement()' where @NonNull is required", "(Covered) passing @Nullable parameter 'elemType' where @NonNull is required", "(Covered) passing @Nullable parameter 'elType' where @NonNull is required", "(Covered) passing @Nullable parameter 'type.getArrayElement()' where @NonNull is required", "(Covered) passing @Nullable parameter 'type.getArrayElement()' where @NonNull is required", "dereferenced expression insnElementType is @Nullable", "(Covered) passing @Nullable parameter 'insnElementType' where @NonNull is required", "dereferenced expression insnElementType is @Nullable", "(Covered) passing @Nullable parameter 'arrType.getArrayElement()' where @NonNull is required", "dereferenced expression elType is @Nullable"], "param": "", "class": "jadx.core.dex.instructions.args.ArgType", "method": "getArrayElement()", "pkg": "jadx.core.dex.instructions.args", "jump": 13, "inject": "true", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/instructions/args/ArgType.java"}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) passing @Nullable parameter 'mth.getRegion()' where @NonNull is required", "(Covered) passing @Nullable parameter 'ctor.getRegion()' where @NonNull is required", "(Covered) passing @Nullable parameter 'mth.getRegion()' where @NonNull is required", "(Covered) passing @Nullable parameter 'mth.getRegion()' where @NonNull is required", "(Covered) passing @Nullable parameter 'mth.getRegion()' where @NonNull is required", "(Covered) passing @Nullable parameter 'mth.getRegion()' where @NonNull is required", "(Covered) passing @Nullable parameter 'this.mth.getRegion()' where @NonNull is required", "(Covered) passing @Nullable parameter 'mth.getRegion()' where @NonNull is required", "(Covered) passing @Nullable parameter 'mth.getRegion()' where @NonNull is required", "(Covered) passing @Nullable parameter 'mth.getRegion()' where @NonNull is required", "(Covered) passing @Nullable parameter 'mth.getRegion()' where @NonNull is required", "dereferenced expression mth.getRegion() is @Nullable", "dereferenced expression startRegion is @Nullable", "dereferenced expression oldRootRegion is @Nullable"], "param": "", "class": "jadx.core.dex.nodes.MethodNode", "method": "getRegion()", "pkg": "jadx.core.dex.nodes", "jump": 13, "inject": "true", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/nodes/MethodNode.java"}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) passing @Nullable parameter 'gType' where @NonNull is required", "(Covered) passing @Nullable parameter 'sp.consumeType()' where @NonNull is required", "(Covered) passing @Nullable parameter 'parsedRetType' where @NonNull is required", "(Covered) passing @Nullable parameter 'parsedRetType' where @NonNull is required", "(Covered) passing @Nullable parameter 'consumeType()' where @NonNull is required", "(Covered) passing @Nullable parameter 'consumeType()' where @NonNull is required", "(Covered) passing @Nullable parameter 'consumeType()' where @NonNull is required"], "param": "", "class": "jadx.core.dex.nodes.parser.SignatureParser", "method": "consumeType()", "pkg": "jadx.core.dex.nodes.parser", "jump": 6, "inject": "true", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/nodes/parser/SignatureParser.java"}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) passing @Nullable parameter 'entryBlock' where @NonNull is required", "(Covered) passing @Nullable parameter 'entryBlock' where @NonNull is required", "(Covered) passing @Nullable parameter 'mth.getEnterBlock()' where @NonNull is required", "(Covered) passing @Nullable parameter 'mth.getEnterBlock()' where @NonNull is required", "(Covered) passing @Nullable parameter 'mth.getEnterBlock()' where @NonNull is required", "(Covered) passing @Nullable parameter 'mth.getEnterBlock()' where @NonNull is required", "(Covered) passing @Nullable parameter 'mth.getEnterBlock()' where @NonNull is required"], "param": "", "class": "jadx.core.dex.nodes.MethodNode", "method": "getEnterBlock()", "pkg": "jadx.core.dex.nodes", "jump": 6, "inject": "true", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/nodes/MethodNode.java"}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) passing @Nullable parameter 'mth.getInstructions()' where @NonNull is required", "enhanced-for expression mth.getInstructions() is @Nullable", "(Covered) passing @Nullable parameter 'insnArr' where @NonNull is required", "(Covered) passing @Nullable parameter 'insnArr' where @NonNull is required", "(Covered) passing @Nullable parameter 'insnArr' where @NonNull is required", "(Covered) passing @Nullable parameter 'mth.getInstructions()' where @NonNull is required", "enhanced-for expression mth.getInstructions() is @Nullable"], "param": "", "class": "jadx.core.dex.nodes.MethodNode", "method": "getInstructions()", "pkg": "jadx.core.dex.nodes", "jump": 6, "inject": "true", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/nodes/MethodNode.java"}, {"location": "CLASS_FIELD", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) passing @Nullable parameter 'condition' where @NonNull is required", "(Covered) passing @Nullable parameter 'condition' where @NonNull is required", "dereferenced expression condition is @Nullable", "(Covered) passing @Nullable parameter 'that.condition' where @NonNull is required", "dereferenced expression condition is @Nullable", "dereferenced expression condition is @Nullable"], "param": "condition", "class": "jadx.core.dex.instructions.mods.TernaryInsn", "method": "", "pkg": "jadx.core.dex.instructions.mods", "jump": 6, "inject": "true", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/instructions/mods/TernaryInsn.java"}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["dereferenced expression pkg is @Nullable", "(Covered) passing @Nullable parameter 'pkg' where @NonNull is required", "(Covered) passing @Nullable parameter 'pkg' where @NonNull is required", "(Covered) passing @Nullable parameter 'pkg' where @NonNull is required", "dereferenced expression pkg is @Nullable", "(Covered) passing @Nullable parameter 'pkg' where @NonNull is required"], "param": "", "class": "jadx.core.deobf.Deobfuscator", "method": "getPackageNode(java.lang.String,boolean)", "pkg": "jadx.core.deobf", "jump": 5, "inject": "true", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/deobf/Deobfuscator.java"}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) passing @Nullable parameter 'assignInsn' where @NonNull is required", "(Covered) passing @Nullable parameter '((RegisterArg) arg).getAssignInsn()' where @NonNull is required", "(Covered) passing @Nullable parameter 'instArgAssignInsn' where @NonNull is required", "(Covered) passing @Nullable parameter 'arg.getAssignInsn()' where @NonNull is required", "(Covered) passing @Nullable parameter 'assignInsn' where @NonNull is required", "dereferenced expression assignInsn is @Nullable"], "param": "", "class": "jadx.core.dex.instructions.args.RegisterArg", "method": "getAssignInsn()", "pkg": "jadx.core.dex.instructions.args", "jump": 5, "inject": "true", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/instructions/args/RegisterArg.java"}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) passing @Nullable parameter 'classNode.getSuperClass()' where @NonNull is required", "(Covered) passing @Nullable parameter 'cls.getSuperClass()' where @NonNull is required", "(Covered) passing @Nullable parameter 'cls.getSuperClass()' where @NonNull is required", "(Covered) passing @Nullable parameter 'cls.getSuperClass()' where @NonNull is required"], "param": "", "class": "jadx.core.dex.nodes.ClassNode", "method": "getSuperClass()", "pkg": "jadx.core.dex.nodes", "jump": 4, "inject": "true", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/nodes/ClassNode.java"}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) passing @Nullable parameter 'str' where @NonNull is required", "(Covered) passing @Nullable parameter 'str' where @NonNull is required", "(Covered) passing @Nullable parameter 'str' where @NonNull is required"], "param": "", "class": "jadx.core.xmlgen.entry.ValuesParser", "method": "decodeValue(int,int)", "pkg": "jadx.core.xmlgen.entry", "jump": 4, "inject": "true", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/xmlgen/entry/ValuesParser.java"}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) method returns @Nullable, but superclass method jadx.core.dex.attributes.IAttributeNode.<T>get(jadx.core.dex.attributes.AType<T>) returns @NonNull", "(Covered) passing @Nullable parameter 'excHandlerAttr' where @NonNull is required", "dereferenced expression excHandlerAttr is @Nullable", "dereferenced expression otherExcHandlerAttr is @Nullable"], "param": "", "class": "jadx.core.dex.attributes.AttrNode", "method": "<T>get(jadx.core.dex.attributes.AType<T>)", "pkg": "jadx.core.dex.attributes", "jump": 3, "inject": "true", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/attributes/AttrNode.java"}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": [], "param": "", "class": "jadx.core.utils.BlockUtils", "method": "bitSetToOneBlock(jadx.core.dex.nodes.MethodNode,java.util.BitSet)", "pkg": "jadx.core.utils", "jump": 2, "inject": "true", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/utils/BlockUtils.java"}, {"location": "CLASS_FIELD", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["dereferenced expression androidResMap is @Nullable", "dereferenced expression androidResMap is @Nullable", "dereferenced expression androidResMap is @Nullable"], "param": "androidResMap", "class": "jadx.core.xmlgen.entry.ValuesParser", "method": "", "pkg": "jadx.core.xmlgen.entry", "jump": 2, "inject": "true", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/xmlgen/entry/ValuesParser.java"}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) passing @Nullable parameter 'getSingleArg(returnInsn)' where @NonNull is required", "(Covered) passing @Nullable parameter 'getSingleArg(returnInsn)' where @NonNull is required", "(Covered) passing @Nullable parameter 'getSingleArg(castInsn)' where @NonNull is required"], "param": "", "class": "jadx.core.utils.InsnUtils", "method": "getSingleArg(jadx.core.dex.nodes.InsnNode)", "pkg": "jadx.core.utils", "jump": 2, "inject": "true", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/utils/InsnUtils.java"}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) passing @Nullable parameter 'callMth' where @NonNull is required", "(Covered) passing @Nullable parameter 'callMth' where @NonNull is required", "(Covered) passing @Nullable parameter 'callMth' where @NonNull is required", "(Covered) passing @Nullable parameter 'callMth' where @NonNull is required"], "param": "", "class": "jadx.core.dex.nodes.RootNode", "method": "resolveMethod(@org.jetbrains.annotations.NotNull jadx.core.dex.info.MethodInfo)", "pkg": "jadx.core.dex.nodes", "jump": 2, "inject": "true", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/nodes/RootNode.java"}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull field condition (line 28) is initialized along all control-flow paths (remember to check for exceptions or early returns)."], "param": "", "class": "jadx.core.dex.regions.conditions.IfCondition", "method": "fromIfBlock(jadx.core.dex.nodes.BlockNode)", "pkg": "jadx.core.dex.regions.conditions", "jump": 1, "inject": "true", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/regions/conditions/IfCondition.java"}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) passing @Nullable parameter 'arrayElement.selectFirst()' where @NonNull is required", "(Covered) passing @Nullable parameter 'elemType' where @NonNull is required"], "param": "", "class": "jadx.core.dex.instructions.args.ArgType", "method": "selectFirst()", "pkg": "jadx.core.dex.instructions.args", "jump": 1, "inject": "true", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/instructions/args/ArgType.java"}, {"location": "CLASS_FIELD", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull fields strings (line 51), valuesParser (line 54), appPackageName (line 61) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "dereferenced expression nsMapGenerated is @Nullable"], "param": "nsMapGenerated", "class": "jadx.core.xmlgen.BinaryXMLParser", "method": "", "pkg": "jadx.core.xmlgen", "jump": 1, "inject": "true", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/xmlgen/BinaryXMLParser.java"}, {"location": "CLASS_FIELD", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["dereferenced expression parser.curVariable is @Nullable", "dereferenced expression parser.curVariable is @Nullable"], "param": "curVariable", "class": "jadx.core.export.TemplateFile.ParserState", "method": "", "pkg": "jadx.core.export", "jump": 1, "inject": "true", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/export/TemplateFile.java"}, {"location": "METHOD_PARAM", "annotation": "org.jetbrains.annotations.Nullable", "errors": [], "param": "mth", "class": "jadx.core.utils.InsnRemover", "method": "unbindInsn(jadx.core.dex.nodes.MethodNode,jadx.core.dex.nodes.InsnNode)", "pkg": "jadx.core.utils", "jump": 1, "inject": "true", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/utils/InsnRemover.java"}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) passing @Nullable parameter 'condInfo' where @NonNull is required", "(Covered) passing @Nullable parameter 'currentIf' where @NonNull is required"], "param": "", "class": "jadx.core.dex.visitors.regions.IfMakerHelper", "method": "makeIfInfo(jadx.core.dex.nodes.BlockNode)", "pkg": "jadx.core.dex.visitors.regions", "jump": 1, "inject": "true", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/visitors/regions/IfMakerHelper.java"}, {"location": "CLASS_FIELD", "annotation": "org.jetbrains.annotations.Nullable", "errors": [], "param": "elseRegion", "class": "jadx.core.dex.regions.conditions.IfRegion", "method": "", "pkg": "jadx.core.dex.regions.conditions", "jump": 1, "inject": "true", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/regions/conditions/IfRegion.java"}, {"location": "METHOD_PARAM", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) passing @Nullable parameter 'header' where @NonNull is required"], "param": "header", "class": "jadx.core.dex.regions.loops.LoopRegion", "method": "LoopRegion(jadx.core.dex.nodes.IRegion,jadx.core.dex.attributes.nodes.LoopInfo,jadx.core.dex.nodes.BlockNode,boolean)", "pkg": "jadx.core.dex.regions.loops", "jump": 1, "inject": "true", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/regions/loops/LoopRegion.java"}, {"location": "METHOD_PARAM", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) passing @Nullable parameter 'start' where @NonNull is required", "dereferenced expression start is @Nullable"], "param": "start", "class": "jadx.core.dex.attributes.nodes.EdgeInsnAttr", "method": "addEdgeInsn(jadx.core.dex.nodes.BlockNode,jadx.core.dex.nodes.BlockNode,jadx.core.dex.nodes.InsnNode)", "pkg": "jadx.core.dex.attributes.nodes", "jump": 1, "inject": "true", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/attributes/nodes/EdgeInsnAttr.java"}, {"location": "METHOD_PARAM", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["dereferenced expression tb is @Nullable"], "param": "tb", "class": "jadx.core.dex.visitors.regions.ProcessTryCatchRegions", "method": "wrapBlocks(jadx.core.dex.nodes.IRegion,jadx.core.dex.trycatch.TryCatchBlock,jadx.core.dex.nodes.BlockNode)", "pkg": "jadx.core.dex.visitors.regions", "jump": 1, "inject": "true", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/visitors/regions/ProcessTryCatchRegions.java"}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) passing @Nullable parameter 'invokeNode.getInstanceArg()' where @NonNull is required", "dereferenced expression invokeNode.getInstanceArg() is @Nullable"], "param": "", "class": "jadx.core.dex.instructions.BaseInvokeNode", "method": "getInstanceArg()", "pkg": "jadx.core.dex.instructions", "jump": 1, "inject": "true", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/instructions/BaseInvokeNode.java"}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) passing @Nullable parameter 'invokeNode.getInstanceArg()' where @NonNull is required"], "param": "", "class": "jadx.core.dex.instructions.InvokeNode", "method": "getInstanceArg()", "pkg": "jadx.core.dex.instructions", "jump": 1, "inject": "true", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/instructions/InvokeNode.java"}, {"location": "CLASS_FIELD", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) passing @Nullable parameter 'root' where @NonNull is required"], "param": "root", "class": "jadx.api.JadxDecompiler", "method": "", "pkg": "jadx.api", "jump": 1, "inject": "true", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/api/JadxDecompiler.java"}, {"location": "METHOD_PARAM", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull field parent (line 14) is initialized along all control-flow paths (remember to check for exceptions or early returns)."], "param": "parent", "class": "jadx.core.dex.regions.AbstractRegion", "method": "AbstractRegion(jadx.core.dex.nodes.IRegion)", "pkg": "jadx.core.dex.regions", "jump": 1, "inject": "true", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/regions/AbstractRegion.java"}, {"location": "METHOD_PARAM", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull field idom (line 38) is initialized along all control-flow paths (remember to check for exceptions or early returns)."], "param": "idom", "class": "jadx.core.dex.nodes.BlockNode", "method": "setIDom(jadx.core.dex.nodes.BlockNode)", "pkg": "jadx.core.dex.nodes", "jump": 1, "inject": "true", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/nodes/BlockNode.java"}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["dereferenced expression ManifestAttributes.getInstance() is @Nullable", "dereferenced expression ManifestAttributes.getInstance() is @Nullable"], "param": "", "class": "jadx.core.xmlgen.ManifestAttributes", "method": "getInstance()", "pkg": "jadx.core.xmlgen", "jump": 1, "inject": "true", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/xmlgen/ManifestAttributes.java"}, {"location": "CLASS_FIELD", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["dereferenced expression doms is @Nullable"], "param": "doms", "class": "jadx.core.dex.nodes.BlockNode", "method": "", "pkg": "jadx.core.dex.nodes", "jump": 1, "inject": "true", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/nodes/BlockNode.java"}, {"location": "METHOD_PARAM", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) passing @Nullable parameter 'keyStrings' where @NonNull is required"], "param": "typeStrings", "class": "jadx.core.xmlgen.ResTableParser.PackageChunk", "method": "PackageChunk(int,java.lang.String,java.lang.String[],java.lang.String[])", "pkg": "jadx.core.xmlgen", "jump": 1, "inject": "true", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/xmlgen/ResTableParser.java"}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) method returns @Nullable, but superclass method jadx.core.dex.attributes.IAttributeNode.getAnnotation(java.lang.String) returns @NonNull", "(Covered) passing @Nullable parameter 'metadataAnnotation' where @NonNull is required"], "param": "", "class": "jadx.core.dex.attributes.AttrNode", "method": "getAnnotation(java.lang.String)", "pkg": "jadx.core.dex.attributes", "jump": 1, "inject": "true", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/attributes/AttrNode.java"}, {"location": "METHOD_PARAM", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["dereferenced expression first is @Nullable", "(Covered) passing @Nullable parameter 'second.getWildcardType()' where @NonNull is required"], "param": "first", "class": "jadx.core.dex.visitors.typeinference.TypeCompare", "method": "compareTypes(jadx.core.dex.instructions.args.ArgType,jadx.core.dex.instructions.args.ArgType)", "pkg": "jadx.core.dex.visitors.typeinference", "jump": 1, "inject": "true", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/visitors/typeinference/TypeCompare.java"}, {"location": "METHOD_PARAM", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) @NonNull field sourceLine not initialized"], "param": "sourceLine", "class": "jadx.core.codegen.json.cls.JsonCodeLine", "method": "setSourceLine(java.lang.Integer)", "pkg": "jadx.core.codegen.json.cls", "jump": 1, "inject": "true", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/codegen/json/cls/JsonCodeLine.java"}, {"location": "METHOD_PARAM", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull field parents (line 21) is initialized along all control-flow paths (remember to check for exceptions or early returns)."], "param": "parents", "class": "jadx.core.clsp.ClspClass", "method": "setParents(jadx.core.dex.instructions.args.ArgType[])", "pkg": "jadx.core.clsp", "jump": 1, "inject": "true", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/clsp/ClspClass.java"}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) passing @Nullable parameter 'wrappedInsn' where @NonNull is required", "(Covered) passing @Nullable parameter 'getWrappedInsn(getSingleArg(castInsn))' where @NonNull is required"], "param": "", "class": "jadx.core.utils.InsnUtils", "method": "getWrappedInsn(jadx.core.dex.instructions.args.InsnArg)", "pkg": "jadx.core.utils", "jump": 1, "inject": "true", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/utils/InsnUtils.java"}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["dereferenced expression ifInsn is @Nullable"], "param": "", "class": "jadx.core.dex.regions.loops.LoopRegion", "method": "getIfInsn()", "pkg": "jadx.core.dex.regions.loops", "jump": 0, "inject": "true", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/regions/loops/LoopRegion.java"}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": [], "param": "", "class": "jadx.core.dex.nodes.RootNode", "method": "resolveClass(jadx.core.dex.info.ClassInfo)", "pkg": "jadx.core.dex.nodes", "jump": 0, "inject": "true", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/nodes/RootNode.java"}, {"location": "METHOD_PARAM", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["dereferenced expression field is @Nullable"], "param": "field", "class": "jadx.core.dex.visitors.ExtractFieldInit", "method": "addFieldInitAttr(jadx.core.dex.nodes.MethodNode,jadx.core.dex.nodes.FieldNode,jadx.core.dex.nodes.InsnNode)", "pkg": "jadx.core.dex.visitors", "jump": 0, "inject": "true", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/visitors/ExtractFieldInit.java"}, {"location": "METHOD_PARAM", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["dereferenced expression str is @Nullable"], "param": "str", "class": "jadx.core.codegen.CodeWriter", "method": "add(java.lang.String)", "pkg": "jadx.core.codegen", "jump": 0, "inject": "true", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/codegen/CodeWriter.java"}, {"location": "METHOD_PARAM", "annotation": "org.jetbrains.annotations.Nullable", "errors": [], "param": "type", "class": "jadx.core.dex.trycatch.ExceptionHandler", "method": "ExceptionHandler(int,jadx.core.dex.info.ClassInfo)", "pkg": "jadx.core.dex.trycatch", "jump": 0, "inject": "true", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/trycatch/ExceptionHandler.java"}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": [], "param": "", "class": "jadx.api.ResourcesLoader", "method": "loadContent(jadx.api.JadxDecompiler,jadx.api.ResourceFile)", "pkg": "jadx.api", "jump": 0, "inject": "true", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/api/ResourcesLoader.java"}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) passing @Nullable parameter 'mth.getThisArg()' where @NonNull is required"], "param": "", "class": "jadx.core.dex.nodes.MethodNode", "method": "getThisArg()", "pkg": "jadx.core.dex.nodes", "jump": 0, "inject": "true", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/nodes/MethodNode.java"}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": [], "param": "", "class": "jadx.core.dex.nodes.utils.MethodUtils", "method": "getMethodDetails(jadx.core.dex.info.MethodInfo)", "pkg": "jadx.core.dex.nodes.utils", "jump": 0, "inject": "true", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/nodes/utils/MethodUtils.java"}, {"location": "CLASS_FIELD", "annotation": "org.jetbrains.annotations.Nullable", "errors": [], "param": "accessFlags", "class": "jadx.core.dex.nodes.ClassNode", "method": "", "pkg": "jadx.core.dex.nodes", "jump": 0, "inject": "true", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/nodes/ClassNode.java"}, {"location": "METHOD_PARAM", "annotation": "org.jetbrains.annotations.Nullable", "errors": [], "param": "elseBlock", "class": "jadx.core.dex.regions.conditions.IfInfo", "method": "IfInfo(jadx.core.dex.regions.conditions.IfCondition,jadx.core.dex.nodes.BlockNode,jadx.core.dex.nodes.BlockNode,java.util.Set<jadx.core.dex.nodes.BlockNode>,java.util.Set<jadx.core.dex.nodes.BlockNode>,java.util.List<jadx.core.dex.nodes.InsnNode>)", "pkg": "jadx.core.dex.regions.conditions", "jump": 0, "inject": "true", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/regions/conditions/IfInfo.java"}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": [], "param": "", "class": "jadx.api.JavaNode", "method": "getDeclaringClass()", "pkg": "jadx.api", "jump": 0, "inject": "true", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/api/JavaNode.java"}, {"location": "METHOD_PARAM", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) passing @Nullable parameter 'mthNode' where @NonNull is required"], "param": "mthNode", "class": "jadx.core.codegen.InsnGen", "method": "generateMethodArguments(jadx.core.codegen.CodeWriter,jadx.core.dex.instructions.BaseInvokeNode,int,jadx.core.dex.nodes.MethodNode)", "pkg": "jadx.core.codegen", "jump": 0, "inject": "true", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java"}, {"location": "CLASS_FIELD", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["dereferenced expression parentClass is @Nullable"], "param": "parentClass", "class": "jadx.core.dex.info.ClassInfo", "method": "", "pkg": "jadx.core.dex.info", "jump": 0, "inject": "true", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/info/ClassInfo.java"}, {"location": "CLASS_FIELD", "annotation": "org.jetbrains.annotations.Nullable", "errors": [], "param": "domFrontier", "class": "jadx.core.dex.nodes.BlockNode", "method": "", "pkg": "jadx.core.dex.nodes", "jump": 0, "inject": "true", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/nodes/BlockNode.java"}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["dereferenced expression jCls is @Nullable"], "param": "", "class": "jadx.api.JavaNode", "method": "getTopParentClass()", "pkg": "jadx.api", "jump": 0, "inject": "true", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/api/JavaNode.java"}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": [], "param": "", "class": "jadx.core.dex.visitors.MarkMethodsForInline", "method": "addInlineAttr(jadx.core.dex.nodes.MethodNode,jadx.core.dex.nodes.InsnNode)", "pkg": "jadx.core.dex.visitors", "jump": -1, "inject": "true", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/visitors/MarkMethodsForInline.java"}, {"location": "METHOD_PARAM", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) passing @Nullable parameter 'thenBlock' where @NonNull is required"], "param": "thenBlock", "class": "jadx.core.dex.regions.conditions.IfInfo", "method": "IfInfo(jadx.core.dex.regions.conditions.IfInfo,jadx.core.dex.nodes.BlockNode,@org.jetbrains.annotations.Nullable jadx.core.dex.nodes.BlockNode)", "pkg": "jadx.core.dex.regions.conditions", "jump": -1, "inject": "true", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/regions/conditions/IfInfo.java"}, {"location": "CLASS_FIELD", "annotation": "org.jetbrains.annotations.Nullable", "errors": [], "param": "result", "class": "jadx.core.dex.nodes.InsnNode", "method": "", "pkg": "jadx.core.dex.nodes", "jump": -1, "inject": "true", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/nodes/InsnNode.java"}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": [], "param": "", "class": "jadx.api.ResourcesLoader.ResourceDecoder", "method": "decode(long,java.io.InputStream)", "pkg": "jadx.api", "jump": -1, "inject": "true", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/api/ResourcesLoader.java"}, {"location": "METHOD_PARAM", "annotation": "org.jetbrains.annotations.Nullable", "errors": [], "param": "message", "class": "jadx.core.utils.exceptions.JadxRuntimeException", "method": "JadxRuntimeException(java.lang.String)", "pkg": "jadx.core.utils.exceptions", "jump": -1, "inject": "true", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/utils/exceptions/JadxRuntimeException.java"}, {"location": "METHOD_PARAM", "annotation": "org.jetbrains.annotations.Nullable", "errors": [], "param": "localeVariant", "class": "jadx.core.xmlgen.entry.EntryConfig", "method": "EntryConfig(short,short,char[],char[],byte,byte,int,byte,byte,byte,short,short,short,byte,byte,short,short,short,@org.jetbrains.annotations.Nullable char[],char[],byte,byte,boolean,int)", "pkg": "jadx.core.xmlgen.entry", "jump": -1, "inject": "true", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/xmlgen/entry/EntryConfig.java"}, {"location": "METHOD_PARAM", "annotation": "org.jetbrains.annotations.Nullable", "errors": [], "param": "block", "class": "jadx.core.utils.RegionUtils", "method": "isRegionContainsBlock(jadx.core.dex.nodes.IContainer,jadx.core.dex.nodes.BlockNode)", "pkg": "jadx.core.utils", "jump": -1, "inject": "true", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/utils/RegionUtils.java"}, {"location": "METHOD_PARAM", "annotation": "org.jetbrains.annotations.Nullable", "errors": [], "param": "argType", "class": "jadx.core.clsp.ClsSet", "method": "writeArgType(java.io.DataOutputStream,jadx.core.dex.instructions.args.ArgType,java.util.Map<java.lang.String,jadx.core.clsp.ClspClass>)", "pkg": "jadx.core.clsp", "jump": -1, "inject": "true", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/clsp/ClsSet.java"}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": [], "param": "", "class": "jadx.core.dex.visitors.regions.RegionStack", "method": "peekRegion()", "pkg": "jadx.core.dex.visitors.regions", "jump": -1, "inject": "true", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/visitors/regions/RegionStack.java"}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": [], "param": "", "class": "jadx.core.dex.nodes.ClassNode", "method": "getClassInitMth()", "pkg": "jadx.core.dex.nodes", "jump": -1, "inject": "true", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/nodes/ClassNode.java"}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": [], "param": "", "class": "jadx.core.xmlgen.XmlDeobf", "method": "deobfClassName(jadx.core.dex.nodes.RootNode,java.lang.String,java.lang.String)", "pkg": "jadx.core.xmlgen", "jump": -1, "inject": "true", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/xmlgen/XmlDeobf.java"}, {"location": "CLASS_FIELD", "annotation": "org.jetbrains.annotations.Nullable", "errors": [], "param": "outBlock", "class": "jadx.core.dex.regions.conditions.IfInfo", "method": "", "pkg": "jadx.core.dex.regions.conditions", "jump": -1, "inject": "true", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/regions/conditions/IfInfo.java"}, {"location": "METHOD_PARAM", "annotation": "org.jetbrains.annotations.Nullable", "errors": [], "param": "insn", "class": "jadx.core.utils.InsnList", "method": "getIndex(java.util.List<jadx.core.dex.nodes.InsnNode>,jadx.core.dex.nodes.InsnNode)", "pkg": "jadx.core.utils", "jump": -1, "inject": "true", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/utils/InsnList.java"}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": [], "param": "", "class": "jadx.core.dex.visitors.EnumVisitor", "method": "castConstructorInsn(jadx.core.dex.nodes.InsnNode)", "pkg": "jadx.core.dex.visitors", "jump": -1, "inject": "true", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/visitors/EnumVisitor.java"}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": [], "param": "", "class": "jadx.core.dex.nodes.ClassNode", "method": "getConstFieldByLiteralArg(jadx.core.dex.instructions.args.LiteralArg)", "pkg": "jadx.core.dex.nodes", "jump": -1, "inject": "true", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/nodes/ClassNode.java"}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": [], "param": "", "class": "jadx.core.dex.instructions.args.InsnArg", "method": "wrapInstruction(jadx.core.dex.nodes.MethodNode,jadx.core.dex.nodes.InsnNode)", "pkg": "jadx.core.dex.instructions.args", "jump": -1, "inject": "true", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/instructions/args/InsnArg.java"}, {"location": "METHOD_PARAM", "annotation": "org.jetbrains.annotations.Nullable", "errors": [], "param": "from", "class": "jadx.core.dex.instructions.PhiInsn", "method": "replaceArg(jadx.core.dex.instructions.args.InsnArg,jadx.core.dex.instructions.args.InsnArg)", "pkg": "jadx.core.dex.instructions", "jump": -1, "inject": "true", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/instructions/PhiInsn.java"}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": [], "param": "", "class": "jadx.api.JadxArgs", "method": "getClassFilter()", "pkg": "jadx.api", "jump": -1, "inject": "true", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/api/JadxArgs.java"}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": [], "param": "", "class": "jadx.api.JavaClass", "method": "getJavaNodeAtPosition(int,int)", "pkg": "jadx.api", "jump": -1, "inject": "true", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/api/JavaClass.java"}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": [], "param": "", "class": "jadx.api.JavaClass", "method": "getDefinitionPosition()", "pkg": "jadx.api", "jump": -1, "inject": "true", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/api/JavaClass.java"}, {"location": "METHOD_PARAM", "annotation": "org.jetbrains.annotations.Nullable", "errors": [], "param": "block", "class": "jadx.core.utils.BlockUtils", "method": "getLastInsn(jadx.core.dex.nodes.IBlock)", "pkg": "jadx.core.utils", "jump": -1, "inject": "true", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/utils/BlockUtils.java"}, {"location": "METHOD_PARAM", "annotation": "org.jetbrains.annotations.Nullable", "errors": [], "param": "newKey", "class": "jadx.core.dex.instructions.SwitchInsn", "method": "modifyKey(int,java.lang.Object)", "pkg": "jadx.core.dex.instructions", "jump": -1, "inject": "true", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/instructions/SwitchInsn.java"}, {"location": "METHOD_PARAM", "annotation": "org.jetbrains.annotations.Nullable", "errors": [], "param": "insn", "class": "jadx.core.utils.InsnUtils", "method": "getSingleArg(jadx.core.dex.nodes.InsnNode)", "pkg": "jadx.core.utils", "jump": -1, "inject": "true", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/utils/InsnUtils.java"}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": [], "param": "", "class": "jadx.core.dex.visitors.regions.RegionMaker", "method": "processTryCatchBlocks(jadx.core.dex.nodes.MethodNode)", "pkg": "jadx.core.dex.visitors.regions", "jump": -1, "inject": "true", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/visitors/regions/RegionMaker.java"}, {"location": "METHOD_PARAM", "annotation": "org.jetbrains.annotations.Nullable", "errors": [], "param": "bound", "class": "jadx.core.dex.visitors.typeinference.TypeInferenceVisitor", "method": "addBound(jadx.core.dex.visitors.typeinference.TypeInfo,jadx.core.dex.visitors.typeinference.ITypeBound)", "pkg": "jadx.core.dex.visitors.typeinference", "jump": -1, "inject": "true", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/visitors/typeinference/TypeInferenceVisitor.java"}, {"location": "METHOD_PARAM", "annotation": "org.jetbrains.annotations.Nullable", "errors": [], "param": "constraint", "class": "jadx.core.dex.visitors.typeinference.TypeSearch", "method": "addConstraint(jadx.core.dex.visitors.typeinference.TypeSearchVarInfo,jadx.core.dex.visitors.typeinference.ITypeConstraint)", "pkg": "jadx.core.dex.visitors.typeinference", "jump": -2, "inject": "true", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/visitors/typeinference/TypeSearch.java"}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": [], "param": "", "class": "jadx.api.ICodeCache", "method": "get(java.lang.String)", "pkg": "jadx.api", "jump": -2, "inject": "true", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/api/ICodeCache.java"}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": [], "param": "", "class": "jadx.core.dex.info.ConstStorage", "method": "getConstField(jadx.core.dex.nodes.ClassNode,java.lang.Object,boolean)", "pkg": "jadx.core.dex.info", "jump": -4, "inject": "true", "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/info/ConstStorage.java"}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["dereferenced expression phiInsn.getResult() is @Nullable", "dereferenced expression phiInsn.getResult() is @Nullable", "dereferenced expression getResult() is @Nullable", "(Covered) passing @Nullable parameter 'changeArg' where @NonNull is required", "dereferenced expression changeArg is @Nullable", "(Covered) passing @Nullable parameter 'insn.getResult()' where @NonNull is required", "(Covered) passing @Nullable parameter 'checkCast.getResult()' where @NonNull is required", "(Covered) passing @Nullable parameter 'insn.getResult()' where @NonNull is required", "(Covered) passing @Nullable parameter 'invokeInsn.getResult()' where @NonNull is required", "(Covered) passing @Nullable parameter 'arg' where @NonNull is required", "(Covered) passing @Nullable parameter 'arg' where @NonNull is required", "dereferenced expression insn.getResult() is @Nullable", "dereferenced expression moveRes is @Nullable", "dereferenced expression me.getResult() is @Nullable", "(Covered) passing @Nullable parameter 'insn.getResult()' where @NonNull is required", "dereferenced expression constArg is @Nullable", "dereferenced expression insn.getResult() is @Nullable", "dereferenced expression usedInPhi.getResult() is @Nullable", "dereferenced expression copyInsn.getResult() is @Nullable", "(Covered) passing @Nullable parameter 'insn.getResult()' where @NonNull is required", "dereferenced expression convertInsn.getResult() is @Nullable", "(Covered) passing @Nullable parameter 'insn.getResult()' where @NonNull is required", "(Covered) passing @Nullable parameter 'insn.getResult()' where @NonNull is required", "(Covered) passing @Nullable parameter 'insn.getResult()' where @NonNull is required", "(Covered) passing @Nullable parameter 'phiInsn.getResult()' where @NonNull is required", "dereferenced expression phiInsn.getResult() is @Nullable", "(Covered) passing @Nullable parameter 'insn.getResult()' where @NonNull is required", "dereferenced expression phiInsn.getResult() is @Nullable", "(Covered) passing @Nullable parameter 'instArg' where @NonNull is required", "dereferenced expression resultArg is @Nullable", "dereferenced expression instArg is @Nullable", "dereferenced expression co.getResult() is @Nullable", "dereferenced expression resultArg is @Nullable", "(Covered) passing @Nullable parameter 'fromInsn.getResult()' where @NonNull is required", "(Covered) passing @Nullable parameter 'insn.getResult()' where @NonNull is required", "dereferenced expression insn.getResult() is @Nullable", "dereferenced expression result is @Nullable", "(Covered) passing @Nullable parameter 'parentInsn.getResult()' where @NonNull is required", "(Covered) passing @Nullable parameter 'parentInsn.getResult()' where @NonNull is required", "dereferenced expression resArg is @Nullable", "dereferenced expression insn.getResult() is @Nullable", "dereferenced expression phiInsn.getResult() is @Nullable", "dereferenced expression phi.getResult() is @Nullable", "dereferenced expression phi.getResult() is @Nullable", "dereferenced expression phi.getResult() is @Nullable", "dereferenced expression resArg is @Nullable", "dereferenced expression arrArg is @Nullable", "dereferenced expression resArg is @Nullable", "(Covered) passing @Nullable parameter 'parentInsn.getResult()' where @NonNull is required", "dereferenced expression arg is @Nullable", "dereferenced expression incrInsn.getResult() is @Nullable", "dereferenced expression assignInsn.getResult() is @Nullable", "(Covered) passing @Nullable parameter 'assignInsn.getResult()' where @NonNull is required", "dereferenced expression constInsn.getResult() is @Nullable", "dereferenced expression result is @Nullable", "dereferenced expression res is @Nullable"], "class": "jadx.core.dex.nodes.InsnNode", "method": "getResult()", "inject": "true", "pkg": "jadx.core.dex.nodes", "jump": 58, "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/nodes/InsnNode.java", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["dereferenced expression getAccessFlags() is @Nullable", "(Covered) method returns @Nullable, but superclass method jadx.core.dex.nodes.ICodeNode.getAccessFlags() returns @NonNull", "dereferenced expression parentClass.getAccessFlags() is @Nullable", "dereferenced expression af is @Nullable", "dereferenced expression cls.getAccessFlags() is @Nullable", "dereferenced expression clsAccFlags is @Nullable", "dereferenced expression mth.getParentClass().getAccessFlags() is @Nullable", "dereferenced expression cls.getAccessFlags() is @Nullable", "dereferenced expression cls.getAccessFlags() is @Nullable", "dereferenced expression cls.getAccessFlags() is @Nullable", "dereferenced expression accessFlags is @Nullable", "dereferenced expression constrCls.getAccessFlags() is @Nullable", "dereferenced expression accessFlags is @Nullable", "dereferenced expression cls.getAccessFlags() is @Nullable", "dereferenced expression cls.getAccessFlags() is @Nullable", "dereferenced expression mth.getParentClass().getAccessFlags() is @Nullable", "dereferenced expression cls.getAccessFlags() is @Nullable"], "class": "jadx.core.dex.nodes.ClassNode", "method": "getAccessFlags()", "inject": "true", "pkg": "jadx.core.dex.nodes", "jump": 17, "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/nodes/ClassNode.java", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) passing @Nullable parameter 'boundType.getArrayElement()' where @NonNull is required", "(Covered) passing @Nullable parameter 'replaceType.getArrayElement()' where @NonNull is required", "(Covered) passing @Nullable parameter 'first.getArrayElement()' where @NonNull is required", "(Covered) passing @Nullable parameter 'type.getArrayElement()' where @NonNull is required", "(Covered) passing @Nullable parameter 'elemType' where @NonNull is required", "(Covered) passing @Nullable parameter 'elType' where @NonNull is required", "(Covered) passing @Nullable parameter 'type.getArrayElement()' where @NonNull is required", "(Covered) passing @Nullable parameter 'type.getArrayElement()' where @NonNull is required", "dereferenced expression insnElementType is @Nullable", "(Covered) passing @Nullable parameter 'insnElementType' where @NonNull is required", "dereferenced expression insnElementType is @Nullable", "(Covered) passing @Nullable parameter 'arrType.getArrayElement()' where @NonNull is required", "dereferenced expression elType is @Nullable"], "class": "jadx.core.dex.instructions.args.ArgType", "method": "getArrayElement()", "inject": "true", "pkg": "jadx.core.dex.instructions.args", "jump": 12, "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/instructions/args/ArgType.java", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) passing @Nullable parameter 'block.getDomFrontier()' where @NonNull is required", "(Covered) passing @Nullable parameter 'block.getDomFrontier()' where @NonNull is required", "dereferenced expression domFrontier is @Nullable", "(Covered) passing @Nullable parameter 'exit.getDomFrontier()' where @NonNull is required", "dereferenced expression df is @Nullable", "dereferenced expression s.getDomFrontier() is @Nullable", "(Covered) passing @Nullable parameter 'domFrontier' where @NonNull is required", "dereferenced expression nextThen.getIfBlock().getDomFrontier() is @Nullable"], "class": "jadx.core.dex.nodes.BlockNode", "method": "getDomFrontier()", "inject": "true", "pkg": "jadx.core.dex.nodes", "jump": 7, "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/nodes/BlockNode.java", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) passing @Nullable parameter 'clsInfo.getParentClass()' where @NonNull is required", "(Covered) passing @Nullable parameter 'clsInfo.getParentClass()' where @NonNull is required", "(Covered) passing @Nullable parameter 'extClsInfo.getParentClass()' where @NonNull is required", "(Covered) passing @Nullable parameter 'p' where @NonNull is required", "(Covered) passing @Nullable parameter 'useCls.getParentClass()' where @NonNull is required", "dereferenced expression argClsInfo.getParentClass() is @Nullable"], "class": "jadx.core.dex.info.ClassInfo", "method": "getParentClass()", "inject": "true", "pkg": "jadx.core.dex.info", "jump": 6, "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/info/ClassInfo.java", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) passing @Nullable parameter 'str' where @NonNull is required", "(Covered) passing @Nullable parameter 'str' where @NonNull is required", "(Covered) passing @Nullable parameter 'str' where @NonNull is required"], "class": "jadx.core.xmlgen.entry.ValuesParser", "method": "decodeValue(int,int)", "inject": "true", "pkg": "jadx.core.xmlgen.entry", "jump": 3, "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/xmlgen/entry/ValuesParser.java", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) passing @Nullable parameter 'getSingleArg(returnInsn)' where @NonNull is required", "(Covered) passing @Nullable parameter 'getSingleArg(returnInsn)' where @NonNull is required", "(Covered) passing @Nullable parameter 'getSingleArg(castInsn)' where @NonNull is required"], "class": "jadx.core.utils.InsnUtils", "method": "getSingleArg(@org.jetbrains.annotations.Nullable jadx.core.dex.nodes.InsnNode)", "inject": "true", "pkg": "jadx.core.utils", "jump": 2, "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/utils/InsnUtils.java", "param": ""}, {"location": "METHOD_PARAM", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull field idom (line 39) is initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.dex.nodes.BlockNode", "method": "setIDom(jadx.core.dex.nodes.BlockNode)", "inject": "true", "pkg": "jadx.core.dex.nodes", "jump": 1, "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/nodes/BlockNode.java", "param": "idom"}, {"location": "METHOD_PARAM", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) initializer method does not guarantee @NonNull field parents (line 22) is initialized along all control-flow paths (remember to check for exceptions or early returns)."], "class": "jadx.core.clsp.ClspClass", "method": "setParents(jadx.core.dex.instructions.args.ArgType[])", "inject": "true", "pkg": "jadx.core.clsp", "jump": 1, "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/clsp/ClspClass.java", "param": "parents"}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) passing @Nullable parameter 'resourceFile.loadContent()' where @NonNull is required"], "class": "jadx.api.ResourceFile", "method": "loadContent()", "inject": "true", "pkg": "jadx.api", "jump": 0, "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/api/ResourceFile.java", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": [], "class": "jadx.core.dex.nodes.ClassNode", "method": "getConstField(java.lang.Object,boolean)", "inject": "true", "pkg": "jadx.core.dex.nodes", "jump": 0, "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/nodes/ClassNode.java", "param": ""}, {"location": "METHOD_PARAM", "annotation": "org.jetbrains.annotations.Nullable", "errors": [], "class": "jadx.core.dex.regions.conditions.IfInfo", "method": "IfInfo(jadx.core.dex.regions.conditions.IfCondition,jadx.core.dex.nodes.BlockNode,@org.jetbrains.annotations.Nullable jadx.core.dex.nodes.BlockNode,java.util.Set<jadx.core.dex.nodes.BlockNode>,java.util.Set<jadx.core.dex.nodes.BlockNode>,java.util.List<jadx.core.dex.nodes.InsnNode>)", "inject": "true", "pkg": "jadx.core.dex.regions.conditions", "jump": 0, "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/regions/conditions/IfInfo.java", "param": "thenBlock"}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) passing @Nullable parameter 'info.getOutBlock()' where @NonNull is required"], "class": "jadx.core.dex.regions.conditions.IfInfo", "method": "getOutBlock()", "inject": "true", "pkg": "jadx.core.dex.regions.conditions", "jump": 0, "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/regions/conditions/IfInfo.java", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) passing @Nullable parameter 'annCls' where @NonNull is required"], "class": "jadx.core.dex.nodes.RootNode", "method": "resolveClass(java.lang.String)", "inject": "true", "pkg": "jadx.core.dex.nodes", "jump": 0, "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/nodes/RootNode.java", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": [], "class": "jadx.core.dex.nodes.utils.MethodUtils", "method": "getMethodDetails(jadx.core.dex.instructions.BaseInvokeNode)", "inject": "true", "pkg": "jadx.core.dex.nodes.utils", "jump": -1, "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/nodes/utils/MethodUtils.java", "param": ""}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": [], "class": "jadx.api.CodePosition", "method": "getJavaClass()", "inject": "true", "pkg": "jadx.api", "jump": -1, "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/api/CodePosition.java", "param": ""}, {"location": "METHOD_PARAM", "annotation": "org.jetbrains.annotations.Nullable", "errors": [], "class": "jadx.core.dex.visitors.ssa.SSATransform", "method": "markThisArgs(jadx.core.dex.instructions.args.RegisterArg)", "inject": "true", "pkg": "jadx.core.dex.visitors.ssa", "jump": -1, "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/visitors/ssa/SSATransform.java", "param": "thisArg"}, {"location": "METHOD_PARAM", "annotation": "org.jetbrains.annotations.Nullable", "errors": [], "class": "jadx.core.dex.attributes.nodes.SkipMethodArgsAttr", "method": "isSkip(jadx.core.dex.nodes.MethodNode,int)", "inject": "true", "pkg": "jadx.core.dex.attributes.nodes", "jump": -1, "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/attributes/nodes/SkipMethodArgsAttr.java", "param": "mth"}, {"location": "METHOD_PARAM", "annotation": "org.jetbrains.annotations.Nullable", "errors": [], "class": "jadx.core.dex.trycatch.ExceptionHandler", "method": "addCatchType(jadx.core.dex.info.ClassInfo)", "inject": "true", "pkg": "jadx.core.dex.trycatch", "jump": -1, "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/trycatch/ExceptionHandler.java", "param": "type"}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": ["(Covered) passing @Nullable parameter 'callMth' where @NonNull is required"], "class": "jadx.core.dex.nodes.RootNode", "method": "resolveMethod(@org.jetbrains.annotations.NotNull jadx.core.dex.info.MethodInfo)", "inject": "true", "pkg": "jadx.core.dex.nodes", "jump": -1, "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/nodes/RootNode.java", "param": ""}, {"location": "METHOD_PARAM", "annotation": "org.jetbrains.annotations.Nullable", "errors": [], "param": "rc", "class": "jadx.core.xmlgen.ResourcesSaver", "method": "saveResources(jadx.core.xmlgen.ResContainer)", "pkg": "jadx.core.xmlgen", "jump": -1, "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/xmlgen/ResourcesSaver.java", "inject": "true"}, {"location": "METHOD_PARAM", "annotation": "org.jetbrains.annotations.Nullable", "errors": [], "param": "to", "class": "jadx.core.utils.BlockUtils", "method": "isBackEdge(jadx.core.dex.nodes.BlockNode,jadx.core.dex.nodes.BlockNode)", "pkg": "jadx.core.utils", "jump": -1, "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/utils/BlockUtils.java", "inject": "true"}, {"location": "METHOD_PARAM", "annotation": "org.jetbrains.annotations.Nullable", "errors": [], "param": "annCls", "class": "jadx.core.codegen.AnnotationGen", "method": "getParamName(jadx.core.dex.nodes.ClassNode,java.lang.String)", "pkg": "jadx.core.codegen", "jump": -1, "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/codegen/AnnotationGen.java", "inject": "true"}, {"location": "METHOD_PARAM", "annotation": "org.jetbrains.annotations.Nullable", "errors": [], "param": "callMth", "class": "jadx.core.codegen.ClassGen", "method": "getEnumCtrSkipArgsCount(jadx.core.dex.nodes.MethodNode)", "pkg": "jadx.core.codegen", "jump": -1, "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/codegen/ClassGen.java", "inject": "true"}, {"location": "METHOD_RETURN", "annotation": "org.jetbrains.annotations.Nullable", "errors": [], "param": "", "class": "jadx.core.dex.nodes.ClassNode", "method": "getConstField(java.lang.Object)", "pkg": "jadx.core.dex.nodes", "jump": -1, "uri": "//tmp/projects/jadx/jadx-core/src/main/java/jadx/core/dex/nodes/ClassNode.java", "inject": "true"}]}