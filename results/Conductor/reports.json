{"reports": [{"annotation": "javax.annotation.Nullable", "jump": 2, "location": "CLASS_FIELD", "uri": "//tmp/projects/conductor/core/src/main/java/com/netflix/conductor/core/events/queue/Message.java", "pkg": "com.netflix.conductor.core.events.queue", "class": "com.netflix.conductor.core.events.queue.Message", "inject": "true", "method": "", "errors": ["(Covered) initializer method does not guarantee @NonNull fields payload (line 20), receipt (line 23) are initialized along all control-flow paths (remember to check for exceptions or early returns)."], "param": "id"}, {"annotation": "javax.annotation.Nullable", "jump": 2, "location": "METHOD_PARAM", "uri": "//tmp/projects/conductor/core/src/main/java/com/netflix/conductor/service/ExecutionService.java", "pkg": "com.netflix.conductor.service", "class": "com.netflix.conductor.service.ExecutionService", "inject": "true", "method": "poll(java.lang.String,java.lang.String,java.lang.String,int,int)", "errors": ["(Covered) initializer method does not guarantee @NonNull fields payload (line 20), id (line 21), receipt (line 22) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) passing @Nullable parameter 'domain' where @NonNull is required", "(Covered) passing @Nullable parameter 'domain' where @NonNull is required", "(Covered) passing @Nullable parameter 'domain' where @NonNull is required", "(Covered) passing @Nullable parameter 'domain' where @NonNull is required"], "param": "domain"}, {"annotation": "javax.annotation.Nullable", "jump": 2, "location": "METHOD_PARAM", "uri": "//tmp/projects/conductor/core/src/main/java/com/netflix/conductor/core/execution/WorkflowExecutor.java", "pkg": "com.netflix.conductor.core.execution", "class": "com.netflix.conductor.core.execution.WorkflowExecutor", "inject": "true", "method": "startWorkflow(com.netflix.conductor.common.metadata.workflow.WorkflowDef,java.util.Map<java.lang.String,java.lang.Object>,java.lang.String,java.lang.String,java.lang.Integer,java.lang.String,java.lang.String,java.lang.String,java.util.Map<java.lang.String,java.lang.String>)", "errors": ["(Covered) passing @Nullable parameter 'externalInputPayloadStoragePath' where @NonNull is required", "(Covered) passing @Nullable parameter 'externalInputPayloadStoragePath' where @NonNull is required"], "param": "externalInputPayloadStoragePath"}, {"annotation": "javax.annotation.Nullable", "jump": 2, "location": "METHOD_PARAM", "uri": "//tmp/projects/conductor/core/src/main/java/com/netflix/conductor/core/execution/WorkflowExecutor.java", "pkg": "com.netflix.conductor.core.execution", "class": "com.netflix.conductor.core.execution.WorkflowExecutor", "inject": "true", "method": "executeSystemTask(com.netflix.conductor.core.execution.tasks.WorkflowSystemTask,java.lang.String,long)", "errors": ["dereferenced expression systemTask is @Nullable", "dereferenced expression systemTask is @Nullable", "dereferenced expression systemTask is @Nullable"], "param": "systemTask"}, {"annotation": "javax.annotation.Nullable", "jump": 1, "location": "METHOD_PARAM", "uri": "//tmp/projects/conductor/core/src/main/java/com/netflix/conductor/core/events/queue/Message.java", "pkg": "com.netflix.conductor.core.events.queue", "class": "com.netflix.conductor.core.events.queue.Message", "inject": "true", "method": "Message(java.lang.String,java.lang.String,java.lang.String)", "errors": ["(Covered) initializer method does not guarantee @NonNull fields payload (line 20), id (line 21), receipt (line 22) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field payload (line 20) is initialized along all control-flow paths (remember to check for exceptions or early returns)."], "param": "payload"}, {"annotation": "javax.annotation.Nullable", "jump": 1, "location": "METHOD_PARAM", "uri": "//tmp/projects/conductor/core/src/main/java/com/netflix/conductor/core/utils/ParametersUtils.java", "pkg": "com.netflix.conductor.core.utils", "class": "com.netflix.conductor.core.utils.ParametersUtils", "inject": "true", "method": "getTaskInputV2(java.util.Map<java.lang.String,java.lang.Object>,com.netflix.conductor.common.run.Workflow,java.lang.String,com.netflix.conductor.common.metadata.tasks.TaskDef)", "errors": ["(Covered) passing @Nullable parameter 'taskId' where @NonNull is required"], "param": "taskId"}, {"annotation": "javax.annotation.Nullable", "jump": 1, "location": "METHOD_PARAM", "uri": "//tmp/projects/conductor/core/src/main/java/com/netflix/conductor/core/utils/ParametersUtils.java", "pkg": "com.netflix.conductor.core.utils", "class": "com.netflix.conductor.core.utils.ParametersUtils", "inject": "true", "method": "replace(java.util.Map<java.lang.String,java.lang.Object>,com.jayway.jsonpath.DocumentContext,java.lang.String)", "errors": ["(Covered) passing @Nullable parameter 'taskId' where @NonNull is required", "(Covered) passing @Nullable parameter 'taskId' where @NonNull is required"], "param": "taskId"}, {"annotation": "javax.annotation.Nullable", "jump": 1, "location": "CLASS_FIELD", "uri": "//tmp/projects/conductor/core/src/main/java/com/netflix/conductor/metrics/WorkflowMonitor.java", "pkg": "com.netflix.conductor.metrics", "class": "com.netflix.conductor.metrics.WorkflowMonitor", "inject": "true", "method": "", "errors": ["(Covered) initializer method does not guarantee @NonNull fields payload (line 20), id (line 21), receipt (line 22) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field taskDefs (line 49) is initialized along all control-flow paths (remember to check for exceptions or early returns).", "dereferenced expression workflowDefs is @Nullable"], "param": "workflowDefs"}, {"annotation": "javax.annotation.Nullable", "jump": 1, "location": "METHOD_PARAM", "uri": "//tmp/projects/conductor/core/src/main/java/com/netflix/conductor/core/execution/WorkflowExecutor.java", "pkg": "com.netflix.conductor.core.execution", "class": "com.netflix.conductor.core.execution.WorkflowExecutor", "inject": "true", "method": "startWorkflow(java.lang.String,java.lang.Integer,java.util.Map<java.lang.String,java.lang.Object>,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.Map<java.lang.String,java.lang.String>)", "errors": ["(Covered) passing @Nullable parameter 'externalInputPayloadStoragePath' where @NonNull is required"], "param": "externalInputPayloadStoragePath"}, {"annotation": "javax.annotation.Nullable", "jump": 1, "location": "METHOD_PARAM", "uri": "//tmp/projects/conductor/core/src/main/java/com/netflix/conductor/core/execution/WorkflowExecutor.java", "pkg": "com.netflix.conductor.core.execution", "class": "com.netflix.conductor.core.execution.WorkflowExecutor", "inject": "true", "method": "startWorkflow(com.netflix.conductor.common.metadata.workflow.WorkflowDef,java.util.Map<java.lang.String,java.lang.Object>,java.lang.String,java.lang.String,java.lang.String,java.util.Map<java.lang.String,java.lang.String>)", "errors": ["(Covered) passing @Nullable parameter 'externalInputPayloadStoragePath' where @NonNull is required"], "param": "externalInputPayloadStoragePath"}, {"annotation": "javax.annotation.Nullable", "jump": 1, "location": "CLASS_FIELD", "uri": "//tmp/projects/conductor/core/src/main/java/com/netflix/conductor/metrics/WorkflowMonitor.java", "pkg": "com.netflix.conductor.metrics", "class": "com.netflix.conductor.metrics.WorkflowMonitor", "inject": "true", "method": "", "errors": ["(Covered) initializer method does not guarantee @NonNull fields payload (line 20), id (line 21), receipt (line 22) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field workflowDefs (line 51) is initialized along all control-flow paths (remember to check for exceptions or early returns).", "dereferenced expression taskDefs is @Nullable"], "param": "taskDefs"}, {"annotation": "javax.annotation.Nullable", "jump": 1, "location": "METHOD_PARAM", "uri": "//tmp/projects/conductor/core/src/main/java/com/netflix/conductor/core/execution/WorkflowExecutor.java", "pkg": "com.netflix.conductor.core.execution", "class": "com.netflix.conductor.core.execution.WorkflowExecutor", "inject": "true", "method": "terminateWorkflow(com.netflix.conductor.common.run.Workflow,java.lang.String,java.lang.String)", "errors": ["(Covered) passing @Nullable parameter 'reason' where @NonNull is required", "(Covered) passing @Nullable parameter 'failureWorkflow' where @NonNull is required"], "param": "reason"}, {"annotation": "javax.annotation.Nullable", "jump": 1, "location": "METHOD_PARAM", "uri": "//tmp/projects/conductor/core/src/main/java/com/netflix/conductor/core/execution/WorkflowExecutor.java", "pkg": "com.netflix.conductor.core.execution", "class": "com.netflix.conductor.core.execution.WorkflowExecutor", "inject": "true", "method": "startWorkflow(java.lang.String,java.lang.Integer,java.util.Map<java.lang.String,java.lang.Object>,java.lang.String,java.lang.String,java.lang.Integer,java.lang.String,java.lang.String,java.lang.String,java.util.Map<java.lang.String,java.lang.String>)", "errors": ["(Covered) passing @Nullable parameter 'parentWorkflowId' where @NonNull is required"], "param": "parentWorkflowId"}, {"annotation": "javax.annotation.Nullable", "jump": 1, "location": "METHOD_RETURN", "uri": "//tmp/projects/conductor/core/src/main/java/com/netflix/conductor/core/events/DefaultEventProcessor.java", "pkg": "com.netflix.conductor.core.events", "class": "com.netflix.conductor.core.events.DefaultEventProcessor", "inject": "true", "method": "getPayloadObject(java.lang.String)", "errors": ["(Covered) initializer method does not guarantee @NonNull fields payload (line 20), id (line 21), receipt (line 22) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) passing @Nullable parameter 'payloadObject' where @NonNull is required", "(Covered) passing @Nullable parameter 'getPayloadObject(msg.getPayload())' where @NonNull is required"], "param": ""}, {"annotation": "javax.annotation.Nullable", "jump": 1, "location": "METHOD_PARAM", "uri": "//tmp/projects/conductor/core/src/main/java/com/netflix/conductor/core/events/queue/Message.java", "pkg": "com.netflix.conductor.core.events.queue", "class": "com.netflix.conductor.core.events.queue.Message", "inject": "true", "method": "Message(java.lang.String,java.lang.String,java.lang.String)", "errors": ["(Covered) initializer method does not guarantee @NonNull fields payload (line 20), id (line 21), receipt (line 22) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull field receipt (line 22) is initialized along all control-flow paths (remember to check for exceptions or early returns)."], "param": "receipt"}, {"annotation": "javax.annotation.Nullable", "jump": 1, "location": "CLASS_FIELD", "uri": "//tmp/projects/conductor/core/src/main/java/com/netflix/conductor/core/events/queue/Message.java", "pkg": "com.netflix.conductor.core.events.queue", "class": "com.netflix.conductor.core.events.queue.Message", "inject": "true", "method": "", "errors": ["(Covered) initializer method does not guarantee @NonNull fields payload (line 20), id (line 21) are initialized along all control-flow paths (remember to check for exceptions or early returns)."], "param": "receipt"}, {"annotation": "javax.annotation.Nullable", "jump": 1, "location": "METHOD_PARAM", "uri": "//tmp/projects/conductor/core/src/main/java/com/netflix/conductor/core/utils/ParametersUtils.java", "pkg": "com.netflix.conductor.core.utils", "class": "com.netflix.conductor.core.utils.ParametersUtils", "inject": "true", "method": "getTaskInput(java.util.Map<java.lang.String,java.lang.Object>,com.netflix.conductor.common.run.Workflow,com.netflix.conductor.common.metadata.tasks.TaskDef,java.lang.String)", "errors": [], "param": "taskDefinition"}, {"annotation": "javax.annotation.Nullable", "jump": 1, "location": "METHOD_PARAM", "uri": "//tmp/projects/conductor/core/src/main/java/com/netflix/conductor/core/execution/WorkflowExecutor.java", "pkg": "com.netflix.conductor.core.execution", "class": "com.netflix.conductor.core.execution.WorkflowExecutor", "inject": "true", "method": "startWorkflow(com.netflix.conductor.common.metadata.workflow.WorkflowDef,java.util.Map<java.lang.String,java.lang.Object>,java.lang.String,java.lang.String,java.lang.Integer,java.lang.String,java.lang.String,java.lang.String,java.util.Map<java.lang.String,java.lang.String>)", "errors": ["(Covered) passing @Nullable parameter 'parentWorkflowId' where @NonNull is required"], "param": "parentWorkflowId"}, {"annotation": "javax.annotation.Nullable", "jump": 1, "location": "CLASS_FIELD", "uri": "//tmp/projects/conductor/core/src/main/java/com/netflix/conductor/core/events/queue/Message.java", "pkg": "com.netflix.conductor.core.events.queue", "class": "com.netflix.conductor.core.events.queue.Message", "inject": "true", "method": "", "errors": ["(Covered) initializer method does not guarantee @NonNull fields id (line 22), receipt (line 23) are initialized along all control-flow paths (remember to check for exceptions or early returns)."], "param": "payload"}, {"annotation": "javax.annotation.Nullable", "jump": 0, "location": "METHOD_PARAM", "uri": "//tmp/projects/conductor/core/src/main/java/com/netflix/conductor/core/events/EventQueues.java", "pkg": "com.netflix.conductor.core.events", "class": "com.netflix.conductor.core.events.EventQueues", "inject": "true", "method": "getQueue(java.lang.String)", "errors": ["(Covered) initializer method does not guarantee @NonNull fields payload (line 20), id (line 21), receipt (line 22) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) passing @Nullable parameter 'eventType' where @NonNull is required"], "param": "eventType"}, {"annotation": "javax.annotation.Nullable", "jump": 0, "location": "METHOD_PARAM", "uri": "//tmp/projects/conductor/core/src/main/java/com/netflix/conductor/core/utils/QueueUtils.java", "pkg": "com.netflix.conductor.core.utils", "class": "com.netflix.conductor.core.utils.QueueUtils", "inject": "true", "method": "getQueueName(java.lang.String,java.lang.String,java.lang.String,java.lang.String)", "errors": ["(Covered) initializer method does not guarantee @NonNull fields payload (line 20), id (line 21), receipt (line 22) are initialized along all control-flow paths (remember to check for exceptions or early returns)."], "param": "isolationGroup"}, {"annotation": "javax.annotation.Nullable", "jump": 0, "location": "CLASS_FIELD", "uri": "//tmp/projects/conductor/core/src/main/java/com/netflix/conductor/validations/ValidationContext.java", "pkg": "com.netflix.conductor.validations", "class": "com.netflix.conductor.validations.ValidationContext", "inject": "true", "method": "", "errors": ["(Covered) initializer method does not guarantee @NonNull fields payload (line 20), id (line 21), receipt (line 22) are initialized along all control-flow paths (remember to check for exceptions or early returns)."], "param": "metadataDAO"}, {"annotation": "javax.annotation.Nullable", "jump": 0, "location": "METHOD_PARAM", "uri": "//tmp/projects/conductor/core/src/main/java/com/netflix/conductor/core/execution/WorkflowExecutor.java", "pkg": "com.netflix.conductor.core.execution", "class": "com.netflix.conductor.core.execution.WorkflowExecutor", "inject": "true", "method": "rerunWF(java.lang.String,java.lang.String,java.util.Map<java.lang.String,java.lang.Object>,java.util.Map<java.lang.String,java.lang.Object>,java.lang.String)", "errors": [], "param": "workflowInput"}, {"annotation": "javax.annotation.Nullable", "jump": 0, "location": "METHOD_PARAM", "uri": "//tmp/projects/conductor/core/src/main/java/com/netflix/conductor/core/execution/WorkflowExecutor.java", "pkg": "com.netflix.conductor.core.execution", "class": "com.netflix.conductor.core.execution.WorkflowExecutor", "inject": "true", "method": "startWorkflow(java.lang.String,java.lang.Integer,java.lang.String,java.util.Map<java.lang.String,java.lang.Object>,java.lang.String,java.lang.String,java.util.Map<java.lang.String,java.lang.String>)", "errors": ["(Covered) passing @Nullable parameter 'externalInputPayloadStoragePath' where @NonNull is required"], "param": "externalInputPayloadStoragePath"}, {"annotation": "javax.annotation.Nullable", "jump": 0, "location": "METHOD_RETURN", "uri": "//tmp/projects/conductor/core/src/main/java/com/netflix/conductor/service/ExecutionService.java", "pkg": "com.netflix.conductor.service", "class": "com.netflix.conductor.service.ExecutionService", "inject": "true", "method": "poll(java.lang.String,java.lang.String,java.lang.String)", "errors": ["(Covered) initializer method does not guarantee @NonNull fields payload (line 20), id (line 21), receipt (line 22) are initialized along all control-flow paths (remember to check for exceptions or early returns)."], "param": ""}, {"annotation": "javax.annotation.Nullable", "jump": 0, "location": "METHOD_RETURN", "uri": "//tmp/projects/conductor/core/src/main/java/com/netflix/conductor/core/storage/DummyPayloadStorage.java", "pkg": "com.netflix.conductor.core.storage", "class": "com.netflix.conductor.core.storage.DummyPayloadStorage", "inject": "true", "method": "download(java.lang.String)", "errors": ["(Covered) initializer method does not guarantee @NonNull fields payload (line 20), id (line 21), receipt (line 22) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) method returns @Nullable, but superclass method com.netflix.conductor.common.utils.ExternalPayloadStorage.download(java.lang.String) returns @NonNull"], "param": ""}, {"annotation": "javax.annotation.Nullable", "jump": 0, "location": "METHOD_RETURN", "uri": "//tmp/projects/conductor/core/src/main/java/com/netflix/conductor/core/execution/WorkflowExecutor.java", "pkg": "com.netflix.conductor.core.execution", "class": "com.netflix.conductor.core.execution.WorkflowExecutor", "inject": "true", "method": "getPendingTaskByWorkflow(java.lang.String,java.lang.String)", "errors": [], "param": ""}, {"annotation": "javax.annotation.Nullable", "jump": 0, "location": "METHOD_PARAM", "uri": "//tmp/projects/conductor/core/src/main/java/com/netflix/conductor/core/execution/WorkflowExecutor.java", "pkg": "com.netflix.conductor.core.execution", "class": "com.netflix.conductor.core.execution.WorkflowExecutor", "inject": "true", "method": "startWorkflow(java.lang.String,java.lang.Integer,java.util.Map<java.lang.String,java.lang.Object>,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.Map<java.lang.String,java.lang.String>)", "errors": ["(Covered) passing @Nullable parameter 'taskToDomain' where @NonNull is required"], "param": "taskToDomain"}, {"annotation": "javax.annotation.Nullable", "jump": 0, "location": "METHOD_RETURN", "uri": "//tmp/projects/conductor/core/src/main/java/com/netflix/conductor/core/execution/WorkflowExecutor.java", "pkg": "com.netflix.conductor.core.execution", "class": "com.netflix.conductor.core.execution.WorkflowExecutor", "inject": "true", "method": "getTask(java.lang.String)", "errors": [], "param": ""}, {"annotation": "javax.annotation.Nullable", "jump": 0, "location": "METHOD_PARAM", "uri": "//tmp/projects/conductor/core/src/main/java/com/netflix/conductor/service/MetadataService.java", "pkg": "com.netflix.conductor.service", "class": "com.netflix.conductor.service.MetadataService", "inject": "true", "method": "getWorkflowDef(@javax.validation.constraints.NotEmpty(message=\"Workflow name cannot be null or empty\") java.lang.String,java.lang.Integer)", "errors": ["(Covered) initializer method does not guarantee @NonNull fields payload (line 20), id (line 21), receipt (line 22) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull fields taskDefs (line 49), workflowDefs (line 50) are initialized along all control-flow paths (remember to check for exceptions or early returns)."], "param": "version"}, {"annotation": "javax.annotation.Nullable", "jump": 0, "location": "METHOD_PARAM", "uri": "//tmp/projects/conductor/core/src/main/java/com/netflix/conductor/core/orchestration/ExecutionDAOFacade.java", "pkg": "com.netflix.conductor.core.orchestration", "class": "com.netflix.conductor.core.orchestration.ExecutionDAOFacade", "inject": "true", "method": "exceedsRateLimitPerFrequency(com.netflix.conductor.common.metadata.tasks.Task,com.netflix.conductor.common.metadata.tasks.TaskDef)", "errors": [], "param": "taskDef"}, {"annotation": "javax.annotation.Nullable", "jump": 0, "location": "METHOD_RETURN", "uri": "//tmp/projects/conductor/core/src/main/java/com/netflix/conductor/core/storage/DummyPayloadStorage.java", "pkg": "com.netflix.conductor.core.storage", "class": "com.netflix.conductor.core.storage.DummyPayloadStorage", "inject": "true", "method": "getLocation(com.netflix.conductor.common.utils.ExternalPayloadStorage.Operation,com.netflix.conductor.common.utils.ExternalPayloadStorage.PayloadType,java.lang.String)", "errors": ["(Covered) initializer method does not guarantee @NonNull fields payload (line 20), id (line 21), receipt (line 22) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) method returns @Nullable, but superclass method com.netflix.conductor.common.utils.ExternalPayloadStorage.getLocation(com.netflix.conductor.common.utils.ExternalPayloadStorage.Operation,com.netflix.conductor.common.utils.ExternalPayloadStorage.PayloadType,java.lang.String) returns @NonNull"], "param": ""}, {"annotation": "javax.annotation.Nullable", "jump": 0, "location": "METHOD_RETURN", "uri": "//tmp/projects/conductor/core/src/main/java/com/netflix/conductor/service/ExecutionService.java", "pkg": "com.netflix.conductor.service", "class": "com.netflix.conductor.service.ExecutionService", "inject": "true", "method": "getLastPollTask(java.lang.String,java.lang.String,java.lang.String)", "errors": ["(Covered) initializer method does not guarantee @NonNull fields payload (line 20), id (line 21), receipt (line 22) are initialized along all control-flow paths (remember to check for exceptions or early returns)."], "param": ""}, {"annotation": "javax.annotation.Nullable", "jump": 0, "location": "METHOD_PARAM", "uri": "//tmp/projects/conductor/core/src/main/java/com/netflix/conductor/core/execution/WorkflowExecutor.java", "pkg": "com.netflix.conductor.core.execution", "class": "com.netflix.conductor.core.execution.WorkflowExecutor", "inject": "true", "method": "startWorkflow(java.lang.String,java.lang.Integer,java.util.Map<java.lang.String,java.lang.Object>,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)", "errors": ["(Covered) passing @Nullable parameter 'parentWorkflowId' where @NonNull is required"], "param": "parentWorkflowId"}, {"annotation": "javax.annotation.Nullable", "jump": 0, "location": "METHOD_PARAM", "uri": "//tmp/projects/conductor/core/src/main/java/com/netflix/conductor/core/exception/TerminateWorkflowException.java", "pkg": "com.netflix.conductor.core.exception", "class": "com.netflix.conductor.core.exception.TerminateWorkflowException", "inject": "true", "method": "TerminateWorkflowException(java.lang.String,com.netflix.conductor.common.run.Workflow.WorkflowStatus,com.netflix.conductor.common.metadata.tasks.Task)", "errors": [], "param": "task"}, {"annotation": "javax.annotation.Nullable", "jump": 0, "location": "METHOD_PARAM", "uri": "//tmp/projects/conductor/core/src/main/java/com/netflix/conductor/core/exception/TerminateWorkflowException.java", "pkg": "com.netflix.conductor.core.exception", "class": "com.netflix.conductor.core.exception.TerminateWorkflowException", "inject": "true", "method": "TerminateWorkflowException(java.lang.String)", "errors": ["(Covered) passing @Nullable parameter 'reason' where @NonNull is required"], "param": "reason"}, {"annotation": "javax.annotation.Nullable", "jump": 0, "location": "METHOD_PARAM", "uri": "//tmp/projects/conductor/core/src/main/java/com/netflix/conductor/service/ExecutionService.java", "pkg": "com.netflix.conductor.service", "class": "com.netflix.conductor.service.ExecutionService", "inject": "true", "method": "poll(java.lang.String,java.lang.String,java.lang.String)", "errors": ["(Covered) initializer method does not guarantee @NonNull fields payload (line 20), id (line 21), receipt (line 22) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) passing @Nullable parameter 'domain' where @NonNull is required"], "param": "domain"}, {"annotation": "javax.annotation.Nullable", "jump": 0, "location": "METHOD_PARAM", "uri": "//tmp/projects/conductor/core/src/main/java/com/netflix/conductor/core/utils/ParametersUtils.java", "pkg": "com.netflix.conductor.core.utils", "class": "com.netflix.conductor.core.utils.ParametersUtils", "inject": "true", "method": "replaceVariables(java.lang.String,com.jayway.jsonpath.DocumentContext,java.lang.String)", "errors": ["(Covered) passing @Nullable parameter 'taskId' where @NonNull is required"], "param": "taskId"}, {"annotation": "javax.annotation.Nullable", "jump": 0, "location": "METHOD_RETURN", "uri": "//tmp/projects/conductor/core/src/main/java/com/netflix/conductor/core/execution/WorkflowExecutor.java", "pkg": "com.netflix.conductor.core.execution", "class": "com.netflix.conductor.core.execution.WorkflowExecutor", "inject": "true", "method": "getActiveDomain(java.lang.String,java.lang.String[])", "errors": ["(Covered) passing @Nullable parameter 'getActiveDomain(task.getTaskType(), domains)' where @NonNull is required", "(Covered) passing @Nullable parameter 'getActiveDomain(task.getTaskType(), taskDomainstr.split(\",\"))' where @NonNull is required"], "param": ""}, {"annotation": "javax.annotation.Nullable", "jump": -1, "location": "METHOD_PARAM", "uri": "//tmp/projects/conductor/core/src/main/java/com/netflix/conductor/core/execution/DeciderService.java", "pkg": "com.netflix.conductor.core.execution", "class": "com.netflix.conductor.core.execution.DeciderService", "inject": "true", "method": "retry(com.netflix.conductor.common.metadata.tasks.TaskDef,com.netflix.conductor.common.metadata.workflow.WorkflowTask,com.netflix.conductor.common.metadata.tasks.Task,com.netflix.conductor.common.run.Workflow)", "errors": [], "param": "taskDefinition"}, {"annotation": "javax.annotation.Nullable", "jump": -1, "location": "METHOD_PARAM", "uri": "//tmp/projects/conductor/core/src/main/java/com/netflix/conductor/core/execution/WorkflowExecutor.java", "pkg": "com.netflix.conductor.core.execution", "class": "com.netflix.conductor.core.execution.WorkflowExecutor", "inject": "true", "method": "startWorkflow(com.netflix.conductor.common.metadata.workflow.WorkflowDef,java.util.Map<java.lang.String,java.lang.Object>,java.lang.String,java.lang.String,java.lang.Integer,java.lang.String,java.util.Map<java.lang.String,java.lang.String>)", "errors": [], "param": "event"}, {"annotation": "javax.annotation.Nullable", "jump": -1, "location": "METHOD_PARAM", "uri": "//tmp/projects/conductor/core/src/main/java/com/netflix/conductor/core/execution/WorkflowExecutor.java", "pkg": "com.netflix.conductor.core.execution", "class": "com.netflix.conductor.core.execution.WorkflowExecutor", "inject": "true", "method": "startWorkflow(java.lang.String,java.lang.Integer,java.lang.String,java.lang.Integer,java.util.Map<java.lang.String,java.lang.Object>,java.lang.String)", "errors": ["(Covered) passing @Nullable parameter 'externalInputPayloadStoragePath' where @NonNull is required"], "param": "externalInputPayloadStoragePath"}, {"annotation": "javax.annotation.Nullable", "jump": -1, "location": "METHOD_RETURN", "uri": "//tmp/projects/conductor/core/src/main/java/com/netflix/conductor/core/execution/DeciderService.java", "pkg": "com.netflix.conductor.core.execution", "class": "com.netflix.conductor.core.execution.DeciderService", "inject": "true", "method": "getNextTasksToBeScheduled(com.netflix.conductor.common.run.Workflow,com.netflix.conductor.common.metadata.tasks.Task)", "errors": [], "param": ""}, {"annotation": "javax.annotation.Nullable", "jump": -1, "location": "METHOD_PARAM", "uri": "//tmp/projects/conductor/core/src/main/java/com/netflix/conductor/core/execution/WorkflowExecutor.java", "pkg": "com.netflix.conductor.core.execution", "class": "com.netflix.conductor.core.execution.WorkflowExecutor", "inject": "true", "method": "startWorkflow(java.lang.String,java.lang.Integer,java.lang.String,java.lang.Integer,java.util.Map<java.lang.String,java.lang.Object>,java.lang.String,java.lang.String,java.util.Map<java.lang.String,java.lang.String>)", "errors": [], "param": "event"}, {"annotation": "javax.annotation.Nullable", "jump": -1, "location": "METHOD_PARAM", "uri": "//tmp/projects/conductor/core/src/main/java/com/netflix/conductor/core/execution/DeciderService.java", "pkg": "com.netflix.conductor.core.execution", "class": "com.netflix.conductor.core.execution.DeciderService", "inject": "true", "method": "getTasksToBeScheduled(com.netflix.conductor.common.run.Workflow,com.netflix.conductor.common.metadata.workflow.WorkflowTask,int,java.lang.String)", "errors": ["(Covered) passing @Nullable parameter 'retriedTaskId' where @NonNull is required"], "param": "retriedTaskId"}, {"annotation": "javax.annotation.Nullable", "jump": -1, "location": "METHOD_PARAM", "uri": "//tmp/projects/conductor/core/src/main/java/com/netflix/conductor/dao/IndexDAO.java", "pkg": "com.netflix.conductor.dao", "class": "com.netflix.conductor.dao.IndexDAO", "inject": "true", "method": "searchWorkflows(java.lang.String,java.lang.String,int,int,java.util.List<java.lang.String>)", "errors": [], "param": "sort"}, {"annotation": "javax.annotation.Nullable", "jump": -1, "location": "METHOD_RETURN", "uri": "//tmp/projects/conductor/core/src/main/java/com/netflix/conductor/core/orchestration/ExecutionDAOFacade.java", "pkg": "com.netflix.conductor.core.orchestration", "class": "com.netflix.conductor.core.orchestration.ExecutionDAOFacade", "inject": "true", "method": "getTaskPollDataByDomain(java.lang.String,java.lang.String)", "errors": [], "param": ""}, {"annotation": "javax.annotation.Nullable", "jump": -1, "location": "METHOD_PARAM", "uri": "//tmp/projects/conductor/core/src/main/java/com/netflix/conductor/core/execution/WorkflowExecutor.java", "pkg": "com.netflix.conductor.core.execution", "class": "com.netflix.conductor.core.execution.WorkflowExecutor", "inject": "true", "method": "startWorkflow(java.lang.String,java.lang.Integer,java.lang.String,java.util.Map<java.lang.String,java.lang.Object>,java.lang.String,java.lang.String)", "errors": [], "param": "event"}, {"annotation": "javax.annotation.Nullable", "jump": -1, "location": "METHOD_RETURN", "uri": "//tmp/projects/conductor/core/src/main/java/com/netflix/conductor/core/events/queue/DefaultEventQueueProcessor.java", "pkg": "com.netflix.conductor.core.events.queue", "class": "com.netflix.conductor.core.events.queue.DefaultEventQueueProcessor", "inject": "true", "method": "getValue(java.lang.String,com.fasterxml.jackson.databind.JsonNode)", "errors": ["(Covered) initializer method does not guarantee @NonNull fields payload (line 20), id (line 21), receipt (line 22) are initialized along all control-flow paths (remember to check for exceptions or early returns)."], "param": ""}, {"annotation": "javax.annotation.Nullable", "jump": -1, "location": "METHOD_PARAM", "uri": "//tmp/projects/conductor/core/src/main/java/com/netflix/conductor/core/utils/QueueUtils.java", "pkg": "com.netflix.conductor.core.utils", "class": "com.netflix.conductor.core.utils.QueueUtils", "inject": "true", "method": "getQueueName(java.lang.String,java.lang.String,java.lang.String,java.lang.String)", "errors": ["(Covered) initializer method does not guarantee @NonNull fields payload (line 20), id (line 21), receipt (line 22) are initialized along all control-flow paths (remember to check for exceptions or early returns)."], "param": "domain"}, {"annotation": "javax.annotation.Nullable", "jump": -1, "location": "METHOD_PARAM", "uri": "//tmp/projects/conductor/core/src/main/java/com/netflix/conductor/core/execution/tasks/Terminate.java", "pkg": "com.netflix.conductor.core.execution.tasks", "class": "com.netflix.conductor.core.execution.tasks.Terminate", "inject": "true", "method": "validateInputStatus(java.lang.String)", "errors": [], "param": "status"}, {"annotation": "javax.annotation.Nullable", "jump": -1, "location": "METHOD_PARAM", "uri": "//tmp/projects/conductor/core/src/main/java/com/netflix/conductor/core/execution/WorkflowExecutor.java", "pkg": "com.netflix.conductor.core.execution", "class": "com.netflix.conductor.core.execution.WorkflowExecutor", "inject": "true", "method": "startWorkflow(java.lang.String,java.lang.Integer,java.lang.String,java.lang.Integer,java.util.Map<java.lang.String,java.lang.Object>,java.lang.String,java.lang.String)", "errors": [], "param": "event"}, {"annotation": "javax.annotation.Nullable", "jump": -2, "location": "METHOD_PARAM", "uri": "//tmp/projects/conductor/core/src/main/java/com/netflix/conductor/core/execution/DeciderService.java", "pkg": "com.netflix.conductor.core.execution", "class": "com.netflix.conductor.core.execution.DeciderService", "inject": "true", "method": "updateWorkflowOutput(com.netflix.conductor.common.run.Workflow,com.netflix.conductor.common.metadata.tasks.Task)", "errors": [], "param": "task"}, {"annotation": "javax.annotation.Nullable", "jump": -2, "location": "METHOD_RETURN", "uri": "//tmp/projects/conductor/core/src/main/java/com/netflix/conductor/core/execution/tasks/Event.java", "pkg": "com.netflix.conductor.core.execution.tasks", "class": "com.netflix.conductor.core.execution.tasks.Event", "inject": "true", "method": "getQueue(com.netflix.conductor.common.run.Workflow,com.netflix.conductor.common.metadata.tasks.Task)", "errors": ["(Covered) initializer method does not guarantee @NonNull fields payload (line 20), id (line 21), receipt (line 22) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "dereferenced expression getQueue(workflow, task) is @Nullable"], "param": ""}, {"annotation": "javax.annotation.Nullable", "jump": -2, "location": "METHOD_PARAM", "uri": "//tmp/projects/conductor/core/src/main/java/com/netflix/conductor/core/execution/WorkflowExecutor.java", "pkg": "com.netflix.conductor.core.execution", "class": "com.netflix.conductor.core.execution.WorkflowExecutor", "inject": "true", "method": "terminateWorkflow(com.netflix.conductor.common.run.Workflow,java.lang.String,java.lang.String)", "errors": [], "param": "failureWorkflow"}, {"annotation": "javax.annotation.Nullable", "jump": -5, "location": "METHOD_PARAM", "uri": "//tmp/projects/conductor/core/src/main/java/com/netflix/conductor/core/utils/BulkResponse.java", "pkg": "com.netflix.conductor.core.utils", "class": "com.netflix.conductor.core.utils.BulkResponse", "inject": "true", "method": "appendFailedResponse(java.lang.String,java.lang.String)", "errors": ["(Covered) initializer method does not guarantee @NonNull fields payload (line 20), id (line 21), receipt (line 22) are initialized along all control-flow paths (remember to check for exceptions or early returns).", "(Covered) initializer method does not guarantee @NonNull fields taskDefs (line 49), workflowDefs (line 50) are initialized along all control-flow paths (remember to check for exceptions or early returns)."], "param": "errorMessage"}, {"annotation": "javax.annotation.Nullable", "jump": -5, "location": "METHOD_PARAM", "uri": "//tmp/projects/conductor/core/src/main/java/com/netflix/conductor/core/utils/ParametersUtils.java", "pkg": "com.netflix.conductor.core.utils", "class": "com.netflix.conductor.core.utils.ParametersUtils", "inject": "true", "method": "getTaskInputV2(java.util.Map<java.lang.String,java.lang.Object>,com.netflix.conductor.common.run.Workflow,java.lang.String,com.netflix.conductor.common.metadata.tasks.TaskDef)", "errors": [], "param": "taskDefinition"}, {"annotation": "javax.annotation.Nullable", "jump": 3, "location": "METHOD_RETURN", "uri": "//tmp/projects/conductor/core/src/main/java/com/netflix/conductor/validations/ValidationContext.java", "pkg": "com.netflix.conductor.validations", "class": "com.netflix.conductor.validations.ValidationContext", "inject": "true", "method": "getMetadataDAO()", "errors": ["dereferenced expression ValidationContext.getMetadataDAO() is @Nullable", "dereferenced expression ValidationContext.getMetadataDAO() is @Nullable", "dereferenced expression ValidationContext.getMetadataDAO() is @Nullable", "dereferenced expression ValidationContext.getMetadataDAO() is @Nullable"], "param": ""}, {"annotation": "javax.annotation.Nullable", "jump": 2, "location": "METHOD_PARAM", "uri": "//tmp/projects/conductor/core/src/main/java/com/netflix/conductor/core/execution/WorkflowExecutor.java", "pkg": "com.netflix.conductor.core.execution", "class": "com.netflix.conductor.core.execution.WorkflowExecutor", "inject": "true", "method": "startWorkflow(com.netflix.conductor.common.metadata.workflow.WorkflowDef,java.util.Map<java.lang.String,java.lang.Object>,java.lang.String,java.lang.String,java.lang.Integer,java.lang.String,java.lang.String,java.lang.String,java.util.Map<java.lang.String,java.lang.String>)", "errors": [], "param": "externalInputPayloadStoragePath"}, {"annotation": "javax.annotation.Nullable", "jump": 1, "location": "METHOD_PARAM", "uri": "//tmp/projects/conductor/core/src/main/java/com/netflix/conductor/core/events/queue/Message.java", "pkg": "com.netflix.conductor.core.events.queue", "class": "com.netflix.conductor.core.events.queue.Message", "inject": "true", "method": "Message(java.lang.String,java.lang.String,java.lang.String)", "errors": ["(Covered) initializer method does not guarantee @NonNull field payload (line 20) is initialized along all control-flow paths (remember to check for exceptions or early returns)."], "param": "payload"}, {"annotation": "javax.annotation.Nullable", "jump": 1, "location": "CLASS_FIELD", "uri": "//tmp/projects/conductor/core/src/main/java/com/netflix/conductor/metrics/WorkflowMonitor.java", "pkg": "com.netflix.conductor.metrics", "class": "com.netflix.conductor.metrics.WorkflowMonitor", "inject": "true", "method": "", "errors": ["(Covered) initializer method does not guarantee @NonNull field taskDefs (line 49) is initialized along all control-flow paths (remember to check for exceptions or early returns).", "dereferenced expression workflowDefs is @Nullable"], "param": "workflowDefs"}, {"annotation": "javax.annotation.Nullable", "jump": 1, "location": "METHOD_PARAM", "uri": "//tmp/projects/conductor/core/src/main/java/com/netflix/conductor/service/ExecutionService.java", "pkg": "com.netflix.conductor.service", "class": "com.netflix.conductor.service.ExecutionService", "inject": "true", "method": "poll(java.lang.String,java.lang.String,java.lang.String,int,int)", "errors": [], "param": "domain"}, {"annotation": "javax.annotation.Nullable", "jump": 1, "location": "METHOD_PARAM", "uri": "//tmp/projects/conductor/core/src/main/java/com/netflix/conductor/core/execution/mapper/TaskMapperContext.java", "pkg": "com.netflix.conductor.core.execution.mapper", "class": "com.netflix.conductor.core.execution.mapper.TaskMapperContext.Builder", "inject": "true", "method": "withRetryTaskId(java.lang.String)", "errors": ["(Covered) initializer method does not guarantee @NonNull field retryTaskId (line 175) is initialized along all control-flow paths (remember to check for exceptions or early returns)."], "param": "val"}, {"annotation": "javax.annotation.Nullable", "jump": 1, "location": "METHOD_PARAM", "uri": "//tmp/projects/conductor/core/src/main/java/com/netflix/conductor/core/events/queue/Message.java", "pkg": "com.netflix.conductor.core.events.queue", "class": "com.netflix.conductor.core.events.queue.Message", "inject": "true", "method": "Message(java.lang.String,java.lang.String,java.lang.String)", "errors": ["(Covered) initializer method does not guarantee @NonNull field receipt (line 22) is initialized along all control-flow paths (remember to check for exceptions or early returns)."], "param": "receipt"}, {"annotation": "javax.annotation.Nullable", "jump": 1, "location": "METHOD_RETURN", "uri": "//tmp/projects/conductor/core/src/main/java/com/netflix/conductor/service/ExecutionService.java", "pkg": "com.netflix.conductor.service", "class": "com.netflix.conductor.service.ExecutionService", "inject": "true", "method": "getTask(java.lang.String)", "errors": ["dereferenced expression task is @Nullable"], "param": ""}, {"annotation": "javax.annotation.Nullable", "jump": 1, "location": "METHOD_PARAM", "uri": "//tmp/projects/conductor/core/src/main/java/com/netflix/conductor/core/execution/WorkflowExecutor.java", "pkg": "com.netflix.conductor.core.execution", "class": "com.netflix.conductor.core.execution.WorkflowExecutor", "inject": "true", "method": "startWorkflow(com.netflix.conductor.common.metadata.workflow.WorkflowDef,java.util.Map<java.lang.String,java.lang.Object>,java.lang.String,java.lang.String,java.lang.String,java.util.Map<java.lang.String,java.lang.String>)", "errors": [], "param": "externalInputPayloadStoragePath"}, {"annotation": "javax.annotation.Nullable", "jump": 1, "location": "CLASS_FIELD", "uri": "//tmp/projects/conductor/core/src/main/java/com/netflix/conductor/metrics/WorkflowMonitor.java", "pkg": "com.netflix.conductor.metrics", "class": "com.netflix.conductor.metrics.WorkflowMonitor", "inject": "true", "method": "", "errors": ["(Covered) initializer method does not guarantee @NonNull field workflowDefs (line 51) is initialized along all control-flow paths (remember to check for exceptions or early returns).", "dereferenced expression taskDefs is @Nullable"], "param": "taskDefs"}, {"annotation": "javax.annotation.Nullable", "jump": 1, "location": "METHOD_PARAM", "uri": "//tmp/projects/conductor/core/src/main/java/com/netflix/conductor/core/execution/WorkflowExecutor.java", "pkg": "com.netflix.conductor.core.execution", "class": "com.netflix.conductor.core.execution.WorkflowExecutor", "inject": "true", "method": "startWorkflow(com.netflix.conductor.common.metadata.workflow.WorkflowDef,java.util.Map<java.lang.String,java.lang.Object>,java.lang.String,java.lang.String,java.lang.Integer,java.lang.String,java.lang.String,java.lang.String,java.util.Map<java.lang.String,java.lang.String>)", "errors": [], "param": "parentWorkflowId"}, {"annotation": "javax.annotation.Nullable", "jump": 1, "location": "METHOD_PARAM", "uri": "//tmp/projects/conductor/core/src/main/java/com/netflix/conductor/core/execution/WorkflowExecutor.java", "pkg": "com.netflix.conductor.core.execution", "class": "com.netflix.conductor.core.execution.WorkflowExecutor", "inject": "true", "method": "startWorkflow(java.lang.String,java.lang.Integer,java.util.Map<java.lang.String,java.lang.Object>,java.lang.String,java.lang.String,java.lang.Integer,java.lang.String,java.lang.String,java.lang.String,java.util.Map<java.lang.String,java.lang.String>)", "errors": [], "param": "parentWorkflowId"}, {"annotation": "javax.annotation.Nullable", "jump": 1, "location": "METHOD_RETURN", "uri": "//tmp/projects/conductor/core/src/main/java/com/netflix/conductor/core/events/DefaultEventProcessor.java", "pkg": "com.netflix.conductor.core.events", "class": "com.netflix.conductor.core.events.DefaultEventProcessor", "inject": "true", "method": "getPayloadObject(java.lang.String)", "errors": ["(Covered) passing @Nullable parameter 'payloadObject' where @NonNull is required", "(Covered) passing @Nullable parameter 'getPayloadObject(msg.getPayload())' where @NonNull is required"], "param": ""}, {"annotation": "javax.annotation.Nullable", "jump": 0, "location": "METHOD_PARAM", "uri": "//tmp/projects/conductor/core/src/main/java/com/netflix/conductor/core/execution/WorkflowExecutor.java", "pkg": "com.netflix.conductor.core.execution", "class": "com.netflix.conductor.core.execution.WorkflowExecutor", "inject": "true", "method": "startWorkflow(java.lang.String,java.lang.Integer,java.util.Map<java.lang.String,java.lang.Object>,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)", "errors": ["(Covered) passing @Nullable parameter 'event' where @NonNull is required"], "param": "parentWorkflowTaskId"}, {"annotation": "javax.annotation.Nullable", "jump": 0, "location": "METHOD_PARAM", "uri": "//tmp/projects/conductor/core/src/main/java/com/netflix/conductor/core/utils/ParametersUtils.java", "pkg": "com.netflix.conductor.core.utils", "class": "com.netflix.conductor.core.utils.ParametersUtils", "inject": "true", "method": "getTaskInputV2(java.util.Map<java.lang.String,java.lang.Object>,com.netflix.conductor.common.run.Workflow,java.lang.String,com.netflix.conductor.common.metadata.tasks.TaskDef)", "errors": [], "param": "taskId"}, {"annotation": "javax.annotation.Nullable", "jump": 0, "location": "METHOD_PARAM", "uri": "//tmp/projects/conductor/core/src/main/java/com/netflix/conductor/core/utils/ParametersUtils.java", "pkg": "com.netflix.conductor.core.utils", "class": "com.netflix.conductor.core.utils.ParametersUtils", "inject": "true", "method": "replace(java.util.Map<java.lang.String,java.lang.Object>,com.jayway.jsonpath.DocumentContext,java.lang.String)", "errors": [], "param": "taskId"}, {"annotation": "javax.annotation.Nullable", "jump": 0, "location": "METHOD_PARAM", "uri": "//tmp/projects/conductor/core/src/main/java/com/netflix/conductor/core/execution/WorkflowExecutor.java", "pkg": "com.netflix.conductor.core.execution", "class": "com.netflix.conductor.core.execution.WorkflowExecutor", "inject": "true", "method": "startWorkflow(java.lang.String,java.lang.Integer,java.util.Map<java.lang.String,java.lang.Object>,java.lang.String,java.lang.String,java.lang.Integer,java.lang.String,java.lang.String,java.lang.String,java.util.Map<java.lang.String,java.lang.String>)", "errors": [], "param": "taskToDomain"}, {"annotation": "javax.annotation.Nullable", "jump": 0, "location": "METHOD_PARAM", "uri": "//tmp/projects/conductor/core/src/main/java/com/netflix/conductor/core/execution/WorkflowExecutor.java", "pkg": "com.netflix.conductor.core.execution", "class": "com.netflix.conductor.core.execution.WorkflowExecutor", "inject": "true", "method": "startWorkflow(java.lang.String,java.lang.Integer,java.util.Map<java.lang.String,java.lang.Object>,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.Map<java.lang.String,java.lang.String>)", "errors": [], "param": "externalInputPayloadStoragePath"}, {"annotation": "javax.annotation.Nullable", "jump": 0, "location": "METHOD_PARAM", "uri": "//tmp/projects/conductor/core/src/main/java/com/netflix/conductor/service/MetadataService.java", "pkg": "com.netflix.conductor.service", "class": "com.netflix.conductor.service.MetadataService", "inject": "true", "method": "getWorkflowDef(@javax.validation.constraints.NotEmpty(message=\"Workflow name cannot be null or empty\") java.lang.String,java.lang.Integer)", "errors": [], "param": "version"}, {"annotation": "javax.annotation.Nullable", "jump": 0, "location": "METHOD_PARAM", "uri": "//tmp/projects/conductor/core/src/main/java/com/netflix/conductor/core/execution/WorkflowExecutor.java", "pkg": "com.netflix.conductor.core.execution", "class": "com.netflix.conductor.core.execution.WorkflowExecutor", "inject": "true", "method": "terminateWorkflow(com.netflix.conductor.common.run.Workflow,java.lang.String,java.lang.String)", "errors": [], "param": "reason"}, {"annotation": "javax.annotation.Nullable", "jump": 0, "location": "METHOD_PARAM", "uri": "//tmp/projects/conductor/core/src/main/java/com/netflix/conductor/core/utils/ParametersUtils.java", "pkg": "com.netflix.conductor.core.utils", "class": "com.netflix.conductor.core.utils.ParametersUtils", "inject": "true", "method": "getTaskInput(java.util.Map<java.lang.String,java.lang.Object>,com.netflix.conductor.common.run.Workflow,com.netflix.conductor.common.metadata.tasks.TaskDef,java.lang.String)", "errors": [], "param": "taskDefinition"}, {"annotation": "javax.annotation.Nullable", "jump": 0, "location": "METHOD_PARAM", "uri": "//tmp/projects/conductor/core/src/main/java/com/netflix/conductor/core/exception/TerminateWorkflowException.java", "pkg": "com.netflix.conductor.core.exception", "class": "com.netflix.conductor.core.exception.TerminateWorkflowException", "inject": "true", "method": "TerminateWorkflowException(java.lang.String,com.netflix.conductor.common.run.Workflow.WorkflowStatus)", "errors": [], "param": "reason"}, {"annotation": "javax.annotation.Nullable", "jump": 0, "location": "METHOD_PARAM", "uri": "//tmp/projects/conductor/core/src/main/java/com/netflix/conductor/core/utils/ParametersUtils.java", "pkg": "com.netflix.conductor.core.utils", "class": "com.netflix.conductor.core.utils.ParametersUtils", "inject": "true", "method": "replace(java.lang.String)", "errors": ["(Covered) passing @Nullable parameter 'paramString' where @NonNull is required"], "param": "paramString"}, {"annotation": "javax.annotation.Nullable", "jump": 0, "location": "METHOD_RETURN", "uri": "//tmp/projects/conductor/core/src/main/java/com/netflix/conductor/service/ExecutionService.java", "pkg": "com.netflix.conductor.service", "class": "com.netflix.conductor.service.ExecutionService", "inject": "true", "method": "getPendingTaskForWorkflow(java.lang.String,java.lang.String)", "errors": [], "param": ""}, {"annotation": "javax.annotation.Nullable", "jump": 0, "location": "METHOD_RETURN", "uri": "//tmp/projects/conductor/core/src/main/java/com/netflix/conductor/service/TaskServiceImpl.java", "pkg": "com.netflix.conductor.service", "class": "com.netflix.conductor.service.TaskServiceImpl", "inject": "true", "method": "poll(java.lang.String,java.lang.String,java.lang.String)", "errors": ["(Covered) method returns @Nullable, but superclass method com.netflix.conductor.service.TaskService.poll(@javax.validation.constraints.NotEmpty(message=\"TaskType cannot be null or empty.\") java.lang.String,java.lang.String,java.lang.String) returns @NonNull"], "param": ""}, {"annotation": "javax.annotation.Nullable", "jump": -1, "location": "METHOD_RETURN", "uri": "//tmp/projects/conductor/core/src/main/java/com/netflix/conductor/service/ExecutionService.java", "pkg": "com.netflix.conductor.service", "class": "com.netflix.conductor.service.ExecutionService", "inject": "true", "method": "poll(java.lang.String,java.lang.String)", "errors": [], "param": ""}, {"annotation": "javax.annotation.Nullable", "jump": -1, "location": "METHOD_PARAM", "uri": "//tmp/projects/conductor/core/src/main/java/com/netflix/conductor/core/execution/WorkflowExecutor.java", "pkg": "com.netflix.conductor.core.execution", "class": "com.netflix.conductor.core.execution.WorkflowExecutor", "inject": "true", "method": "startWorkflow(java.lang.String,java.lang.Integer,java.lang.String,java.lang.Integer,java.util.Map<java.lang.String,java.lang.Object>,java.lang.String,java.lang.String,java.util.Map<java.lang.String,java.lang.String>)", "errors": [], "param": "externalInputPayloadStoragePath"}, {"annotation": "javax.annotation.Nullable", "jump": -1, "location": "METHOD_PARAM", "uri": "//tmp/projects/conductor/core/src/main/java/com/netflix/conductor/core/execution/WorkflowExecutor.java", "pkg": "com.netflix.conductor.core.execution", "class": "com.netflix.conductor.core.execution.WorkflowExecutor", "inject": "true", "method": "rerunWF(java.lang.String,java.lang.String,java.util.Map<java.lang.String,java.lang.Object>,java.util.Map<java.lang.String,java.lang.Object>,java.lang.String)", "errors": [], "param": "correlationId"}, {"annotation": "javax.annotation.Nullable", "jump": -1, "location": "METHOD_PARAM", "uri": "//tmp/projects/conductor/core/src/main/java/com/netflix/conductor/core/execution/WorkflowExecutor.java", "pkg": "com.netflix.conductor.core.execution", "class": "com.netflix.conductor.core.execution.WorkflowExecutor", "inject": "true", "method": "startWorkflow(java.lang.String,java.lang.Integer,java.lang.String,java.lang.Integer,java.util.Map<java.lang.String,java.lang.Object>,java.lang.String,java.lang.String)", "errors": [], "param": "externalInputPayloadStoragePath"}, {"annotation": "javax.annotation.Nullable", "jump": -1, "location": "METHOD_PARAM", "uri": "//tmp/projects/conductor/core/src/main/java/com/netflix/conductor/dao/RateLimitingDAO.java", "pkg": "com.netflix.conductor.dao", "class": "com.netflix.conductor.dao.RateLimitingDAO", "inject": "true", "method": "exceedsRateLimitPerFrequency(com.netflix.conductor.common.metadata.tasks.Task,com.netflix.conductor.common.metadata.tasks.TaskDef)", "errors": [], "param": "taskDef"}, {"annotation": "javax.annotation.Nullable", "jump": -1, "location": "METHOD_PARAM", "uri": "//tmp/projects/conductor/core/src/main/java/com/netflix/conductor/core/utils/QueueUtils.java", "pkg": "com.netflix.conductor.core.utils", "class": "com.netflix.conductor.core.utils.QueueUtils", "inject": "true", "method": "getQueueName(java.lang.String,java.lang.String,java.lang.String,java.lang.String)", "errors": [], "param": "executionNameSpace"}, {"annotation": "javax.annotation.Nullable", "jump": -1, "location": "METHOD_PARAM", "uri": "//tmp/projects/conductor/core/src/main/java/com/netflix/conductor/core/execution/WorkflowExecutor.java", "pkg": "com.netflix.conductor.core.execution", "class": "com.netflix.conductor.core.execution.WorkflowExecutor", "inject": "true", "method": "startWorkflow(java.lang.String,java.lang.Integer,java.util.Map<java.lang.String,java.lang.Object>,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.Map<java.lang.String,java.lang.String>)", "errors": [], "param": "parentWorkflowId"}, {"annotation": "javax.annotation.Nullable", "jump": 1, "location": "METHOD_PARAM", "uri": "//tmp/projects/conductor/core/src/main/java/com/netflix/conductor/core/execution/mapper/TaskMapperContext.java", "pkg": "com.netflix.conductor.core.execution.mapper", "class": "com.netflix.conductor.core.execution.mapper.TaskMapperContext.Builder", "inject": "true", "method": "withRetryTaskId(java.lang.String)", "errors": ["(Covered) initializer method does not guarantee @NonNull field retryTaskId (line 176) is initialized along all control-flow paths (remember to check for exceptions or early returns)."], "param": "val"}, {"annotation": "javax.annotation.Nullable", "jump": 0, "location": "METHOD_PARAM", "uri": "//tmp/projects/conductor/core/src/main/java/com/netflix/conductor/core/utils/ParametersUtils.java", "pkg": "com.netflix.conductor.core.utils", "class": "com.netflix.conductor.core.utils.ParametersUtils", "inject": "true", "method": "replaceVariables(java.lang.String,com.jayway.jsonpath.DocumentContext,java.lang.String)", "errors": ["dereferenced expression paramString is @Nullable"], "param": "paramString"}, {"annotation": "javax.annotation.Nullable", "jump": 0, "location": "METHOD_RETURN", "uri": "//tmp/projects/conductor/core/src/main/java/com/netflix/conductor/service/TaskServiceImpl.java", "pkg": "com.netflix.conductor.service", "class": "com.netflix.conductor.service.TaskServiceImpl", "inject": "true", "method": "getPendingTaskForWorkflow(java.lang.String,java.lang.String)", "errors": ["(Covered) method returns @Nullable, but superclass method com.netflix.conductor.service.TaskService.getPendingTaskForWorkflow(@javax.validation.constraints.NotEmpty(message=\"WorkflowId cannot be null or empty.\") java.lang.String,@javax.validation.constraints.NotEmpty(message=\"TaskReferenceName cannot be null or empty.\") java.lang.String) returns @NonNull"], "param": ""}, {"annotation": "javax.annotation.Nullable", "jump": 0, "location": "METHOD_PARAM", "uri": "//tmp/projects/conductor/core/src/main/java/com/netflix/conductor/core/execution/WorkflowExecutor.java", "pkg": "com.netflix.conductor.core.execution", "class": "com.netflix.conductor.core.execution.WorkflowExecutor", "inject": "true", "method": "startWorkflow(com.netflix.conductor.common.metadata.workflow.WorkflowDef,java.util.Map<java.lang.String,java.lang.Object>,java.lang.String,java.lang.String,java.lang.Integer,java.lang.String,java.lang.String,java.lang.String,java.util.Map<java.lang.String,java.lang.String>)", "errors": [], "param": "taskToDomain"}, {"annotation": "javax.annotation.Nullable", "jump": 0, "location": "METHOD_PARAM", "uri": "//tmp/projects/conductor/core/src/main/java/com/netflix/conductor/core/execution/WorkflowExecutor.java", "pkg": "com.netflix.conductor.core.execution", "class": "com.netflix.conductor.core.execution.WorkflowExecutor", "inject": "true", "method": "startWorkflow(java.lang.String,java.lang.Integer,java.util.Map<java.lang.String,java.lang.Object>,java.lang.String,java.lang.String,java.lang.Integer,java.lang.String,java.lang.String,java.lang.String,java.util.Map<java.lang.String,java.lang.String>)", "errors": ["(Covered) passing @Nullable parameter 'parentWorkflowId' where @NonNull is required"], "param": "externalInputPayloadStoragePath"}, {"annotation": "javax.annotation.Nullable", "jump": 0, "location": "METHOD_RETURN", "uri": "//tmp/projects/conductor/core/src/main/java/com/netflix/conductor/service/TaskService.java", "pkg": "com.netflix.conductor.service", "class": "com.netflix.conductor.service.TaskService", "inject": "true", "method": "poll(@javax.validation.constraints.NotEmpty(message=\"TaskType cannot be null or empty.\") java.lang.String,java.lang.String,java.lang.String)", "errors": [], "param": ""}, {"annotation": "javax.annotation.Nullable", "jump": -1, "location": "METHOD_PARAM", "uri": "//tmp/projects/conductor/core/src/main/java/com/netflix/conductor/core/utils/ParametersUtils.java", "pkg": "com.netflix.conductor.core.utils", "class": "com.netflix.conductor.core.utils.ParametersUtils", "inject": "true", "method": "replaceList(java.util.List<?>,java.lang.String,com.jayway.jsonpath.DocumentContext)", "errors": [], "param": "taskId"}, {"annotation": "javax.annotation.Nullable", "jump": -1, "location": "METHOD_PARAM", "uri": "//tmp/projects/conductor/core/src/main/java/com/netflix/conductor/core/exception/TerminateWorkflowException.java", "pkg": "com.netflix.conductor.core.exception", "class": "com.netflix.conductor.core.exception.TerminateWorkflowException", "inject": "true", "method": "TerminateWorkflowException(java.lang.String,com.netflix.conductor.common.run.Workflow.WorkflowStatus,com.netflix.conductor.common.metadata.tasks.Task)", "errors": [], "param": "reason"}, {"annotation": "javax.annotation.Nullable", "jump": -1, "location": "METHOD_PARAM", "uri": "//tmp/projects/conductor/core/src/main/java/com/netflix/conductor/core/execution/WorkflowExecutor.java", "pkg": "com.netflix.conductor.core.execution", "class": "com.netflix.conductor.core.execution.WorkflowExecutor", "inject": "true", "method": "startWorkflow(java.lang.String,java.lang.Integer,java.util.Map<java.lang.String,java.lang.Object>,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)", "errors": [], "param": "event"}, {"annotation": "javax.annotation.Nullable", "jump": -1, "location": "METHOD_PARAM", "uri": "//tmp/projects/conductor/core/src/main/java/com/netflix/conductor/core/execution/WorkflowExecutor.java", "pkg": "com.netflix.conductor.core.execution", "class": "com.netflix.conductor.core.execution.WorkflowExecutor", "inject": "true", "method": "startWorkflow(java.lang.String,java.lang.Integer,java.util.Map<java.lang.String,java.lang.Object>,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.Map<java.lang.String,java.lang.String>)", "errors": [], "param": "event"}, {"annotation": "javax.annotation.Nullable", "jump": -1, "location": "METHOD_PARAM", "uri": "//tmp/projects/conductor/core/src/main/java/com/netflix/conductor/core/execution/WorkflowExecutor.java", "pkg": "com.netflix.conductor.core.execution", "class": "com.netflix.conductor.core.execution.WorkflowExecutor", "inject": "true", "method": "startWorkflow(java.lang.String,java.lang.Integer,java.util.Map<java.lang.String,java.lang.Object>,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.Map<java.lang.String,java.lang.String>)", "errors": [], "param": "parentWorkflowTaskId"}, {"annotation": "javax.annotation.Nullable", "jump": -4, "location": "METHOD_PARAM", "uri": "//tmp/projects/conductor/core/src/main/java/com/netflix/conductor/core/utils/ParametersUtils.java", "pkg": "com.netflix.conductor.core.utils", "class": "com.netflix.conductor.core.utils.ParametersUtils", "inject": "true", "method": "getTaskInput(java.util.Map<java.lang.String,java.lang.Object>,com.netflix.conductor.common.run.Workflow,com.netflix.conductor.common.metadata.tasks.TaskDef,java.lang.String)", "errors": [], "param": "taskId"}, {"annotation": "javax.annotation.Nullable", "jump": 1, "location": "METHOD_PARAM", "uri": "//tmp/projects/conductor/core/src/main/java/com/netflix/conductor/core/execution/WorkflowExecutor.java", "pkg": "com.netflix.conductor.core.execution", "class": "com.netflix.conductor.core.execution.WorkflowExecutor", "inject": "true", "method": "startWorkflow(com.netflix.conductor.common.metadata.workflow.WorkflowDef,java.util.Map<java.lang.String,java.lang.Object>,java.lang.String,java.lang.String,java.lang.Integer,java.lang.String,java.lang.String,java.lang.String,java.util.Map<java.lang.String,java.lang.String>)", "errors": [], "param": "externalInputPayloadStoragePath"}, {"annotation": "javax.annotation.Nullable", "jump": 0, "location": "METHOD_RETURN", "uri": "//tmp/projects/conductor/core/src/main/java/com/netflix/conductor/service/TaskService.java", "pkg": "com.netflix.conductor.service", "class": "com.netflix.conductor.service.TaskService", "inject": "true", "method": "getPendingTaskForWorkflow(@javax.validation.constraints.NotEmpty(message=\"WorkflowId cannot be null or empty.\") java.lang.String,@javax.validation.constraints.NotEmpty(message=\"TaskReferenceName cannot be null or empty.\") java.lang.String)", "errors": [], "param": ""}, {"annotation": "javax.annotation.Nullable", "jump": 0, "location": "METHOD_PARAM", "uri": "//tmp/projects/conductor/core/src/main/java/com/netflix/conductor/core/execution/WorkflowExecutor.java", "pkg": "com.netflix.conductor.core.execution", "class": "com.netflix.conductor.core.execution.WorkflowExecutor", "inject": "true", "method": "startWorkflow(java.lang.String,java.lang.Integer,java.util.Map<java.lang.String,java.lang.Object>,java.lang.String,java.lang.String,java.lang.Integer,java.lang.String,java.lang.String,java.lang.String,java.util.Map<java.lang.String,java.lang.String>)", "errors": ["(Covered) passing @Nullable parameter 'parentWorkflowTaskId' where @NonNull is required"], "param": "parentWorkflowId"}, {"annotation": "javax.annotation.Nullable", "jump": 2, "location": "METHOD_PARAM", "uri": "//tmp/projects/conductor/core/src/main/java/com/netflix/conductor/core/execution/WorkflowExecutor.java", "pkg": "com.netflix.conductor.core.execution", "class": "com.netflix.conductor.core.execution.WorkflowExecutor", "inject": "true", "method": "startWorkflow(com.netflix.conductor.common.metadata.workflow.WorkflowDef,java.util.Map<java.lang.String,java.lang.Object>,java.lang.String,java.lang.String,java.lang.Integer,java.lang.String,java.lang.String,java.lang.String,java.util.Map<java.lang.String,java.lang.String>)", "errors": ["(Covered) passing @Nullable parameter 'parentWorkflowId' where @NonNull is required"], "param": "externalInputPayloadStoragePath"}, {"annotation": "javax.annotation.Nullable", "jump": 0, "location": "METHOD_PARAM", "uri": "//tmp/projects/conductor/core/src/main/java/com/netflix/conductor/core/execution/WorkflowExecutor.java", "pkg": "com.netflix.conductor.core.execution", "class": "com.netflix.conductor.core.execution.WorkflowExecutor", "inject": "true", "method": "startWorkflow(java.lang.String,java.lang.Integer,java.util.Map<java.lang.String,java.lang.Object>,java.lang.String,java.lang.String,java.lang.Integer,java.lang.String,java.lang.String,java.lang.String,java.util.Map<java.lang.String,java.lang.String>)", "errors": ["(Covered) passing @Nullable parameter 'event' where @NonNull is required", "(Covered) passing @Nullable parameter 'event' where @NonNull is required", "(Covered) passing @Nullable parameter 'event' where @NonNull is required"], "param": "parentWorkflowTaskId"}, {"annotation": "javax.annotation.Nullable", "jump": -3, "location": "METHOD_PARAM", "uri": "//tmp/projects/conductor/core/src/main/java/com/netflix/conductor/core/execution/WorkflowExecutor.java", "pkg": "com.netflix.conductor.core.execution", "class": "com.netflix.conductor.core.execution.WorkflowExecutor", "inject": "true", "method": "startWorkflow(java.lang.String,java.lang.Integer,java.util.Map<java.lang.String,java.lang.Object>,java.lang.String,java.lang.String,java.lang.Integer,java.lang.String,java.lang.String,java.lang.String,java.util.Map<java.lang.String,java.lang.String>)", "errors": [], "param": "event"}]}