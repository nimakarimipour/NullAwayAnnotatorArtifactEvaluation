{"reports":[{"annotation":"javax.annotation.Nullable","reason":"FIELD_NO_INIT","method":"","param":"id","location":"CLASS_FIELD","class":"com.netflix.conductor.core.events.queue.Message","pkg":"com.netflix.conductor.core.events.queue","inject":"true","uri":"//tmp/projects/conductor/core/src/main/java/com/netflix/conductor/core/events/queue/Message.java","errors":["(Covered) initializer method does not guarantee @NonNull fields payload (line 27), receipt (line 32) are initialized along all control-flow paths (remember to check for exceptions or early returns)."],"jump":2},{"annotation":"javax.annotation.Nullable","reason":"FIELD_NO_INIT","method":"","param":"deciderService","location":"CLASS_FIELD","class":"com.netflix.conductor.core.execution.mapper.TaskMapperContext.Builder","pkg":"com.netflix.conductor.core.execution.mapper","inject":"true","uri":"//tmp/projects/conductor/core/src/main/java/com/netflix/conductor/core/execution/mapper/TaskMapperContext.java","errors":["(Covered) initializer method does not guarantee @NonNull field deciderService (line 38) is initialized along all control-flow paths (remember to check for exceptions or early returns).","(Covered) initializer method does not guarantee @NonNull fields workflowDefinition (line 153), workflowInstance (line 154), taskDefinition (line 155), taskToSchedule (line 156), taskInput (line 157), retryTaskId (line 159), taskId (line 160) are initialized along all control-flow paths (remember to check for exceptions or early returns)."],"jump":2},{"annotation":"javax.annotation.Nullable","reason":"FIELD_NO_INIT","method":"","param":"retryTaskId","location":"CLASS_FIELD","class":"com.netflix.conductor.core.execution.mapper.TaskMapperContext.Builder","pkg":"com.netflix.conductor.core.execution.mapper","inject":"true","uri":"//tmp/projects/conductor/core/src/main/java/com/netflix/conductor/core/execution/mapper/TaskMapperContext.java","errors":["(Covered) initializer method does not guarantee @NonNull field retryTaskId (line 36) is initialized along all control-flow paths (remember to check for exceptions or early returns).","(Covered) initializer method does not guarantee @NonNull fields workflowDefinition (line 153), workflowInstance (line 154), taskDefinition (line 155), taskToSchedule (line 156), taskInput (line 157), taskId (line 162), deciderService (line 163) are initialized along all control-flow paths (remember to check for exceptions or early returns)."],"jump":2},{"annotation":"javax.annotation.Nullable","reason":"FIELD_NO_INIT","method":"","param":"taskDefinition","location":"CLASS_FIELD","class":"com.netflix.conductor.core.execution.mapper.TaskMapperContext.Builder","pkg":"com.netflix.conductor.core.execution.mapper","inject":"true","uri":"//tmp/projects/conductor/core/src/main/java/com/netflix/conductor/core/execution/mapper/TaskMapperContext.java","errors":["(Covered) initializer method does not guarantee @NonNull field taskDefinition (line 32) is initialized along all control-flow paths (remember to check for exceptions or early returns).","(Covered) initializer method does not guarantee @NonNull fields workflowDefinition (line 153), workflowInstance (line 154), taskToSchedule (line 158), taskInput (line 159), retryTaskId (line 161), taskId (line 162), deciderService (line 163) are initialized along all control-flow paths (remember to check for exceptions or early returns)."],"jump":2},{"annotation":"javax.annotation.Nullable","reason":"FIELD_NO_INIT","method":"","param":"workflowInstance","location":"CLASS_FIELD","class":"com.netflix.conductor.core.execution.mapper.TaskMapperContext.Builder","pkg":"com.netflix.conductor.core.execution.mapper","inject":"true","uri":"//tmp/projects/conductor/core/src/main/java/com/netflix/conductor/core/execution/mapper/TaskMapperContext.java","errors":["(Covered) initializer method does not guarantee @NonNull field workflowInstance (line 31) is initialized along all control-flow paths (remember to check for exceptions or early returns).","(Covered) initializer method does not guarantee @NonNull fields workflowDefinition (line 153), taskDefinition (line 157), taskToSchedule (line 158), taskInput (line 159), retryTaskId (line 161), taskId (line 162), deciderService (line 163) are initialized along all control-flow paths (remember to check for exceptions or early returns)."],"jump":2},{"annotation":"javax.annotation.Nullable","reason":"FIELD_NO_INIT","method":"","param":"taskInput","location":"CLASS_FIELD","class":"com.netflix.conductor.core.execution.mapper.TaskMapperContext.Builder","pkg":"com.netflix.conductor.core.execution.mapper","inject":"true","uri":"//tmp/projects/conductor/core/src/main/java/com/netflix/conductor/core/execution/mapper/TaskMapperContext.java","errors":["(Covered) initializer method does not guarantee @NonNull field taskInput (line 34) is initialized along all control-flow paths (remember to check for exceptions or early returns).","(Covered) initializer method does not guarantee @NonNull fields workflowDefinition (line 153), workflowInstance (line 154), taskDefinition (line 155), taskToSchedule (line 156), retryTaskId (line 161), taskId (line 162), deciderService (line 163) are initialized along all control-flow paths (remember to check for exceptions or early returns)."],"jump":2},{"annotation":"javax.annotation.Nullable","reason":"FIELD_NO_INIT","method":"","param":"taskToSchedule","location":"CLASS_FIELD","class":"com.netflix.conductor.core.execution.mapper.TaskMapperContext.Builder","pkg":"com.netflix.conductor.core.execution.mapper","inject":"true","uri":"//tmp/projects/conductor/core/src/main/java/com/netflix/conductor/core/execution/mapper/TaskMapperContext.java","errors":["(Covered) initializer method does not guarantee @NonNull field taskToSchedule (line 33) is initialized along all control-flow paths (remember to check for exceptions or early returns).","(Covered) initializer method does not guarantee @NonNull fields workflowDefinition (line 153), workflowInstance (line 154), taskDefinition (line 155), taskInput (line 159), retryTaskId (line 161), taskId (line 162), deciderService (line 163) are initialized along all control-flow paths (remember to check for exceptions or early returns)."],"jump":2},{"annotation":"javax.annotation.Nullable","reason":"FIELD_NO_INIT","method":"","param":"taskId","location":"CLASS_FIELD","class":"com.netflix.conductor.core.execution.mapper.TaskMapperContext.Builder","pkg":"com.netflix.conductor.core.execution.mapper","inject":"true","uri":"//tmp/projects/conductor/core/src/main/java/com/netflix/conductor/core/execution/mapper/TaskMapperContext.java","errors":["(Covered) initializer method does not guarantee @NonNull field taskId (line 37) is initialized along all control-flow paths (remember to check for exceptions or early returns).","(Covered) initializer method does not guarantee @NonNull fields workflowDefinition (line 153), workflowInstance (line 154), taskDefinition (line 155), taskToSchedule (line 156), taskInput (line 157), retryTaskId (line 159), deciderService (line 163) are initialized along all control-flow paths (remember to check for exceptions or early returns)."],"jump":2},{"annotation":"javax.annotation.Nullable","reason":"PASS_NULLABLE","method":"replace(java.util.Map<java.lang.String,java.lang.Object>,com.jayway.jsonpath.DocumentContext,java.lang.String)","param":"taskId","location":"METHOD_PARAM","class":"com.netflix.conductor.core.execution.ParametersUtils","pkg":"com.netflix.conductor.core.execution","inject":"true","uri":"//tmp/projects/conductor/core/src/main/java/com/netflix/conductor/core/execution/ParametersUtils.java","errors":["(Covered) passing @Nullable parameter 'taskId' where @NonNull is required","(Covered) passing @Nullable parameter 'taskId' where @NonNull is required"],"jump":1},{"annotation":"javax.annotation.Nullable","reason":"FIELD_NO_INIT","method":"","param":"receipt","location":"CLASS_FIELD","class":"com.netflix.conductor.core.events.queue.Message","pkg":"com.netflix.conductor.core.events.queue","inject":"true","uri":"//tmp/projects/conductor/core/src/main/java/com/netflix/conductor/core/events/queue/Message.java","errors":["(Covered) initializer method does not guarantee @NonNull fields payload (line 27), id (line 29) are initialized along all control-flow paths (remember to check for exceptions or early returns)."],"jump":1},{"annotation":"javax.annotation.Nullable","reason":"PASS_NULLABLE","method":"TerminateWorkflowException(java.lang.String,com.netflix.conductor.common.run.Workflow.WorkflowStatus,com.netflix.conductor.common.metadata.tasks.Task)","param":"task","location":"METHOD_PARAM","class":"com.netflix.conductor.core.execution.TerminateWorkflowException","pkg":"com.netflix.conductor.core.execution","inject":"true","uri":"//tmp/projects/conductor/core/src/main/java/com/netflix/conductor/core/execution/TerminateWorkflowException.java","errors":["(Covered) initializer method does not guarantee @NonNull field task (line 28) is initialized along all control-flow paths (remember to check for exceptions or early returns)."],"jump":1},{"annotation":"javax.annotation.Nullable","reason":"PASS_NULLABLE","method":"getTaskInput(java.util.Map<java.lang.String,java.lang.Object>,com.netflix.conductor.common.run.Workflow,com.netflix.conductor.common.metadata.tasks.TaskDef,java.lang.String)","param":"taskDefinition","location":"METHOD_PARAM","class":"com.netflix.conductor.core.execution.ParametersUtils","pkg":"com.netflix.conductor.core.execution","inject":"true","uri":"//tmp/projects/conductor/core/src/main/java/com/netflix/conductor/core/execution/ParametersUtils.java","errors":["(Covered) passing @Nullable parameter 'taskDefinition' where @NonNull is required"],"jump":1},{"annotation":"javax.annotation.Nullable","reason":"FIELD_NO_INIT","method":"","param":"payload","location":"CLASS_FIELD","class":"com.netflix.conductor.core.events.queue.Message","pkg":"com.netflix.conductor.core.events.queue","inject":"true","uri":"//tmp/projects/conductor/core/src/main/java/com/netflix/conductor/core/events/queue/Message.java","errors":["(Covered) initializer method does not guarantee @NonNull fields id (line 30), receipt (line 32) are initialized along all control-flow paths (remember to check for exceptions or early returns)."],"jump":1},{"annotation":"javax.annotation.Nullable","reason":"PASS_NULLABLE","method":"startWorkflow(java.lang.String,java.lang.Integer,java.util.Map<java.lang.String,java.lang.Object>,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)","param":"parentWorkflowId","location":"METHOD_PARAM","class":"com.netflix.conductor.core.execution.WorkflowExecutor","pkg":"com.netflix.conductor.core.execution","inject":"true","uri":"//tmp/projects/conductor/core/src/main/java/com/netflix/conductor/core/execution/WorkflowExecutor.java","errors":[],"jump":0},{"annotation":"javax.annotation.Nullable","reason":"PASS_NULLABLE","method":"getTasksToBeScheduled(com.netflix.conductor.common.run.Workflow,com.netflix.conductor.common.metadata.workflow.WorkflowTask,int,java.lang.String)","param":"retriedTaskId","location":"METHOD_PARAM","class":"com.netflix.conductor.core.execution.DeciderService","pkg":"com.netflix.conductor.core.execution","inject":"true","uri":"//tmp/projects/conductor/core/src/main/java/com/netflix/conductor/core/execution/DeciderService.java","errors":["(Covered) passing @Nullable parameter 'retriedTaskId' where @NonNull is required"],"jump":0},{"annotation":"javax.annotation.Nullable","reason":"PASS_NULLABLE","method":"startWorkflow(java.lang.String,java.lang.Integer,java.lang.String,java.util.Map<java.lang.String,java.lang.Object>,java.lang.String,java.lang.String,java.util.Map<java.lang.String,java.lang.String>)","param":"externalInputPayloadStoragePath","location":"METHOD_PARAM","class":"com.netflix.conductor.core.execution.WorkflowExecutor","pkg":"com.netflix.conductor.core.execution","inject":"true","uri":"//tmp/projects/conductor/core/src/main/java/com/netflix/conductor/core/execution/WorkflowExecutor.java","errors":[],"jump":0},{"annotation":"javax.annotation.Nullable","reason":"PASS_NULLABLE","method":"replaceVariables(java.lang.String,com.jayway.jsonpath.DocumentContext,java.lang.String)","param":"taskId","location":"METHOD_PARAM","class":"com.netflix.conductor.core.execution.ParametersUtils","pkg":"com.netflix.conductor.core.execution","inject":"true","uri":"//tmp/projects/conductor/core/src/main/java/com/netflix/conductor/core/execution/ParametersUtils.java","errors":["(Covered) passing @Nullable parameter 'taskId' where @NonNull is required"],"jump":0},{"annotation":"javax.annotation.Nullable","reason":"PASS_NULLABLE","method":"TerminateWorkflowException(java.lang.String)","param":"reason","location":"METHOD_PARAM","class":"com.netflix.conductor.core.execution.TerminateWorkflowException","pkg":"com.netflix.conductor.core.execution","inject":"true","uri":"//tmp/projects/conductor/core/src/main/java/com/netflix/conductor/core/execution/TerminateWorkflowException.java","errors":["(Covered) passing @Nullable parameter 'reason' where @NonNull is required"],"jump":0},{"annotation":"javax.annotation.Nullable","reason":"PASS_NULLABLE","method":"startWorkflow(java.lang.String,java.lang.Integer,java.util.Map<java.lang.String,java.lang.Object>,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.Map<java.lang.String,java.lang.String>)","param":"taskToDomain","location":"METHOD_PARAM","class":"com.netflix.conductor.core.execution.WorkflowExecutor","pkg":"com.netflix.conductor.core.execution","inject":"true","uri":"//tmp/projects/conductor/core/src/main/java/com/netflix/conductor/core/execution/WorkflowExecutor.java","errors":[],"jump":0},{"annotation":"javax.annotation.Nullable","reason":"PASS_NULLABLE","method":"startWorkflow(com.netflix.conductor.common.metadata.workflow.WorkflowDef,java.util.Map<java.lang.String,java.lang.Object>,java.lang.String,java.lang.String,java.lang.String,java.util.Map<java.lang.String,java.lang.String>)","param":"externalInputPayloadStoragePath","location":"METHOD_PARAM","class":"com.netflix.conductor.core.execution.WorkflowExecutor","pkg":"com.netflix.conductor.core.execution","inject":"true","uri":"//tmp/projects/conductor/core/src/main/java/com/netflix/conductor/core/execution/WorkflowExecutor.java","errors":[],"jump":0},{"annotation":"javax.annotation.Nullable","reason":"FIELD_NO_INIT","method":"","param":"workflowDefinition","location":"CLASS_FIELD","class":"com.netflix.conductor.core.execution.mapper.TaskMapperContext.Builder","pkg":"com.netflix.conductor.core.execution.mapper","inject":"true","uri":"//tmp/projects/conductor/core/src/main/java/com/netflix/conductor/core/execution/mapper/TaskMapperContext.java","errors":["(Covered) initializer method does not guarantee @NonNull fields workflowInstance (line 155), taskDefinition (line 156), taskToSchedule (line 157), taskInput (line 158), retryTaskId (line 160), taskId (line 161), deciderService (line 162) are initialized along all control-flow paths (remember to check for exceptions or early returns)."],"jump":0},{"annotation":"javax.annotation.Nullable","reason":"PASS_NULLABLE","method":"startWorkflow(com.netflix.conductor.common.metadata.workflow.WorkflowDef,java.util.Map<java.lang.String,java.lang.Object>,java.lang.String,java.lang.String,java.lang.Integer,java.lang.String,java.lang.String,java.lang.String,java.util.Map<java.lang.String,java.lang.String>)","param":"parentWorkflowId","location":"METHOD_PARAM","class":"com.netflix.conductor.core.execution.WorkflowExecutor","pkg":"com.netflix.conductor.core.execution","inject":"true","uri":"//tmp/projects/conductor/core/src/main/java/com/netflix/conductor/core/execution/WorkflowExecutor.java","errors":[],"jump":0},{"annotation":"javax.annotation.Nullable","reason":"PASS_NULLABLE","method":"startWorkflow(java.lang.String,java.lang.Integer,java.util.Map<java.lang.String,java.lang.Object>,java.lang.String,java.lang.String,java.lang.Integer,java.lang.String,java.lang.String,java.lang.String,java.util.Map<java.lang.String,java.lang.String>)","param":"parentWorkflowId","location":"METHOD_PARAM","class":"com.netflix.conductor.core.execution.WorkflowExecutor","pkg":"com.netflix.conductor.core.execution","inject":"true","uri":"//tmp/projects/conductor/core/src/main/java/com/netflix/conductor/core/execution/WorkflowExecutor.java","errors":[],"jump":0},{"annotation":"javax.annotation.Nullable","reason":"PASS_NULLABLE","method":"getProperty(java.lang.String,java.lang.String)","param":"defaultValue","location":"METHOD_PARAM","class":"com.netflix.conductor.core.config.Configuration","pkg":"com.netflix.conductor.core.config","inject":"true","uri":"//tmp/projects/conductor/core/src/main/java/com/netflix/conductor/core/config/Configuration.java","errors":["(Covered) parameter defaultValue is @NonNull, but parameter in superclass method com.netflix.conductor.core.config.Configuration.getProperty(java.lang.String,java.lang.String) is @Nullable"],"jump":0},{"annotation":"javax.annotation.Nullable","reason":"PASS_NULLABLE","method":"retry(com.netflix.conductor.common.metadata.tasks.TaskDef,com.netflix.conductor.common.metadata.workflow.WorkflowTask,com.netflix.conductor.common.metadata.tasks.Task,com.netflix.conductor.common.run.Workflow)","param":"taskDefinition","location":"METHOD_PARAM","class":"com.netflix.conductor.core.execution.DeciderService","pkg":"com.netflix.conductor.core.execution","inject":"true","uri":"//tmp/projects/conductor/core/src/main/java/com/netflix/conductor/core/execution/DeciderService.java","errors":[],"jump":-1},{"annotation":"javax.annotation.Nullable","reason":"RETURN_NULLABLE","method":"getAdditionalModules()","param":"","location":"METHOD_RETURN","class":"com.netflix.conductor.core.config.Configuration","pkg":"com.netflix.conductor.core.config","inject":"true","uri":"//tmp/projects/conductor/core/src/main/java/com/netflix/conductor/core/config/Configuration.java","errors":[],"jump":-1},{"annotation":"javax.annotation.Nullable","reason":"PASS_NULLABLE","method":"getProperty(java.lang.String,java.lang.String)","param":"defaultValue","location":"METHOD_PARAM","class":"com.netflix.conductor.core.config.SystemPropertiesConfiguration","pkg":"com.netflix.conductor.core.config","inject":"true","uri":"//tmp/projects/conductor/core/src/main/java/com/netflix/conductor/core/config/SystemPropertiesConfiguration.java","errors":[],"jump":-1},{"annotation":"javax.annotation.Nullable","reason":"RETURN_NULLABLE","method":"getPendingTaskByWorkflow(java.lang.String,java.lang.String)","param":"","location":"METHOD_RETURN","class":"com.netflix.conductor.core.execution.WorkflowExecutor","pkg":"com.netflix.conductor.core.execution","inject":"true","uri":"//tmp/projects/conductor/core/src/main/java/com/netflix/conductor/core/execution/WorkflowExecutor.java","errors":[],"jump":-1},{"annotation":"javax.annotation.Nullable","reason":"PASS_NULLABLE","method":"startWorkflow(java.lang.String,java.lang.Integer,java.lang.String,java.util.Map<java.lang.String,java.lang.Object>,java.lang.String,java.lang.String)","param":"event","location":"METHOD_PARAM","class":"com.netflix.conductor.core.execution.WorkflowExecutor","pkg":"com.netflix.conductor.core.execution","inject":"true","uri":"//tmp/projects/conductor/core/src/main/java/com/netflix/conductor/core/execution/WorkflowExecutor.java","errors":["projects/conductor/core/src/main/java/com/netflix/conductor/core/execution/WorkflowExecutor.java:1005: error: An unhandled exception was thrown by the Error Prone static analysis plugin."],"jump":-1},{"annotation":"javax.annotation.Nullable","reason":"RETURN_NULLABLE","method":"getTask(java.lang.String)","param":"","location":"METHOD_RETURN","class":"com.netflix.conductor.core.execution.WorkflowExecutor","pkg":"com.netflix.conductor.core.execution","inject":"true","uri":"//tmp/projects/conductor/core/src/main/java/com/netflix/conductor/core/execution/WorkflowExecutor.java","errors":[],"jump":-1},{"annotation":"javax.annotation.Nullable","reason":"FIELD_NO_INIT","method":"","param":"userName","location":"CLASS_FIELD","class":"com.netflix.conductor.core.WorkflowContext","pkg":"com.netflix.conductor.core","inject":"true","uri":"//tmp/projects/conductor/core/src/main/java/com/netflix/conductor/core/WorkflowContext.java","errors":[],"jump":-1},{"annotation":"javax.annotation.Nullable","reason":"RETURN_NULLABLE","method":"getNextTasksToBeScheduled(com.netflix.conductor.common.run.Workflow,com.netflix.conductor.common.metadata.tasks.Task)","param":"","location":"METHOD_RETURN","class":"com.netflix.conductor.core.execution.DeciderService","pkg":"com.netflix.conductor.core.execution","inject":"true","uri":"//tmp/projects/conductor/core/src/main/java/com/netflix/conductor/core/execution/DeciderService.java","errors":[],"jump":-1},{"annotation":"javax.annotation.Nullable","reason":"PASS_NULLABLE","method":"terminateWorkflow(com.netflix.conductor.common.run.Workflow,java.lang.String,java.lang.String)","param":"failureWorkflow","location":"METHOD_PARAM","class":"com.netflix.conductor.core.execution.WorkflowExecutor","pkg":"com.netflix.conductor.core.execution","inject":"true","uri":"//tmp/projects/conductor/core/src/main/java/com/netflix/conductor/core/execution/WorkflowExecutor.java","errors":["projects/conductor/core/src/main/java/com/netflix/conductor/core/execution/WorkflowExecutor.java:1005: error: An unhandled exception was thrown by the Error Prone static analysis plugin."],"jump":-1},{"annotation":"javax.annotation.Nullable","reason":"PASS_NULLABLE","method":"startWorkflow(java.lang.String,java.lang.Integer,java.lang.String,java.lang.Integer,java.util.Map<java.lang.String,java.lang.Object>,java.lang.String,java.lang.String)","param":"event","location":"METHOD_PARAM","class":"com.netflix.conductor.core.execution.WorkflowExecutor","pkg":"com.netflix.conductor.core.execution","inject":"true","uri":"//tmp/projects/conductor/core/src/main/java/com/netflix/conductor/core/execution/WorkflowExecutor.java","errors":["projects/conductor/core/src/main/java/com/netflix/conductor/core/execution/WorkflowExecutor.java:1005: error: An unhandled exception was thrown by the Error Prone static analysis plugin."],"jump":-1}]}